
FDCAN_NormalMode_H745_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080051d4  080051d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800528c  0800528c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800528c  0800528c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800528c  0800528c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08005294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  24000074  08005308  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002b8  08005308  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfb2  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e4  00000000  00000000  0002e054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00030548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038eaf  00000000  00000000  00030f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be1a  00000000  00000000  00069e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017b4cb  00000000  00000000  00075c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f1124  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  001f1174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080051bc 	.word	0x080051bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080051bc 	.word	0x080051bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <HAL_FDCAN_RxFifo0Callback>:

int indx = 0;

// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d014      	beq.n	80004ea <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80004c2:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80004c4:	2140      	movs	r1, #64	; 0x40
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f001 f8dc 	bl	8001684 <HAL_FDCAN_GetRxMessage>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80004d2:	f000 fa93 	bl	80009fc <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80004d6:	2200      	movs	r2, #0
 80004d8:	2101      	movs	r1, #1
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f001 fa40 	bl	8001960 <HAL_FDCAN_ActivateNotification>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 80004e6:	f000 fa89 	bl	80009fc <Error_Handler>
    }
  }
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	24000228 	.word	0x24000228
 80004f8:	240001f4 	.word	0x240001f4

080004fc <HAL_FDCAN_RxFifo1Callback>:

// FDCAN2 Callback
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	f003 0310 	and.w	r3, r3, #16
 800050c:	2b00      	cmp	r3, #0
 800050e:	d028      	beq.n	8000562 <HAL_FDCAN_RxFifo1Callback+0x66>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <HAL_FDCAN_RxFifo1Callback+0x70>)
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <HAL_FDCAN_RxFifo1Callback+0x74>)
 8000514:	2141      	movs	r1, #65	; 0x41
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f001 f8b4 	bl	8001684 <HAL_FDCAN_GetRxMessage>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <HAL_FDCAN_RxFifo1Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8000522:	f000 fa6b 	bl	80009fc <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8000526:	2200      	movs	r2, #0
 8000528:	2110      	movs	r1, #16
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f001 fa18 	bl	8001960 <HAL_FDCAN_ActivateNotification>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_FDCAN_RxFifo1Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000536:	f000 fa61 	bl	80009fc <Error_Handler>
    }

	  sprintf ((char *)TxData2, "FDCAN2TX %d", indx++);
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <HAL_FDCAN_RxFifo1Callback+0x78>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	490c      	ldr	r1, [pc, #48]	; (8000574 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8000542:	600a      	str	r2, [r1, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	490c      	ldr	r1, [pc, #48]	; (8000578 <HAL_FDCAN_RxFifo1Callback+0x7c>)
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <HAL_FDCAN_RxFifo1Callback+0x80>)
 800054a:	f004 f9d7 	bl	80048fc <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2)!= HAL_OK)
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <HAL_FDCAN_RxFifo1Callback+0x80>)
 8000550:	490b      	ldr	r1, [pc, #44]	; (8000580 <HAL_FDCAN_RxFifo1Callback+0x84>)
 8000552:	480c      	ldr	r0, [pc, #48]	; (8000584 <HAL_FDCAN_RxFifo1Callback+0x88>)
 8000554:	f001 f83b 	bl	80015ce <HAL_FDCAN_AddMessageToTxFifoQ>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_FDCAN_RxFifo1Callback+0x66>
	  {
		  Error_Handler();
 800055e:	f000 fa4d 	bl	80009fc <Error_Handler>
	  }
  }
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	2400028c 	.word	0x2400028c
 8000570:	24000258 	.word	0x24000258
 8000574:	24000298 	.word	0x24000298
 8000578:	080051d4 	.word	0x080051d4
 800057c:	24000280 	.word	0x24000280
 8000580:	24000234 	.word	0x24000234
 8000584:	24000130 	.word	0x24000130

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fbce 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f88c 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 fa08 	bl	80009a8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000598:	f000 f906 	bl	80007a8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800059c:	f000 f984 	bl	80008a8 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80005a0:	483b      	ldr	r0, [pc, #236]	; (8000690 <main+0x108>)
 80005a2:	f000 ffe9 	bl	8001578 <HAL_FDCAN_Start>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <main+0x28>
  {
	  Error_Handler();
 80005ac:	f000 fa26 	bl	80009fc <Error_Handler>
  }

  // STart FDCAN2
  if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 80005b0:	4838      	ldr	r0, [pc, #224]	; (8000694 <main+0x10c>)
 80005b2:	f000 ffe1 	bl	8001578 <HAL_FDCAN_Start>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <main+0x38>
  {
	  Error_Handler();
 80005bc:	f000 fa1e 	bl	80009fc <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80005c0:	2200      	movs	r2, #0
 80005c2:	2101      	movs	r1, #1
 80005c4:	4832      	ldr	r0, [pc, #200]	; (8000690 <main+0x108>)
 80005c6:	f001 f9cb 	bl	8001960 <HAL_FDCAN_ActivateNotification>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <main+0x4c>
  {
    /* Notification Error */
    Error_Handler();
 80005d0:	f000 fa14 	bl	80009fc <Error_Handler>
  }


  // Activate the notification for new data in FIFO1 for FDCAN2
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	482e      	ldr	r0, [pc, #184]	; (8000694 <main+0x10c>)
 80005da:	f001 f9c1 	bl	8001960 <HAL_FDCAN_ActivateNotification>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <main+0x60>
  {
    /* Notification Error */
    Error_Handler();
 80005e4:	f000 fa0a 	bl	80009fc <Error_Handler>
  }


  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x11;
 80005e8:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <main+0x110>)
 80005ea:	2211      	movs	r2, #17
 80005ec:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID;
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <main+0x110>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <main+0x110>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_12;
 80005fa:	4b27      	ldr	r3, [pc, #156]	; (8000698 <main+0x110>)
 80005fc:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000600:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <main+0x110>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <main+0x110>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_FD_CAN;
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <main+0x110>)
 8000610:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000614:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <main+0x110>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <main+0x110>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]


  // Configure TX Header for FDCAN2
  TxHeader2.Identifier = 0x22;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <main+0x114>)
 8000624:	2222      	movs	r2, #34	; 0x22
 8000626:	601a      	str	r2, [r3, #0]
  TxHeader2.IdType = FDCAN_STANDARD_ID;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <main+0x114>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <main+0x114>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  TxHeader2.DataLength = FDCAN_DLC_BYTES_12;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <main+0x114>)
 8000636:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800063a:	60da      	str	r2, [r3, #12]
  TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <main+0x114>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <main+0x114>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  TxHeader2.FDFormat = FDCAN_FD_CAN;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <main+0x114>)
 800064a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800064e:	619a      	str	r2, [r3, #24]
  TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <main+0x114>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  TxHeader2.MessageMarker = 0;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <main+0x114>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  sprintf ((char *)TxData1, "FDCAN1TX %d", indx++);
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <main+0x118>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	490f      	ldr	r1, [pc, #60]	; (80006a0 <main+0x118>)
 8000664:	600a      	str	r2, [r1, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	490e      	ldr	r1, [pc, #56]	; (80006a4 <main+0x11c>)
 800066a:	480f      	ldr	r0, [pc, #60]	; (80006a8 <main+0x120>)
 800066c:	f004 f946 	bl	80048fc <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1)!= HAL_OK)
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <main+0x120>)
 8000672:	4909      	ldr	r1, [pc, #36]	; (8000698 <main+0x110>)
 8000674:	4806      	ldr	r0, [pc, #24]	; (8000690 <main+0x108>)
 8000676:	f000 ffaa 	bl	80015ce <HAL_FDCAN_AddMessageToTxFifoQ>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <main+0xfc>
	  {
		  Error_Handler();
 8000680:	f000 f9bc 	bl	80009fc <Error_Handler>
	  }

	  HAL_Delay (1000);
 8000684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000688:	f000 fbe2 	bl	8000e50 <HAL_Delay>
	  sprintf ((char *)TxData1, "FDCAN1TX %d", indx++);
 800068c:	e7e6      	b.n	800065c <main+0xd4>
 800068e:	bf00      	nop
 8000690:	24000090 	.word	0x24000090
 8000694:	24000130 	.word	0x24000130
 8000698:	240001d0 	.word	0x240001d0
 800069c:	24000234 	.word	0x24000234
 80006a0:	24000298 	.word	0x24000298
 80006a4:	080051e0 	.word	0x080051e0
 80006a8:	2400021c 	.word	0x2400021c

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09c      	sub	sp, #112	; 0x70
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	224c      	movs	r2, #76	; 0x4c
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 f916 	bl	80048ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2220      	movs	r2, #32
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f910 	bl	80048ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006cc:	2004      	movs	r0, #4
 80006ce:	f002 f873 	bl	80027b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b32      	ldr	r3, [pc, #200]	; (80007a0 <SystemClock_Config+0xf4>)
 80006d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006da:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <SystemClock_Config+0xf4>)
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <SystemClock_Config+0xf4>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <SystemClock_Config+0xf8>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f4:	4a2b      	ldr	r2, [pc, #172]	; (80007a4 <SystemClock_Config+0xf8>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <SystemClock_Config+0xf8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000708:	bf00      	nop
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <SystemClock_Config+0xf8>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000716:	d1f8      	bne.n	800070a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800071c:	2301      	movs	r3, #1
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000730:	2309      	movs	r3, #9
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000738:	2303      	movs	r3, #3
 800073a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000740:	230c      	movs	r3, #12
 8000742:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000744:	2302      	movs	r3, #2
 8000746:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000748:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800074c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	4618      	mov	r0, r3
 8000754:	f002 f88a 	bl	800286c <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800075e:	f000 f94d 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	233f      	movs	r3, #63	; 0x3f
 8000764:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fc9e 	bl	80030c8 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000792:	f000 f933 	bl	80009fc <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3770      	adds	r7, #112	; 0x70
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58000400 	.word	0x58000400
 80007a4:	58024800 	.word	0x58024800

080007a8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007ae:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007b0:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <MX_FDCAN1_Init+0xfc>)
 80007b2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80007b4:	4b3a      	ldr	r3, [pc, #232]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ba:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80007c2:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007ce:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80007d4:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007dc:	220d      	movs	r2, #13
 80007de:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007e2:	2256      	movs	r2, #86	; 0x56
 80007e4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007e8:	220d      	movs	r2, #13
 80007ea:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007ee:	2219      	movs	r2, #25
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000800:	2201      	movs	r2, #1
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000806:	2200      	movs	r2, #0
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 800080c:	2201      	movs	r2, #1
 800080e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000812:	2200      	movs	r2, #0
 8000814:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000818:	2201      	movs	r2, #1
 800081a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 800081e:	2205      	movs	r2, #5
 8000820:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000824:	2200      	movs	r2, #0
 8000826:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 800082a:	2204      	movs	r2, #4
 800082c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000830:	2200      	movs	r2, #0
 8000832:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000836:	2204      	movs	r2, #4
 8000838:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 800083c:	2200      	movs	r2, #0
 800083e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000842:	2200      	movs	r2, #0
 8000844:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000848:	2201      	movs	r2, #1
 800084a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 800084e:	2200      	movs	r2, #0
 8000850:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 8000854:	2205      	movs	r2, #5
 8000856:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 800085a:	f000 fc39 	bl	80010d0 <HAL_FDCAN_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 8000864:	f000 f8ca 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000870:	2302      	movs	r3, #2
 8000872:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000874:	2301      	movs	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x22;
 8000878:	2322      	movs	r3, #34	; 0x22
 800087a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x22;
 800087c:	2322      	movs	r3, #34	; 0x22
 800087e:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_FDCAN1_Init+0xf8>)
 800088a:	f000 fdff 	bl	800148c <HAL_FDCAN_ConfigFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_FDCAN1_Init+0xf0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000894:	f000 f8b2 	bl	80009fc <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	24000090 	.word	0x24000090
 80008a4:	4000a000 	.word	0x4000a000

080008a8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80008ae:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008b0:	4a3c      	ldr	r2, [pc, #240]	; (80009a4 <MX_FDCAN2_Init+0xfc>)
 80008b2:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80008b4:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ba:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80008c2:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80008c8:	4b35      	ldr	r3, [pc, #212]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80008ce:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80008d4:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 80008da:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008dc:	220d      	movs	r2, #13
 80008de:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 80008e0:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008e2:	2256      	movs	r2, #86	; 0x56
 80008e4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 80008e6:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008e8:	220d      	movs	r2, #13
 80008ea:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008ee:	2219      	movs	r2, #25
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000900:	2201      	movs	r2, #1
 8000902:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 11;
 8000904:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000906:	220b      	movs	r2, #11
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 800090c:	2201      	movs	r2, #1
 800090e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000912:	2200      	movs	r2, #0
 8000914:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000918:	2200      	movs	r2, #0
 800091a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800091c:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 800091e:	2204      	movs	r2, #4
 8000920:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000924:	2201      	movs	r2, #1
 8000926:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_12;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 800092a:	2205      	movs	r2, #5
 800092c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000930:	2200      	movs	r2, #0
 8000932:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000936:	2204      	movs	r2, #4
 8000938:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 800093c:	2200      	movs	r2, #0
 800093e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000942:	2200      	movs	r2, #0
 8000944:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000948:	2201      	movs	r2, #1
 800094a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 800094e:	2200      	movs	r2, #0
 8000950:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 8000954:	2205      	movs	r2, #5
 8000956:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 800095a:	f000 fbb9 	bl	80010d0 <HAL_FDCAN_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_FDCAN2_Init+0xc0>
  {
    Error_Handler();
 8000964:	f000 f84a 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000970:	2302      	movs	r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000974:	2302      	movs	r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x11;
 8000978:	2311      	movs	r3, #17
 800097a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x11;
 800097c:	2311      	movs	r3, #17
 800097e:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_FDCAN2_Init+0xf8>)
 800098a:	f000 fd7f 	bl	800148c <HAL_FDCAN_ConfigFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_FDCAN2_Init+0xf0>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000994:	f000 f832 	bl	80009fc <Error_Handler>
  }

  /* USER CODE END FDCAN2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000130 	.word	0x24000130
 80009a4:	4000a400 	.word	0x4000a400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_GPIO_Init+0x50>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <MX_GPIO_Init+0x50>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_GPIO_Init+0x50>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_GPIO_Init+0x50>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <MX_GPIO_Init+0x50>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_GPIO_Init+0x50>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	58024400 	.word	0x58024400

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <Error_Handler+0x8>
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_MspInit+0x30>)
 8000a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x30>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x30>)
 8000a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	58024400 	.word	0x58024400

08000a3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0ba      	sub	sp, #232	; 0xe8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	22bc      	movs	r2, #188	; 0xbc
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 ff45 	bl	80048ec <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a5c      	ldr	r2, [pc, #368]	; (8000bd8 <HAL_FDCAN_MspInit+0x19c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d156      	bne.n	8000b1a <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a70:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fe52 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000a8a:	f7ff ffb7 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000a8e:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <HAL_FDCAN_MspInit+0x1a0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a51      	ldr	r2, [pc, #324]	; (8000bdc <HAL_FDCAN_MspInit+0x1a0>)
 8000a96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000a98:	4b50      	ldr	r3, [pc, #320]	; (8000bdc <HAL_FDCAN_MspInit+0x1a0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d10e      	bne.n	8000abe <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000aa0:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000aa2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000aa6:	4a4e      	ldr	r2, [pc, #312]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ab0:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000ab2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a46      	ldr	r2, [pc, #280]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8000adc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000af6:	2309      	movs	r3, #9
 8000af8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000afc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4838      	ldr	r0, [pc, #224]	; (8000be4 <HAL_FDCAN_MspInit+0x1a8>)
 8000b04:	f001 fca8 	bl	8002458 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2013      	movs	r0, #19
 8000b0e:	f000 faaa 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b12:	2013      	movs	r0, #19
 8000b14:	f000 fac1 	bl	800109a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000b18:	e05a      	b.n	8000bd0 <HAL_FDCAN_MspInit+0x194>
  else if(hfdcan->Instance==FDCAN2)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a32      	ldr	r2, [pc, #200]	; (8000be8 <HAL_FDCAN_MspInit+0x1ac>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d155      	bne.n	8000bd0 <HAL_FDCAN_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fdf6 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_FDCAN_MspInit+0x10a>
      Error_Handler();
 8000b42:	f7ff ff5b 	bl	80009fc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <HAL_FDCAN_MspInit+0x1a0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <HAL_FDCAN_MspInit+0x1a0>)
 8000b4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <HAL_FDCAN_MspInit+0x1a0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d10e      	bne.n	8000b76 <HAL_FDCAN_MspInit+0x13a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000b5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b5e:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b64:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000b6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_FDCAN_MspInit+0x1a4>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13;
 8000b94:	f242 0320 	movw	r3, #8224	; 0x2020
 8000b98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000bae:	2309      	movs	r3, #9
 8000bb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <HAL_FDCAN_MspInit+0x1b0>)
 8000bbc:	f001 fc4c 	bl	8002458 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2014      	movs	r0, #20
 8000bc6:	f000 fa4e 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000bca:	2014      	movs	r0, #20
 8000bcc:	f000 fa65 	bl	800109a <HAL_NVIC_EnableIRQ>
}
 8000bd0:	bf00      	nop
 8000bd2:	37e8      	adds	r7, #232	; 0xe8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	4000a000 	.word	0x4000a000
 8000bdc:	2400029c 	.word	0x2400029c
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58021c00 	.word	0x58021c00
 8000be8:	4000a400 	.word	0x4000a400
 8000bec:	58020400 	.word	0x58020400

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f8e8 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c4a:	f000 ff03 	bl	8001a54 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	24000090 	.word	0x24000090

08000c58 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <FDCAN2_IT0_IRQHandler+0x10>)
 8000c5e:	f000 fef9 	bl	8001a54 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	24000130 	.word	0x24000130

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f003 fdee 	bl	800487c <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	24080000 	.word	0x24080000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	240002a0 	.word	0x240002a0
 8000cd4:	240002b8 	.word	0x240002b8

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cdc:	f7ff fb50 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f003 fdbf 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fc3d 	bl	8000588 <main>
  bx  lr
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d18:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000d1c:	08005294 	.word	0x08005294
  ldr r2, =_sbss
 8000d20:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000d24:	240002b8 	.word	0x240002b8

08000d28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC3_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f000 f98c 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d38:	f002 fb7c 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_Init+0x68>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	0a1b      	lsrs	r3, r3, #8
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	4913      	ldr	r1, [pc, #76]	; (8000d98 <HAL_Init+0x6c>)
 8000d4a:	5ccb      	ldrb	r3, [r1, r3]
 8000d4c:	f003 031f 	and.w	r3, r3, #31
 8000d50:	fa22 f303 	lsr.w	r3, r2, r3
 8000d54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <HAL_Init+0x68>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_Init+0x6c>)
 8000d60:	5cd3      	ldrb	r3, [r2, r3]
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <HAL_Init+0x70>)
 8000d6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d70:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <HAL_Init+0x74>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f814 	bl	8000da4 <HAL_InitTick>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e002      	b.n	8000d8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d86:	f7ff fe3f 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400
 8000d98:	08005238 	.word	0x08005238
 8000d9c:	24000004 	.word	0x24000004
 8000da0:	24000000 	.word	0x24000000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_InitTick+0x60>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e021      	b.n	8000dfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_InitTick+0x64>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_InitTick+0x60>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f971 	bl	80010b6 <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f000 f93b 	bl	8001066 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x68>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2400000c 	.word	0x2400000c
 8000e08:	24000000 	.word	0x24000000
 8000e0c:	24000008 	.word	0x24000008

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2400000c 	.word	0x2400000c
 8000e34:	240002a4 	.word	0x240002a4

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	240002a4 	.word	0x240002a4

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_Delay+0x44>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2400000c 	.word	0x2400000c

08000e98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetREVID+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0c1b      	lsrs	r3, r3, #16
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	5c001000 	.word	0x5c001000

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	05fa0000 	.word	0x05fa0000

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff40 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff90 	bl	8000fa4 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5f 	bl	8000f50 <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff33 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa4 	bl	800100c <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b098      	sub	sp, #96	; 0x60
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80010d8:	4a84      	ldr	r2, [pc, #528]	; (80012ec <HAL_FDCAN_Init+0x21c>)
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4611      	mov	r1, r2
 80010e0:	224c      	movs	r2, #76	; 0x4c
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fbf4 	bl	80048d0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e1c6      	b.n	8001480 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a7e      	ldr	r2, [pc, #504]	; (80012f0 <HAL_FDCAN_Init+0x220>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d106      	bne.n	800110a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fc8c 	bl	8000a3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0210 	bic.w	r2, r2, #16
 8001132:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001134:	f7ff fe80 	bl	8000e38 <HAL_GetTick>
 8001138:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800113a:	e014      	b.n	8001166 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800113c:	f7ff fe7c 	bl	8000e38 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d90d      	bls.n	8001166 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001150:	f043 0201 	orr.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e18c      	b.n	8001480 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b08      	cmp	r3, #8
 8001172:	d0e3      	beq.n	800113c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001184:	f7ff fe58 	bl	8000e38 <HAL_GetTick>
 8001188:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800118a:	e014      	b.n	80011b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800118c:	f7ff fe54 	bl	8000e38 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b0a      	cmp	r3, #10
 8001198:	d90d      	bls.n	80011b6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011a0:	f043 0201 	orr.w	r2, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2203      	movs	r2, #3
 80011ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e164      	b.n	8001480 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0e3      	beq.n	800118c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0202 	orr.w	r2, r2, #2
 80011d2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7c1b      	ldrb	r3, [r3, #16]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	e007      	b.n	80011fe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7c5b      	ldrb	r3, [r3, #17]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001214:	619a      	str	r2, [r3, #24]
 8001216:	e007      	b.n	8001228 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	699a      	ldr	r2, [r3, #24]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001226:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7c9b      	ldrb	r3, [r3, #18]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d108      	bne.n	8001242 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800123e:	619a      	str	r2, [r3, #24]
 8001240:	e007      	b.n	8001252 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001250:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001276:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0210 	bic.w	r2, r2, #16
 8001286:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d108      	bne.n	80012a2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0204 	orr.w	r2, r2, #4
 800129e:	619a      	str	r2, [r3, #24]
 80012a0:	e030      	b.n	8001304 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d02c      	beq.n	8001304 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d020      	beq.n	80012f4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012c0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 0210 	orr.w	r2, r2, #16
 80012d0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d114      	bne.n	8001304 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699a      	ldr	r2, [r3, #24]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0220 	orr.w	r2, r2, #32
 80012e8:	619a      	str	r2, [r3, #24]
 80012ea:	e00b      	b.n	8001304 <HAL_FDCAN_Init+0x234>
 80012ec:	080051ec 	.word	0x080051ec
 80012f0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0220 	orr.w	r2, r2, #32
 8001302:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	3b01      	subs	r3, #1
 800130a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	3b01      	subs	r3, #1
 8001312:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001314:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800131c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	3b01      	subs	r3, #1
 8001326:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800132c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800132e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001338:	d115      	bne.n	8001366 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	3b01      	subs	r3, #1
 8001346:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001348:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	3b01      	subs	r3, #1
 8001350:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001352:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	3b01      	subs	r3, #1
 800135c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001362:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001364:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138c:	4413      	add	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d011      	beq.n	80013b6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800139a:	f023 0107 	bic.w	r1, r3, #7
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	3360      	adds	r3, #96	; 0x60
 80013a6:	443b      	add	r3, r7
 80013a8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d011      	beq.n	80013e2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80013c6:	f023 0107 	bic.w	r1, r3, #7
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	3360      	adds	r3, #96	; 0x60
 80013d2:	443b      	add	r3, r7
 80013d4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d012      	beq.n	8001410 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80013f2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3360      	adds	r3, #96	; 0x60
 80013fe:	443b      	add	r3, r7
 8001400:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001404:	011a      	lsls	r2, r3, #4
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001414:	2b00      	cmp	r3, #0
 8001416:	d012      	beq.n	800143e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001420:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	3360      	adds	r3, #96	; 0x60
 800142c:	443b      	add	r3, r7
 800142e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001432:	021a      	lsls	r2, r3, #8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_FDCAN_Init+0x3b8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d107      	bne.n	8001458 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f022 0203 	bic.w	r2, r2, #3
 8001456:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fded 	bl	8002050 <FDCAN_CalcultateRamBlockAddresses>
 8001476:	4603      	mov	r3, r0
 8001478:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800147c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001480:	4618      	mov	r0, r3
 8001482:	3760      	adds	r7, #96	; 0x60
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	4000a000 	.word	0x4000a000

0800148c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800149c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d002      	beq.n	80014aa <HAL_FDCAN_ConfigFilter+0x1e>
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d157      	bne.n	800155a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d12b      	bne.n	800150a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b07      	cmp	r3, #7
 80014b8:	d10d      	bne.n	80014d6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80014c6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80014cc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80014ce:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e00e      	b.n	80014f4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014e2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80014ea:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014f0:	4313      	orrs	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e025      	b.n	8001556 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	075a      	lsls	r2, r3, #29
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b07      	cmp	r3, #7
 800151e:	d103      	bne.n	8001528 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	e006      	b.n	8001536 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	079a      	lsls	r2, r3, #30
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4413      	add	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3304      	adds	r3, #4
 800154e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e008      	b.n	800156c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001560:	f043 0202 	orr.w	r2, r3, #2
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
  }
}
 800156c:	4618      	mov	r0, r3
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d111      	bne.n	80015b0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e008      	b.n	80015c2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015b6:	f043 0204 	orr.w	r2, r3, #4
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
  }
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d141      	bne.n	800166a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015ee:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015fc:	f043 0220 	orr.w	r2, r3, #32
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e038      	b.n	800167c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001620:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e026      	b.n	800167c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001636:	0c1b      	lsrs	r3, r3, #16
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 fe89 	bl	800235c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2101      	movs	r1, #1
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800165a:	2201      	movs	r2, #1
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	e008      	b.n	800167c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001670:	f043 0208 	orr.w	r2, r3, #8
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
  }
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001684:	b480      	push	{r7}
 8001686:	b08b      	sub	sp, #44	; 0x2c
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800169c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800169e:	7efb      	ldrb	r3, [r7, #27]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	f040 814b 	bne.w	800193c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b40      	cmp	r3, #64	; 0x40
 80016aa:	d14d      	bne.n	8001748 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80016b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016c2:	f043 0220 	orr.w	r2, r3, #32
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e13e      	b.n	800194e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e12c      	b.n	800194e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80016fc:	0e1b      	lsrs	r3, r3, #24
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b01      	cmp	r3, #1
 8001704:	d10b      	bne.n	800171e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800170e:	0fdb      	lsrs	r3, r3, #31
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001718:	d101      	bne.n	800171e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800171a:	2301      	movs	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	4413      	add	r3, r2
 8001730:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	69f9      	ldr	r1, [r7, #28]
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	e069      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b41      	cmp	r3, #65	; 0x41
 800174c:	d14d      	bne.n	80017ea <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001756:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0ed      	b.n	800194e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800177a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001788:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0db      	b.n	800194e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800179e:	0e1b      	lsrs	r3, r3, #24
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d10b      	bne.n	80017c0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80017b0:	0fdb      	lsrs	r3, r3, #31
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017ba:	d101      	bne.n	80017c0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80017bc:	2301      	movs	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	69f9      	ldr	r1, [r7, #28]
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
 80017e8:	e018      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d309      	bcc.n	8001808 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017fa:	f043 0220 	orr.w	r2, r3, #32
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0a2      	b.n	800194e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0c9b      	lsrs	r3, r3, #18
 8001836:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e005      	b.n	800184c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	3304      	adds	r3, #4
 8001868:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0e1b      	lsrs	r3, r3, #24
 800189e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0fda      	lsrs	r2, r3, #31
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	3304      	adds	r3, #4
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	e00a      	b.n	80018d6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	441a      	add	r2, r3
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	440b      	add	r3, r1
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	3301      	adds	r3, #1
 80018d4:	623b      	str	r3, [r7, #32]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	4a1f      	ldr	r2, [pc, #124]	; (800195c <HAL_FDCAN_GetRxMessage+0x2d8>)
 80018de:	5cd3      	ldrb	r3, [r2, r3]
 80018e0:	461a      	mov	r2, r3
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d3eb      	bcc.n	80018c0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b40      	cmp	r3, #64	; 0x40
 80018ec:	d105      	bne.n	80018fa <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80018f8:	e01e      	b.n	8001938 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b41      	cmp	r3, #65	; 0x41
 80018fe:	d105      	bne.n	800190c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800190a:	e015      	b.n	8001938 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b1f      	cmp	r3, #31
 8001910:	d808      	bhi.n	8001924 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2101      	movs	r1, #1
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001922:	e009      	b.n	8001938 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f003 021f 	and.w	r2, r3, #31
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	e008      	b.n	800194e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001942:	f043 0208 	orr.w	r2, r3, #8
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
  }
}
 800194e:	4618      	mov	r0, r3
 8001950:	372c      	adds	r7, #44	; 0x2c
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	08005248 	.word	0x08005248

08001960 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001972:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d002      	beq.n	8001980 <HAL_FDCAN_ActivateNotification+0x20>
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d155      	bne.n	8001a2c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d108      	bne.n	80019a0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0201 	orr.w	r2, r2, #1
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c
 800199e:	e014      	b.n	80019ca <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4013      	ands	r3, r2
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d108      	bne.n	80019c2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0202 	orr.w	r2, r2, #2
 80019be:	65da      	str	r2, [r3, #92]	; 0x5c
 80019c0:	e003      	b.n	80019ca <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2203      	movs	r2, #3
 80019c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d009      	beq.n	80019e8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_FDCAN_ActivateNotification+0xec>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	430b      	orrs	r3, r1
 8001a18:	6553      	str	r3, [r2, #84]	; 0x54
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	0f9b      	lsrs	r3, r3, #30
 8001a22:	490b      	ldr	r1, [pc, #44]	; (8001a50 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e008      	b.n	8001a3e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a32:	f043 0202 	orr.w	r2, r3, #2
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	3fcfffff 	.word	0x3fcfffff
 8001a50:	4000a800 	.word	0x4000a800

08001a54 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b096      	sub	sp, #88	; 0x58
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001a5c:	4b9a      	ldr	r3, [pc, #616]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	079b      	lsls	r3, r3, #30
 8001a62:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001a64:	4b98      	ldr	r3, [pc, #608]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	079b      	lsls	r3, r3, #30
 8001a6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a76:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001a7a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a84:	4013      	ands	r3, r2
 8001a86:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001abe:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001ac2:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001acc:	4013      	ands	r3, r2
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d010      	beq.n	8001b26 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00a      	beq.n	8001b26 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b18:	651a      	str	r2, [r3, #80]	; 0x50
 8001b1a:	4b6b      	ldr	r3, [pc, #428]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fa49 	bl	8001fb8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b28:	0a9b      	lsrs	r3, r3, #10
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d01d      	beq.n	8001b6e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b34:	0a9b      	lsrs	r3, r3, #10
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d017      	beq.n	8001b6e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b52:	4013      	ands	r3, r2
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b5e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f9fc 	bl	8001f66 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b7a:	4b54      	ldr	r3, [pc, #336]	; (8001ccc <HAL_FDCAN_IRQHandler+0x278>)
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	6513      	str	r3, [r2, #80]	; 0x50
 8001b80:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b84:	0f9b      	lsrs	r3, r3, #30
 8001b86:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001b88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f9c0 	bl	8001f10 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00d      	beq.n	8001bb2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ccc <HAL_FDCAN_IRQHandler+0x278>)
 8001b9e:	400b      	ands	r3, r1
 8001ba0:	6513      	str	r3, [r2, #80]	; 0x50
 8001ba2:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba6:	0f9b      	lsrs	r3, r3, #30
 8001ba8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001baa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f9ba 	bl	8001f26 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <HAL_FDCAN_IRQHandler+0x278>)
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	6513      	str	r3, [r2, #80]	; 0x50
 8001bc4:	4a40      	ldr	r2, [pc, #256]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc8:	0f9b      	lsrs	r3, r3, #30
 8001bca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001bcc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fc6c 	bl	80004ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001be0:	4b3a      	ldr	r3, [pc, #232]	; (8001ccc <HAL_FDCAN_IRQHandler+0x278>)
 8001be2:	400b      	ands	r3, r1
 8001be4:	6513      	str	r3, [r2, #80]	; 0x50
 8001be6:	4a38      	ldr	r2, [pc, #224]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bea:	0f9b      	lsrs	r3, r3, #30
 8001bec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001bee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7fe fc83 	bl	80004fc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf8:	0adb      	lsrs	r3, r3, #11
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d010      	beq.n	8001c24 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c04:	0adb      	lsrs	r3, r3, #11
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c16:	651a      	str	r2, [r3, #80]	; 0x50
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f98c 	bl	8001f3c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c26:	0a5b      	lsrs	r3, r3, #9
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01d      	beq.n	8001c6c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d017      	beq.n	8001c6c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c50:	4013      	ands	r3, r2
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5c:	651a      	str	r2, [r3, #80]	; 0x50
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f972 	bl	8001f50 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c6e:	0cdb      	lsrs	r3, r3, #19
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7a:	0cdb      	lsrs	r3, r3, #19
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00a      	beq.n	8001c9a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c8c:	651a      	str	r2, [r3, #80]	; 0x50
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f971 	bl	8001f7c <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d016      	beq.n	8001cd4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50
 8001cbc:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <HAL_FDCAN_IRQHandler+0x274>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	e004      	b.n	8001cd0 <HAL_FDCAN_IRQHandler+0x27c>
 8001cc6:	bf00      	nop
 8001cc8:	4000a800 	.word	0x4000a800
 8001ccc:	3fcfffff 	.word	0x3fcfffff
 8001cd0:	f000 f95e 	bl	8001f90 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd6:	0c9b      	lsrs	r3, r3, #18
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d010      	beq.n	8001d02 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cf4:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f951 	bl	8001fa4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d04:	0c5b      	lsrs	r3, r3, #17
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d015      	beq.n	8001d3a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d10:	0c5b      	lsrs	r3, r3, #17
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00f      	beq.n	8001d3a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d22:	651a      	str	r2, [r3, #80]	; 0x50
 8001d24:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00d      	beq.n	8001d5c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d46:	4b70      	ldr	r3, [pc, #448]	; (8001f08 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001d48:	400b      	ands	r3, r1
 8001d4a:	6513      	str	r3, [r2, #80]	; 0x50
 8001d4c:	4a6d      	ldr	r2, [pc, #436]	; (8001f04 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d50:	0f9b      	lsrs	r3, r3, #30
 8001d52:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f942 	bl	8001fe0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d011      	beq.n	8001d86 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d68:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001d6a:	400b      	ands	r3, r1
 8001d6c:	6513      	str	r3, [r2, #80]	; 0x50
 8001d6e:	4a65      	ldr	r2, [pc, #404]	; (8001f04 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d72:	0f9b      	lsrs	r3, r3, #30
 8001d74:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a60      	ldr	r2, [pc, #384]	; (8001f0c <HAL_FDCAN_IRQHandler+0x4b8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	f040 80ac 	bne.w	8001eea <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a4 	beq.w	8001eea <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db6:	4013      	ands	r3, r2
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dce:	4013      	ands	r3, r2
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	4013      	ands	r3, r2
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001df4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001e0c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e36:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001e38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8db 	bl	8001ff6 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e4c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8db 	bl	800200c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01a      	beq.n	8001e98 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d014      	beq.n	8001e98 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e84:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2240      	movs	r2, #64	; 0x40
 8001e8c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	6939      	ldr	r1, [r7, #16]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8c5 	bl	8002022 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f8c6 	bl	800203a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00b      	beq.n	8001ecc <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	6a3a      	ldr	r2, [r7, #32]
 8001eba:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f869 	bl	8001fcc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001efa:	bf00      	nop
 8001efc:	3758      	adds	r7, #88	; 0x58
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	4000a800 	.word	0x4000a800
 8001f08:	3fcfffff 	.word	0x3fcfffff
 8001f0c:	4000a000 	.word	0x4000a000

08001f10 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002066:	4ba7      	ldr	r3, [pc, #668]	; (8002304 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002068:	4013      	ands	r3, r2
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	0091      	lsls	r1, r2, #2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	430b      	orrs	r3, r1
 8002074:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002080:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	041a      	lsls	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	4413      	add	r3, r2
 800209c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020a6:	4b97      	ldr	r3, [pc, #604]	; (8002304 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	0091      	lsls	r1, r2, #2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	430b      	orrs	r3, r1
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80020e8:	4b86      	ldr	r3, [pc, #536]	; (8002304 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	0091      	lsls	r1, r2, #2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002102:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4413      	add	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002130:	4b74      	ldr	r3, [pc, #464]	; (8002304 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002132:	4013      	ands	r3, r2
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	0091      	lsls	r1, r2, #2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	430b      	orrs	r3, r1
 800213e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800214a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002152:	041a      	lsls	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	4413      	add	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002178:	4b62      	ldr	r3, [pc, #392]	; (8002304 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800217a:	4013      	ands	r3, r2
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	0091      	lsls	r1, r2, #2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	430b      	orrs	r3, r1
 8002186:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4413      	add	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80021a4:	4b57      	ldr	r3, [pc, #348]	; (8002304 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	0091      	lsls	r1, r2, #2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021be:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	041a      	lsls	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	4413      	add	r3, r2
 80021dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	0091      	lsls	r1, r2, #2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002200:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800221c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002224:	061a      	lsls	r2, r3, #24
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002234:	4b34      	ldr	r3, [pc, #208]	; (8002308 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002236:	4413      	add	r3, r2
 8002238:	009a      	lsls	r2, r3, #2
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	441a      	add	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	441a      	add	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	441a      	add	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	441a      	add	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d915      	bls.n	800232c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002300:	e006      	b.n	8002310 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002302:	bf00      	nop
 8002304:	ffff0003 	.word	0xffff0003
 8002308:	10002b00 	.word	0x10002b00
 800230c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2203      	movs	r2, #3
 8002324:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e010      	b.n	800234e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e005      	b.n	8002340 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3304      	adds	r3, #4
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3f3      	bcc.n	8002334 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800237a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002382:	4313      	orrs	r3, r2
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e00a      	b.n	800239e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002390:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002396:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800239c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80023a8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80023ae:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80023b4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023c8:	6839      	ldr	r1, [r7, #0]
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	3304      	adds	r3, #4
 80023de:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	3304      	adds	r3, #4
 80023ea:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e020      	b.n	8002434 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3303      	adds	r3, #3
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3302      	adds	r3, #2
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	440b      	add	r3, r1
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800240a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	440b      	add	r3, r1
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002418:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	440a      	add	r2, r1
 8002420:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002422:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	3304      	adds	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3304      	adds	r3, #4
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	4a06      	ldr	r2, [pc, #24]	; (8002454 <FDCAN_CopyMessageToRAM+0xf8>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	461a      	mov	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4293      	cmp	r3, r2
 8002444:	d3d5      	bcc.n	80023f2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	3724      	adds	r7, #36	; 0x24
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	08005248 	.word	0x08005248

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002466:	4b89      	ldr	r3, [pc, #548]	; (800268c <HAL_GPIO_Init+0x234>)
 8002468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800246a:	e194      	b.n	8002796 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8186 	beq.w	8002790 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d005      	beq.n	800249c <HAL_GPIO_Init+0x44>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d130      	bne.n	80024fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024d2:	2201      	movs	r2, #1
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0201 	and.w	r2, r3, #1
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b03      	cmp	r3, #3
 8002508:	d017      	beq.n	800253a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d123      	bne.n	800258e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	69b9      	ldr	r1, [r7, #24]
 800258a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0203 	and.w	r2, r3, #3
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80e0 	beq.w	8002790 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d0:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <HAL_GPIO_Init+0x238>)
 80025d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025d6:	4a2e      	ldr	r2, [pc, #184]	; (8002690 <HAL_GPIO_Init+0x238>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_GPIO_Init+0x238>)
 80025e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <HAL_GPIO_Init+0x23c>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a20      	ldr	r2, [pc, #128]	; (8002698 <HAL_GPIO_Init+0x240>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d052      	beq.n	80026c0 <HAL_GPIO_Init+0x268>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <HAL_GPIO_Init+0x244>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d031      	beq.n	8002686 <HAL_GPIO_Init+0x22e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <HAL_GPIO_Init+0x248>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d02b      	beq.n	8002682 <HAL_GPIO_Init+0x22a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_GPIO_Init+0x24c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x226>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <HAL_GPIO_Init+0x250>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x222>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_GPIO_Init+0x254>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x21e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <HAL_GPIO_Init+0x258>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x21a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_GPIO_Init+0x25c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x216>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <HAL_GPIO_Init+0x260>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x212>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a17      	ldr	r2, [pc, #92]	; (80026bc <HAL_GPIO_Init+0x264>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x20e>
 8002662:	2309      	movs	r3, #9
 8002664:	e02d      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 8002666:	230a      	movs	r3, #10
 8002668:	e02b      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 800266a:	2308      	movs	r3, #8
 800266c:	e029      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 800266e:	2307      	movs	r3, #7
 8002670:	e027      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 8002672:	2306      	movs	r3, #6
 8002674:	e025      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 8002676:	2305      	movs	r3, #5
 8002678:	e023      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 800267a:	2304      	movs	r3, #4
 800267c:	e021      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 800267e:	2303      	movs	r3, #3
 8002680:	e01f      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 8002682:	2302      	movs	r3, #2
 8002684:	e01d      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 8002686:	2301      	movs	r3, #1
 8002688:	e01b      	b.n	80026c2 <HAL_GPIO_Init+0x26a>
 800268a:	bf00      	nop
 800268c:	58000080 	.word	0x58000080
 8002690:	58024400 	.word	0x58024400
 8002694:	58000400 	.word	0x58000400
 8002698:	58020000 	.word	0x58020000
 800269c:	58020400 	.word	0x58020400
 80026a0:	58020800 	.word	0x58020800
 80026a4:	58020c00 	.word	0x58020c00
 80026a8:	58021000 	.word	0x58021000
 80026ac:	58021400 	.word	0x58021400
 80026b0:	58021800 	.word	0x58021800
 80026b4:	58021c00 	.word	0x58021c00
 80026b8:	58022000 	.word	0x58022000
 80026bc:	58022400 	.word	0x58022400
 80026c0:	2300      	movs	r3, #0
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	f002 0203 	and.w	r2, r2, #3
 80026c8:	0092      	lsls	r2, r2, #2
 80026ca:	4093      	lsls	r3, r2
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d2:	4938      	ldr	r1, [pc, #224]	; (80027b4 <HAL_GPIO_Init+0x35c>)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	3302      	adds	r3, #2
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	3301      	adds	r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f47f ae63 	bne.w	800246c <HAL_GPIO_Init+0x14>
  }
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	3724      	adds	r7, #36	; 0x24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	58000400 	.word	0x58000400

080027b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_PWREx_ConfigSupply+0xb0>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d00a      	beq.n	80027e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_PWREx_ConfigSupply+0xb0>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e040      	b.n	8002860 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e03e      	b.n	8002860 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027e2:	4b21      	ldr	r3, [pc, #132]	; (8002868 <HAL_PWREx_ConfigSupply+0xb0>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80027ea:	491f      	ldr	r1, [pc, #124]	; (8002868 <HAL_PWREx_ConfigSupply+0xb0>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027f2:	f7fe fb21 	bl	8000e38 <HAL_GetTick>
 80027f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027f8:	e009      	b.n	800280e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027fa:	f7fe fb1d 	bl	8000e38 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002808:	d901      	bls.n	800280e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e028      	b.n	8002860 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_PWREx_ConfigSupply+0xb0>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281a:	d1ee      	bne.n	80027fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b1e      	cmp	r3, #30
 8002820:	d008      	beq.n	8002834 <HAL_PWREx_ConfigSupply+0x7c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b2e      	cmp	r3, #46	; 0x2e
 8002826:	d005      	beq.n	8002834 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b1d      	cmp	r3, #29
 800282c:	d002      	beq.n	8002834 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b2d      	cmp	r3, #45	; 0x2d
 8002832:	d114      	bne.n	800285e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002834:	f7fe fb00 	bl	8000e38 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800283a:	e009      	b.n	8002850 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800283c:	f7fe fafc 	bl	8000e38 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800284a:	d901      	bls.n	8002850 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e007      	b.n	8002860 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_PWREx_ConfigSupply+0xb0>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d1ee      	bne.n	800283c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	58024800 	.word	0x58024800

0800286c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	; 0x30
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f000 bc1d 	b.w	80030ba <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8087 	beq.w	800299c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288e:	4b99      	ldr	r3, [pc, #612]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002898:	4b96      	ldr	r3, [pc, #600]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d007      	beq.n	80028b4 <HAL_RCC_OscConfig+0x48>
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	2b18      	cmp	r3, #24
 80028a8:	d110      	bne.n	80028cc <HAL_RCC_OscConfig+0x60>
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d10b      	bne.n	80028cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	4b8f      	ldr	r3, [pc, #572]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d06c      	beq.n	800299a <HAL_RCC_OscConfig+0x12e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d168      	bne.n	800299a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e3f6      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d4:	d106      	bne.n	80028e4 <HAL_RCC_OscConfig+0x78>
 80028d6:	4b87      	ldr	r3, [pc, #540]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a86      	ldr	r2, [pc, #536]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e02e      	b.n	8002942 <HAL_RCC_OscConfig+0xd6>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10c      	bne.n	8002906 <HAL_RCC_OscConfig+0x9a>
 80028ec:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a80      	ldr	r2, [pc, #512]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b7e      	ldr	r3, [pc, #504]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a7d      	ldr	r2, [pc, #500]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e01d      	b.n	8002942 <HAL_RCC_OscConfig+0xd6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0xbe>
 8002910:	4b78      	ldr	r3, [pc, #480]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a77      	ldr	r2, [pc, #476]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a74      	ldr	r2, [pc, #464]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	e00b      	b.n	8002942 <HAL_RCC_OscConfig+0xd6>
 800292a:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a71      	ldr	r2, [pc, #452]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b6f      	ldr	r3, [pc, #444]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6e      	ldr	r2, [pc, #440]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 800293c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d013      	beq.n	8002972 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fa75 	bl	8000e38 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002952:	f7fe fa71 	bl	8000e38 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	; 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e3aa      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002964:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0xe6>
 8002970:	e014      	b.n	800299c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fa61 	bl	8000e38 <HAL_GetTick>
 8002976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297a:	f7fe fa5d 	bl	8000e38 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b64      	cmp	r3, #100	; 0x64
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e396      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800298c:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCC_OscConfig+0x10e>
 8002998:	e000      	b.n	800299c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80cb 	beq.w	8002b40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029aa:	4b52      	ldr	r3, [pc, #328]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029b4:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_RCC_OscConfig+0x164>
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	2b18      	cmp	r3, #24
 80029c4:	d156      	bne.n	8002a74 <HAL_RCC_OscConfig+0x208>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d151      	bne.n	8002a74 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d0:	4b48      	ldr	r3, [pc, #288]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x17c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e368      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029e8:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 0219 	bic.w	r2, r3, #25
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	493f      	ldr	r1, [pc, #252]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029fa:	f7fe fa1d 	bl	8000e38 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7fe fa19 	bl	8000e38 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e352      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a14:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	f7fe fa3a 	bl	8000e98 <HAL_GetREVID>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d817      	bhi.n	8002a5e <HAL_RCC_OscConfig+0x1f2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d108      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1dc>
 8002a36:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a3e:	4a2d      	ldr	r2, [pc, #180]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a44:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a46:	e07b      	b.n	8002b40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	031b      	lsls	r3, r3, #12
 8002a56:	4927      	ldr	r1, [pc, #156]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5c:	e070      	b.n	8002b40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5e:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	061b      	lsls	r3, r3, #24
 8002a6c:	4921      	ldr	r1, [pc, #132]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a72:	e065      	b.n	8002b40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d048      	beq.n	8002b0e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 0219 	bic.w	r2, r3, #25
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	491a      	ldr	r1, [pc, #104]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe f9d3 	bl	8000e38 <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a96:	f7fe f9cf 	bl	8000e38 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e308      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab4:	f7fe f9f0 	bl	8000e98 <HAL_GetREVID>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f241 0203 	movw	r2, #4099	; 0x1003
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d81a      	bhi.n	8002af8 <HAL_RCC_OscConfig+0x28c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d108      	bne.n	8002adc <HAL_RCC_OscConfig+0x270>
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ad2:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad8:	6053      	str	r3, [r2, #4]
 8002ada:	e031      	b.n	8002b40 <HAL_RCC_OscConfig+0x2d4>
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	031b      	lsls	r3, r3, #12
 8002aea:	4902      	ldr	r1, [pc, #8]	; (8002af4 <HAL_RCC_OscConfig+0x288>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
 8002af0:	e026      	b.n	8002b40 <HAL_RCC_OscConfig+0x2d4>
 8002af2:	bf00      	nop
 8002af4:	58024400 	.word	0x58024400
 8002af8:	4b9a      	ldr	r3, [pc, #616]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	4997      	ldr	r1, [pc, #604]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
 8002b0c:	e018      	b.n	8002b40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0e:	4b95      	ldr	r3, [pc, #596]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a94      	ldr	r2, [pc, #592]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe f98d 	bl	8000e38 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe f989 	bl	8000e38 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e2c2      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b34:	4b8b      	ldr	r3, [pc, #556]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80a9 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	4b85      	ldr	r3, [pc, #532]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b58:	4b82      	ldr	r3, [pc, #520]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d007      	beq.n	8002b74 <HAL_RCC_OscConfig+0x308>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b18      	cmp	r3, #24
 8002b68:	d13a      	bne.n	8002be0 <HAL_RCC_OscConfig+0x374>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d135      	bne.n	8002be0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b74:	4b7b      	ldr	r3, [pc, #492]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_OscConfig+0x320>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e296      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b8c:	f7fe f984 	bl	8000e98 <HAL_GetREVID>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d817      	bhi.n	8002bca <HAL_RCC_OscConfig+0x35e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x348>
 8002ba2:	4b70      	ldr	r3, [pc, #448]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002baa:	4a6e      	ldr	r2, [pc, #440]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bb0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bb2:	e075      	b.n	8002ca0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bb4:	4b6b      	ldr	r3, [pc, #428]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	069b      	lsls	r3, r3, #26
 8002bc2:	4968      	ldr	r1, [pc, #416]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bc8:	e06a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bca:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	061b      	lsls	r3, r3, #24
 8002bd8:	4962      	ldr	r1, [pc, #392]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bde:	e05f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d042      	beq.n	8002c6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002be8:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe f920 	bl	8000e38 <HAL_GetTick>
 8002bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bfc:	f7fe f91c 	bl	8000e38 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e255      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c0e:	4b55      	ldr	r3, [pc, #340]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c1a:	f7fe f93d 	bl	8000e98 <HAL_GetREVID>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d817      	bhi.n	8002c58 <HAL_RCC_OscConfig+0x3ec>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d108      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3d6>
 8002c30:	4b4c      	ldr	r3, [pc, #304]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c38:	4a4a      	ldr	r2, [pc, #296]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c3e:	6053      	str	r3, [r2, #4]
 8002c40:	e02e      	b.n	8002ca0 <HAL_RCC_OscConfig+0x434>
 8002c42:	4b48      	ldr	r3, [pc, #288]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	069b      	lsls	r3, r3, #26
 8002c50:	4944      	ldr	r1, [pc, #272]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
 8002c56:	e023      	b.n	8002ca0 <HAL_RCC_OscConfig+0x434>
 8002c58:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	061b      	lsls	r3, r3, #24
 8002c66:	493f      	ldr	r1, [pc, #252]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]
 8002c6c:	e018      	b.n	8002ca0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a3c      	ldr	r2, [pc, #240]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe f8dd 	bl	8000e38 <HAL_GetTick>
 8002c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c82:	f7fe f8d9 	bl	8000e38 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e212      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c94:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d036      	beq.n	8002d1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d019      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb8:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7fe f8ba 	bl	8000e38 <HAL_GetTick>
 8002cc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7fe f8b6 	bl	8000e38 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1ef      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x45c>
 8002ce6:	e018      	b.n	8002d1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cec:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe f8a0 	bl	8000e38 <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfc:	f7fe f89c 	bl	8000e38 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1d5      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d039      	beq.n	8002d9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01c      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe f87d 	bl	8000e38 <HAL_GetTick>
 8002d3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d42:	f7fe f879 	bl	8000e38 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e1b2      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_RCC_OscConfig+0x4f8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x4d6>
 8002d60:	e01b      	b.n	8002d9a <HAL_RCC_OscConfig+0x52e>
 8002d62:	bf00      	nop
 8002d64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d68:	4b9b      	ldr	r3, [pc, #620]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a9a      	ldr	r2, [pc, #616]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d74:	f7fe f860 	bl	8000e38 <HAL_GetTick>
 8002d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d7c:	f7fe f85c 	bl	8000e38 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e195      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d8e:	4b92      	ldr	r3, [pc, #584]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8081 	beq.w	8002eaa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002da8:	4b8c      	ldr	r3, [pc, #560]	; (8002fdc <HAL_RCC_OscConfig+0x770>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a8b      	ldr	r2, [pc, #556]	; (8002fdc <HAL_RCC_OscConfig+0x770>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db4:	f7fe f840 	bl	8000e38 <HAL_GetTick>
 8002db8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7fe f83c 	bl	8000e38 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e175      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dce:	4b83      	ldr	r3, [pc, #524]	; (8002fdc <HAL_RCC_OscConfig+0x770>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d106      	bne.n	8002df0 <HAL_RCC_OscConfig+0x584>
 8002de2:	4b7d      	ldr	r3, [pc, #500]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	4a7c      	ldr	r2, [pc, #496]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6713      	str	r3, [r2, #112]	; 0x70
 8002dee:	e02d      	b.n	8002e4c <HAL_RCC_OscConfig+0x5e0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10c      	bne.n	8002e12 <HAL_RCC_OscConfig+0x5a6>
 8002df8:	4b77      	ldr	r3, [pc, #476]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a76      	ldr	r2, [pc, #472]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a73      	ldr	r2, [pc, #460]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e0a:	f023 0304 	bic.w	r3, r3, #4
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	e01c      	b.n	8002e4c <HAL_RCC_OscConfig+0x5e0>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5c8>
 8002e1a:	4b6f      	ldr	r3, [pc, #444]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a6e      	ldr	r2, [pc, #440]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
 8002e26:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	4a6b      	ldr	r2, [pc, #428]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
 8002e32:	e00b      	b.n	8002e4c <HAL_RCC_OscConfig+0x5e0>
 8002e34:	4b68      	ldr	r3, [pc, #416]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a67      	ldr	r2, [pc, #412]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	4b65      	ldr	r3, [pc, #404]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a64      	ldr	r2, [pc, #400]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e46:	f023 0304 	bic.w	r3, r3, #4
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d015      	beq.n	8002e80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fd fff0 	bl	8000e38 <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fd ffec 	bl	8000e38 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e123      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e72:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ee      	beq.n	8002e5c <HAL_RCC_OscConfig+0x5f0>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fd ffda 	bl	8000e38 <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fd ffd6 	bl	8000e38 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e10d      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e9e:	4b4e      	ldr	r3, [pc, #312]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1ee      	bne.n	8002e88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8102 	beq.w	80030b8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002eb4:	4b48      	ldr	r3, [pc, #288]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ebc:	2b18      	cmp	r3, #24
 8002ebe:	f000 80bd 	beq.w	800303c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	f040 809e 	bne.w	8003008 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ecc:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a41      	ldr	r2, [pc, #260]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fd ffae 	bl	8000e38 <HAL_GetTick>
 8002edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fd ffaa 	bl	8000e38 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0e3      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f02:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x774>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	430a      	orrs	r2, r1
 8002f12:	4931      	ldr	r1, [pc, #196]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	628b      	str	r3, [r1, #40]	; 0x28
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f26:	3b01      	subs	r3, #1
 8002f28:	025b      	lsls	r3, r3, #9
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	3b01      	subs	r3, #1
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	3b01      	subs	r3, #1
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f48:	4923      	ldr	r1, [pc, #140]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5e:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <HAL_RCC_OscConfig+0x778>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f66:	00d2      	lsls	r2, r2, #3
 8002f68:	491b      	ldr	r1, [pc, #108]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	f023 020c 	bic.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4917      	ldr	r1, [pc, #92]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f80:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	f023 0202 	bic.w	r2, r3, #2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	4912      	ldr	r1, [pc, #72]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7fd ff33 	bl	8000e38 <HAL_GetTick>
 8002fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fd4:	e011      	b.n	8002ffa <HAL_RCC_OscConfig+0x78e>
 8002fd6:	bf00      	nop
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	58024800 	.word	0x58024800
 8002fe0:	fffffc0c 	.word	0xfffffc0c
 8002fe4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7fd ff26 	bl	8000e38 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e05f      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ffa:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_RCC_OscConfig+0x858>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x77c>
 8003006:	e057      	b.n	80030b8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_RCC_OscConfig+0x858>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <HAL_RCC_OscConfig+0x858>)
 800300e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fd ff10 	bl	8000e38 <HAL_GetTick>
 8003018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fd ff0c 	bl	8000e38 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e045      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800302e:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_OscConfig+0x858>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x7b0>
 800303a:	e03d      	b.n	80030b8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <HAL_RCC_OscConfig+0x858>)
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <HAL_RCC_OscConfig+0x858>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2b01      	cmp	r3, #1
 800304e:	d031      	beq.n	80030b4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0203 	and.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d12a      	bne.n	80030b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d122      	bne.n	80030b4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d11a      	bne.n	80030b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	0a5b      	lsrs	r3, r3, #9
 8003082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d111      	bne.n	80030b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d108      	bne.n	80030b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0e1b      	lsrs	r3, r3, #24
 80030a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3730      	adds	r7, #48	; 0x30
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	58024400 	.word	0x58024400

080030c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e19c      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b8a      	ldr	r3, [pc, #552]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b87      	ldr	r3, [pc, #540]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	4985      	ldr	r1, [pc, #532]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b83      	ldr	r3, [pc, #524]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e184      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	4b7b      	ldr	r3, [pc, #492]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003124:	429a      	cmp	r2, r3
 8003126:	d908      	bls.n	800313a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003128:	4b78      	ldr	r3, [pc, #480]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4975      	ldr	r1, [pc, #468]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003136:	4313      	orrs	r3, r2
 8003138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003152:	429a      	cmp	r2, r3
 8003154:	d908      	bls.n	8003168 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	496a      	ldr	r1, [pc, #424]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003164:	4313      	orrs	r3, r2
 8003166:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	4b64      	ldr	r3, [pc, #400]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003180:	429a      	cmp	r2, r3
 8003182:	d908      	bls.n	8003196 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003184:	4b61      	ldr	r3, [pc, #388]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	495e      	ldr	r1, [pc, #376]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003192:	4313      	orrs	r3, r2
 8003194:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d908      	bls.n	80031c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031b2:	4b56      	ldr	r3, [pc, #344]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4953      	ldr	r1, [pc, #332]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	429a      	cmp	r2, r3
 80031de:	d908      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f023 020f 	bic.w	r2, r3, #15
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4947      	ldr	r1, [pc, #284]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d055      	beq.n	80032aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031fe:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4940      	ldr	r1, [pc, #256]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800320c:	4313      	orrs	r3, r2
 800320e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d107      	bne.n	8003228 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003218:	4b3c      	ldr	r3, [pc, #240]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d121      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0f6      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003230:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d115      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0ea      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0de      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003258:	4b2c      	ldr	r3, [pc, #176]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0d6      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f023 0207 	bic.w	r2, r3, #7
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4925      	ldr	r1, [pc, #148]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 8003276:	4313      	orrs	r3, r2
 8003278:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fd fddd 	bl	8000e38 <HAL_GetTick>
 800327e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003280:	e00a      	b.n	8003298 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003282:	f7fd fdd9 	bl	8000e38 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0be      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d1eb      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d208      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f023 020f 	bic.w	r2, r3, #15
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	490e      	ldr	r1, [pc, #56]	; (800330c <HAL_RCC_ClockConfig+0x244>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d214      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	4906      	ldr	r1, [pc, #24]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b04      	ldr	r3, [pc, #16]	; (8003308 <HAL_RCC_ClockConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e086      	b.n	8003416 <HAL_RCC_ClockConfig+0x34e>
 8003308:	52002000 	.word	0x52002000
 800330c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003328:	429a      	cmp	r2, r3
 800332a:	d208      	bcs.n	800333e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800332c:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4939      	ldr	r1, [pc, #228]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 800333a:	4313      	orrs	r3, r2
 800333c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	4b34      	ldr	r3, [pc, #208]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003356:	429a      	cmp	r2, r3
 8003358:	d208      	bcs.n	800336c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	492e      	ldr	r1, [pc, #184]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 8003368:	4313      	orrs	r3, r2
 800336a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	4b28      	ldr	r3, [pc, #160]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003384:	429a      	cmp	r2, r3
 8003386:	d208      	bcs.n	800339a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4922      	ldr	r1, [pc, #136]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 8003396:	4313      	orrs	r3, r2
 8003398:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d010      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d208      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4917      	ldr	r1, [pc, #92]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033c8:	f000 f834 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	4912      	ldr	r1, [pc, #72]	; (8003424 <HAL_RCC_ClockConfig+0x35c>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCC_ClockConfig+0x358>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <HAL_RCC_ClockConfig+0x35c>)
 80033f0:	5cd3      	ldrb	r3, [r2, r3]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x360>)
 80033fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003400:	4a0a      	ldr	r2, [pc, #40]	; (800342c <HAL_RCC_ClockConfig+0x364>)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003406:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <HAL_RCC_ClockConfig+0x368>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd fcca 	bl	8000da4 <HAL_InitTick>
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	58024400 	.word	0x58024400
 8003424:	08005238 	.word	0x08005238
 8003428:	24000004 	.word	0x24000004
 800342c:	24000000 	.word	0x24000000
 8003430:	24000008 	.word	0x24000008

08003434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800343a:	4bb3      	ldr	r3, [pc, #716]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003442:	2b18      	cmp	r3, #24
 8003444:	f200 8155 	bhi.w	80036f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_RCC_GetSysClockFreq+0x1c>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	080034b5 	.word	0x080034b5
 8003454:	080036f3 	.word	0x080036f3
 8003458:	080036f3 	.word	0x080036f3
 800345c:	080036f3 	.word	0x080036f3
 8003460:	080036f3 	.word	0x080036f3
 8003464:	080036f3 	.word	0x080036f3
 8003468:	080036f3 	.word	0x080036f3
 800346c:	080036f3 	.word	0x080036f3
 8003470:	080034db 	.word	0x080034db
 8003474:	080036f3 	.word	0x080036f3
 8003478:	080036f3 	.word	0x080036f3
 800347c:	080036f3 	.word	0x080036f3
 8003480:	080036f3 	.word	0x080036f3
 8003484:	080036f3 	.word	0x080036f3
 8003488:	080036f3 	.word	0x080036f3
 800348c:	080036f3 	.word	0x080036f3
 8003490:	080034e1 	.word	0x080034e1
 8003494:	080036f3 	.word	0x080036f3
 8003498:	080036f3 	.word	0x080036f3
 800349c:	080036f3 	.word	0x080036f3
 80034a0:	080036f3 	.word	0x080036f3
 80034a4:	080036f3 	.word	0x080036f3
 80034a8:	080036f3 	.word	0x080036f3
 80034ac:	080036f3 	.word	0x080036f3
 80034b0:	080034e7 	.word	0x080034e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034b4:	4b94      	ldr	r3, [pc, #592]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034c0:	4b91      	ldr	r3, [pc, #580]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	08db      	lsrs	r3, r3, #3
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	4a90      	ldr	r2, [pc, #576]	; (800370c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034d2:	e111      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034d4:	4b8d      	ldr	r3, [pc, #564]	; (800370c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034d6:	61bb      	str	r3, [r7, #24]
    break;
 80034d8:	e10e      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034da:	4b8d      	ldr	r3, [pc, #564]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034dc:	61bb      	str	r3, [r7, #24]
    break;
 80034de:	e10b      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034e0:	4b8c      	ldr	r3, [pc, #560]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034e2:	61bb      	str	r3, [r7, #24]
    break;
 80034e4:	e108      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034e6:	4b88      	ldr	r3, [pc, #544]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034f0:	4b85      	ldr	r3, [pc, #532]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034fc:	4b82      	ldr	r3, [pc, #520]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003506:	4b80      	ldr	r3, [pc, #512]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350a:	08db      	lsrs	r3, r3, #3
 800350c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80e1 	beq.w	80036ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b02      	cmp	r3, #2
 800352e:	f000 8083 	beq.w	8003638 <HAL_RCC_GetSysClockFreq+0x204>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b02      	cmp	r3, #2
 8003536:	f200 80a1 	bhi.w	800367c <HAL_RCC_GetSysClockFreq+0x248>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x114>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d056      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003546:	e099      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003548:	4b6f      	ldr	r3, [pc, #444]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02d      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003554:	4b6c      	ldr	r3, [pc, #432]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	08db      	lsrs	r3, r3, #3
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	4a6b      	ldr	r2, [pc, #428]	; (800370c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357e:	4b62      	ldr	r3, [pc, #392]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003592:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003718 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80035ae:	e087      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800371c <HAL_RCC_GetSysClockFreq+0x2e8>
 80035be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035c2:	4b51      	ldr	r3, [pc, #324]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003718 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035f2:	e065      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003720 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003606:	4b40      	ldr	r3, [pc, #256]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003616:	ed97 6a02 	vldr	s12, [r7, #8]
 800361a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003718 <HAL_RCC_GetSysClockFreq+0x2e4>
 800361e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800362a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003636:	e043      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003642:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003724 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364a:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365a:	ed97 6a02 	vldr	s12, [r7, #8]
 800365e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003718 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800367a:	e021      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003686:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003720 <HAL_RCC_GetSysClockFreq+0x2ec>
 800368a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369e:	ed97 6a02 	vldr	s12, [r7, #8]
 80036a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003718 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	0a5b      	lsrs	r3, r3, #9
 80036c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ca:	3301      	adds	r3, #1
 80036cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	ee07 3a90 	vmov	s15, r3
 80036d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036e4:	ee17 3a90 	vmov	r3, s15
 80036e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036ea:	e005      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
    break;
 80036f0:	e002      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036f4:	61bb      	str	r3, [r7, #24]
    break;
 80036f6:	bf00      	nop
  }

  return sysclockfreq;
 80036f8:	69bb      	ldr	r3, [r7, #24]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	58024400 	.word	0x58024400
 800370c:	03d09000 	.word	0x03d09000
 8003710:	003d0900 	.word	0x003d0900
 8003714:	017d7840 	.word	0x017d7840
 8003718:	46000000 	.word	0x46000000
 800371c:	4c742400 	.word	0x4c742400
 8003720:	4a742400 	.word	0x4a742400
 8003724:	4bbebc20 	.word	0x4bbebc20

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003734:	2300      	movs	r3, #0
 8003736:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d03f      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003748:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800374c:	d02a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800374e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003752:	d824      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003758:	d018      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800375a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800375e:	d81e      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003768:	d007      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800376a:	e018      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376c:	4ba3      	ldr	r3, [pc, #652]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	4aa2      	ldr	r2, [pc, #648]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003778:	e015      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	2102      	movs	r1, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f000 ff17 	bl	80045b4 <RCCEx_PLL2_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800378a:	e00c      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3324      	adds	r3, #36	; 0x24
 8003790:	2102      	movs	r1, #2
 8003792:	4618      	mov	r0, r3
 8003794:	f000 ffc0 	bl	8004718 <RCCEx_PLL3_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
      break;
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037ac:	4b93      	ldr	r3, [pc, #588]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b8:	4990      	ldr	r1, [pc, #576]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	650b      	str	r3, [r1, #80]	; 0x50
 80037be:	e001      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d03d      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d826      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	080037f5 	.word	0x080037f5
 80037e4:	08003803 	.word	0x08003803
 80037e8:	08003815 	.word	0x08003815
 80037ec:	0800382d 	.word	0x0800382d
 80037f0:	0800382d 	.word	0x0800382d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f4:	4b81      	ldr	r3, [pc, #516]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	4a80      	ldr	r2, [pc, #512]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003800:	e015      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fed3 	bl	80045b4 <RCCEx_PLL2_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003812:	e00c      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3324      	adds	r3, #36	; 0x24
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f000 ff7c 	bl	8004718 <RCCEx_PLL3_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003824:	e003      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	75fb      	strb	r3, [r7, #23]
      break;
 800382a:	e000      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800382c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003834:	4b71      	ldr	r3, [pc, #452]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003838:	f023 0207 	bic.w	r2, r3, #7
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	496e      	ldr	r1, [pc, #440]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	650b      	str	r3, [r1, #80]	; 0x50
 8003846:	e001      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003854:	2b00      	cmp	r3, #0
 8003856:	d042      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003860:	d02b      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003866:	d825      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003868:	2bc0      	cmp	r3, #192	; 0xc0
 800386a:	d028      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800386c:	2bc0      	cmp	r3, #192	; 0xc0
 800386e:	d821      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d016      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003874:	2b80      	cmp	r3, #128	; 0x80
 8003876:	d81d      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d007      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003880:	e018      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003882:	4b5e      	ldr	r3, [pc, #376]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	4a5d      	ldr	r2, [pc, #372]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800388e:	e017      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fe8c 	bl	80045b4 <RCCEx_PLL2_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038a0:	e00e      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3324      	adds	r3, #36	; 0x24
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 ff35 	bl	8004718 <RCCEx_PLL3_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038b2:	e005      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	75fb      	strb	r3, [r7, #23]
      break;
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038c6:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	494a      	ldr	r1, [pc, #296]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	650b      	str	r3, [r1, #80]	; 0x50
 80038d8:	e001      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d049      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038f4:	d030      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80038f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038fa:	d82a      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003900:	d02c      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003902:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003906:	d824      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390c:	d018      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003912:	d81e      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391c:	d007      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800391e:	e018      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4b36      	ldr	r3, [pc, #216]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4a35      	ldr	r2, [pc, #212]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800392c:	e017      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fe3d 	bl	80045b4 <RCCEx_PLL2_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800393e:	e00e      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3324      	adds	r3, #36	; 0x24
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fee6 	bl	8004718 <RCCEx_PLL3_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003950:	e005      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
      break;
 8003956:	e002      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003958:	bf00      	nop
 800395a:	e000      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800395c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003972:	4922      	ldr	r1, [pc, #136]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003974:	4313      	orrs	r3, r2
 8003976:	658b      	str	r3, [r1, #88]	; 0x58
 8003978:	e001      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397a:	7dfb      	ldrb	r3, [r7, #23]
 800397c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04b      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003994:	d030      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399a:	d82a      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800399c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039a0:	d02e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80039a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039a6:	d824      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ac:	d018      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80039ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039b2:	d81e      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039bc:	d007      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80039be:	e018      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039cc:	e019      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fded 	bl	80045b4 <RCCEx_PLL2_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039de:	e010      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3324      	adds	r3, #36	; 0x24
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fe96 	bl	8004718 <RCCEx_PLL3_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039f0:	e007      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
      break;
 80039f6:	e004      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80039f8:	bf00      	nop
 80039fa:	e002      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80039fc:	58024400 	.word	0x58024400
      break;
 8003a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a08:	4b99      	ldr	r3, [pc, #612]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a16:	4996      	ldr	r1, [pc, #600]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	658b      	str	r3, [r1, #88]	; 0x58
 8003a1c:	e001      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d032      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	2b30      	cmp	r3, #48	; 0x30
 8003a34:	d01c      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003a36:	2b30      	cmp	r3, #48	; 0x30
 8003a38:	d817      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d00c      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d813      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d10f      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4a:	4b89      	ldr	r3, [pc, #548]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	4a88      	ldr	r2, [pc, #544]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a56:	e00e      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fda8 	bl	80045b4 <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a68:	e005      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003a70:	bf00      	nop
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a7c:	4b7c      	ldr	r3, [pc, #496]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	4979      	ldr	r1, [pc, #484]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a8e:	e001      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d047      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aa8:	d030      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aae:	d82a      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ab0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ab4:	d02c      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003ab6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aba:	d824      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac0:	d018      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac6:	d81e      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad0:	d007      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003ad2:	e018      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad4:	4b66      	ldr	r3, [pc, #408]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	4a65      	ldr	r2, [pc, #404]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ae0:	e017      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fd63 	bl	80045b4 <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003af2:	e00e      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3324      	adds	r3, #36	; 0x24
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fe0c 	bl	8004718 <RCCEx_PLL3_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b04:	e005      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0a:	e002      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b18:	4b55      	ldr	r3, [pc, #340]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	4952      	ldr	r1, [pc, #328]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	650b      	str	r3, [r1, #80]	; 0x50
 8003b2a:	e001      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d049      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b44:	d02e      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4a:	d828      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b50:	d02a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003b52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b56:	d822      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b5c:	d026      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003b5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b62:	d81c      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b68:	d010      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b6e:	d816      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b78:	d111      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fd17 	bl	80045b4 <RCCEx_PLL2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b8a:	e012      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3324      	adds	r3, #36	; 0x24
 8003b90:	2101      	movs	r1, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fdc0 	bl	8004718 <RCCEx_PLL3_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b9c:	e009      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba2:	e006      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003ba4:	bf00      	nop
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003ba8:	bf00      	nop
 8003baa:	e002      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc4:	492a      	ldr	r1, [pc, #168]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bca:	e001      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d04d      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be6:	d02e      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bec:	d828      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d02a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d822      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003bfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bfe:	d026      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003c00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c04:	d81c      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0a:	d010      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c10:	d816      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01d      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fcc6 	bl	80045b4 <RCCEx_PLL2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c2c:	e012      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3324      	adds	r3, #36	; 0x24
 8003c32:	2101      	movs	r1, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fd6f 	bl	8004718 <RCCEx_PLL3_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c3e:	e009      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
      break;
 8003c44:	e006      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c46:	bf00      	nop
 8003c48:	e004      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c68:	4901      	ldr	r1, [pc, #4]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c6e:	e003      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02f      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8c:	d00e      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c92:	d814      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9c:	d10f      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9e:	4baf      	ldr	r3, [pc, #700]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	4aae      	ldr	r2, [pc, #696]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003caa:	e00c      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fc7e 	bl	80045b4 <RCCEx_PLL2_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cbc:	e003      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d109      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ccc:	4ba3      	ldr	r3, [pc, #652]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd8:	49a0      	ldr	r1, [pc, #640]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	650b      	str	r3, [r1, #80]	; 0x50
 8003cde:	e001      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d032      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d81b      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d37 	.word	0x08003d37
 8003d04:	08003d11 	.word	0x08003d11
 8003d08:	08003d1f 	.word	0x08003d1f
 8003d0c:	08003d37 	.word	0x08003d37
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d10:	4b92      	ldr	r3, [pc, #584]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4a91      	ldr	r2, [pc, #580]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d1c:	e00c      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	2102      	movs	r1, #2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fc45 	bl	80045b4 <RCCEx_PLL2_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d3e:	4b87      	ldr	r3, [pc, #540]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	4984      	ldr	r1, [pc, #528]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d50:	e001      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8086 	beq.w	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b7e      	ldr	r3, [pc, #504]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a7d      	ldr	r2, [pc, #500]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d70:	f7fd f862 	bl	8000e38 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d76:	e009      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fd f85e 	bl	8000e38 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d902      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	75fb      	strb	r3, [r7, #23]
        break;
 8003d8a:	e005      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8c:	4b74      	ldr	r3, [pc, #464]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d166      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d9e:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da8:	4053      	eors	r3, r2
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d013      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db2:	4b6a      	ldr	r3, [pc, #424]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dbc:	4b67      	ldr	r3, [pc, #412]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a66      	ldr	r2, [pc, #408]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc8:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a63      	ldr	r2, [pc, #396]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003dd4:	4a61      	ldr	r2, [pc, #388]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de4:	d115      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fd f827 	bl	8000e38 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dec:	e00b      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd f823 	bl	8000e38 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d902      	bls.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	75fb      	strb	r3, [r7, #23]
            break;
 8003e04:	e005      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e06:	4b55      	ldr	r3, [pc, #340]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ed      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d126      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e26:	d10d      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003e28:	4b4c      	ldr	r3, [pc, #304]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e36:	0919      	lsrs	r1, r3, #4
 8003e38:	4b4a      	ldr	r3, [pc, #296]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	4947      	ldr	r1, [pc, #284]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	610b      	str	r3, [r1, #16]
 8003e42:	e005      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003e44:	4b45      	ldr	r3, [pc, #276]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	4a44      	ldr	r2, [pc, #272]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e4e:	6113      	str	r3, [r2, #16]
 8003e50:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	493f      	ldr	r1, [pc, #252]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	670b      	str	r3, [r1, #112]	; 0x70
 8003e64:	e004      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	75bb      	strb	r3, [r7, #22]
 8003e6a:	e001      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8085 	beq.w	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e82:	2b28      	cmp	r3, #40	; 0x28
 8003e84:	d866      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003f69 	.word	0x08003f69
 8003e90:	08003f55 	.word	0x08003f55
 8003e94:	08003f55 	.word	0x08003f55
 8003e98:	08003f55 	.word	0x08003f55
 8003e9c:	08003f55 	.word	0x08003f55
 8003ea0:	08003f55 	.word	0x08003f55
 8003ea4:	08003f55 	.word	0x08003f55
 8003ea8:	08003f55 	.word	0x08003f55
 8003eac:	08003f31 	.word	0x08003f31
 8003eb0:	08003f55 	.word	0x08003f55
 8003eb4:	08003f55 	.word	0x08003f55
 8003eb8:	08003f55 	.word	0x08003f55
 8003ebc:	08003f55 	.word	0x08003f55
 8003ec0:	08003f55 	.word	0x08003f55
 8003ec4:	08003f55 	.word	0x08003f55
 8003ec8:	08003f55 	.word	0x08003f55
 8003ecc:	08003f43 	.word	0x08003f43
 8003ed0:	08003f55 	.word	0x08003f55
 8003ed4:	08003f55 	.word	0x08003f55
 8003ed8:	08003f55 	.word	0x08003f55
 8003edc:	08003f55 	.word	0x08003f55
 8003ee0:	08003f55 	.word	0x08003f55
 8003ee4:	08003f55 	.word	0x08003f55
 8003ee8:	08003f55 	.word	0x08003f55
 8003eec:	08003f69 	.word	0x08003f69
 8003ef0:	08003f55 	.word	0x08003f55
 8003ef4:	08003f55 	.word	0x08003f55
 8003ef8:	08003f55 	.word	0x08003f55
 8003efc:	08003f55 	.word	0x08003f55
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003f55 	.word	0x08003f55
 8003f08:	08003f55 	.word	0x08003f55
 8003f0c:	08003f69 	.word	0x08003f69
 8003f10:	08003f55 	.word	0x08003f55
 8003f14:	08003f55 	.word	0x08003f55
 8003f18:	08003f55 	.word	0x08003f55
 8003f1c:	08003f55 	.word	0x08003f55
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08003f55 	.word	0x08003f55
 8003f28:	08003f55 	.word	0x08003f55
 8003f2c:	08003f69 	.word	0x08003f69
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fb3c 	bl	80045b4 <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f40:	e013      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3324      	adds	r3, #36	; 0x24
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fbe5 	bl	8004718 <RCCEx_PLL3_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f52:	e00a      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
      break;
 8003f58:	e007      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f5a:	bf00      	nop
 8003f5c:	58024400 	.word	0x58024400
 8003f60:	58024800 	.word	0x58024800
 8003f64:	00ffffcf 	.word	0x00ffffcf
      break;
 8003f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d109      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f70:	4b96      	ldr	r3, [pc, #600]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7c:	4993      	ldr	r1, [pc, #588]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	654b      	str	r3, [r1, #84]	; 0x54
 8003f82:	e001      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d038      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d821      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fe7 	.word	0x08003fe7
 8003fa8:	08003fbd 	.word	0x08003fbd
 8003fac:	08003fcf 	.word	0x08003fcf
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003fe7 	.word	0x08003fe7
 8003fb8:	08003fe7 	.word	0x08003fe7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 faf6 	bl	80045b4 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e00c      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fb9f 	bl	8004718 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fee:	4b77      	ldr	r3, [pc, #476]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f023 0207 	bic.w	r2, r3, #7
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	4974      	ldr	r1, [pc, #464]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	654b      	str	r3, [r1, #84]	; 0x54
 8004000:	e001      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d03a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	2b05      	cmp	r3, #5
 800401a:	d821      	bhi.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004067 	.word	0x08004067
 8004028:	0800403d 	.word	0x0800403d
 800402c:	0800404f 	.word	0x0800404f
 8004030:	08004067 	.word	0x08004067
 8004034:	08004067 	.word	0x08004067
 8004038:	08004067 	.word	0x08004067
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fab6 	bl	80045b4 <RCCEx_PLL2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800404c:	e00c      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3324      	adds	r3, #36	; 0x24
 8004052:	2101      	movs	r1, #1
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fb5f 	bl	8004718 <RCCEx_PLL3_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800405e:	e003      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	75fb      	strb	r3, [r7, #23]
      break;
 8004064:	e000      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800406e:	4b57      	ldr	r3, [pc, #348]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	f023 0207 	bic.w	r2, r3, #7
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	4953      	ldr	r1, [pc, #332]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	658b      	str	r3, [r1, #88]	; 0x58
 8004082:	e001      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d04b      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800409e:	d02e      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80040a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a4:	d828      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040aa:	d02a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d822      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040b6:	d026      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80040b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040bc:	d81c      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c2:	d010      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80040c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c8:	d816      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01d      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80040ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d2:	d111      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fa6a 	bl	80045b4 <RCCEx_PLL2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040e4:	e012      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3324      	adds	r3, #36	; 0x24
 80040ea:	2102      	movs	r1, #2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fb13 	bl	8004718 <RCCEx_PLL3_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040f6:	e009      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75fb      	strb	r3, [r7, #23]
      break;
 80040fc:	e006      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80040fe:	bf00      	nop
 8004100:	e004      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004102:	bf00      	nop
 8004104:	e002      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800410a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004112:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004120:	492a      	ldr	r1, [pc, #168]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	654b      	str	r3, [r1, #84]	; 0x54
 8004126:	e001      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d04d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800413e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004142:	d02e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004144:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004148:	d828      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414e:	d02a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d822      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004156:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800415a:	d026      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800415c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004160:	d81c      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004166:	d010      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416c:	d816      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01d      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004176:	d111      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fa18 	bl	80045b4 <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004188:	e012      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3324      	adds	r3, #36	; 0x24
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fac1 	bl	8004718 <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800419a:	e009      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
      break;
 80041a0:	e006      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041a2:	bf00      	nop
 80041a4:	e004      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041a6:	bf00      	nop
 80041a8:	e002      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c4:	4901      	ldr	r1, [pc, #4]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	658b      	str	r3, [r1, #88]	; 0x58
 80041ca:	e003      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80041cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d04b      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041ea:	d02e      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80041ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041f0:	d828      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80041f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f6:	d02a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fc:	d822      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80041fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004202:	d026      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004204:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004208:	d81c      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800420a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420e:	d010      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004214:	d816      	bhi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01d      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800421a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421e:	d111      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f9c4 	bl	80045b4 <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004230:	e012      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3324      	adds	r3, #36	; 0x24
 8004236:	2102      	movs	r1, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fa6d 	bl	8004718 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004242:	e009      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
      break;
 8004248:	e006      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800424a:	bf00      	nop
 800424c:	e004      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800425e:	4b9d      	ldr	r3, [pc, #628]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800426c:	4999      	ldr	r1, [pc, #612]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800426e:	4313      	orrs	r3, r2
 8004270:	658b      	str	r3, [r1, #88]	; 0x58
 8004272:	e001      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428e:	d10a      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3324      	adds	r3, #36	; 0x24
 8004294:	2102      	movs	r1, #2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fa3e 	bl	8004718 <RCCEx_PLL3_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042a6:	4b8b      	ldr	r3, [pc, #556]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b4:	4987      	ldr	r1, [pc, #540]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d0:	d10a      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3324      	adds	r3, #36	; 0x24
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fa1d 	bl	8004718 <RCCEx_PLL3_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042e8:	4b7a      	ldr	r3, [pc, #488]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f6:	4977      	ldr	r1, [pc, #476]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d034      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800430e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004312:	d01d      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004318:	d817      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800431e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004322:	d009      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004324:	e011      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f000 f941 	bl	80045b4 <RCCEx_PLL2_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004336:	e00c      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3324      	adds	r3, #36	; 0x24
 800433c:	2102      	movs	r1, #2
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f9ea 	bl	8004718 <RCCEx_PLL3_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004348:	e003      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
      break;
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004358:	4b5e      	ldr	r3, [pc, #376]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004366:	495b      	ldr	r1, [pc, #364]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004368:	4313      	orrs	r3, r2
 800436a:	658b      	str	r3, [r1, #88]	; 0x58
 800436c:	e001      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436e:	7dfb      	ldrb	r3, [r7, #23]
 8004370:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d033      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004388:	d01c      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800438a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800438e:	d816      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004394:	d003      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800439a:	d007      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800439c:	e00f      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439e:	4b4d      	ldr	r3, [pc, #308]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	4a4c      	ldr	r2, [pc, #304]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80043aa:	e00c      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3324      	adds	r3, #36	; 0x24
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f9b0 	bl	8004718 <RCCEx_PLL3_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80043bc:	e003      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	75fb      	strb	r3, [r7, #23]
      break;
 80043c2:	e000      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80043c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043cc:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043da:	493e      	ldr	r1, [pc, #248]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	654b      	str	r3, [r1, #84]	; 0x54
 80043e0:	e001      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d029      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80043fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fe:	d007      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004400:	e00f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004402:	4b34      	ldr	r3, [pc, #208]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4a33      	ldr	r2, [pc, #204]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800440e:	e00b      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f8cc 	bl	80045b4 <RCCEx_PLL2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004420:	e002      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	4926      	ldr	r1, [pc, #152]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800443c:	4313      	orrs	r3, r2
 800443e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004440:	e001      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3324      	adds	r3, #36	; 0x24
 8004456:	2102      	movs	r1, #2
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f95d 	bl	8004718 <RCCEx_PLL3_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d033      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447c:	d017      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800447e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004482:	d811      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004488:	d013      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800448a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448e:	d80b      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d010      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004498:	d106      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80044a6:	e007      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	e004      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80044b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ca:	4902      	ldr	r1, [pc, #8]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	654b      	str	r3, [r1, #84]	; 0x54
 80044d0:	e004      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80044d2:	bf00      	nop
 80044d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044e8:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	492e      	ldr	r1, [pc, #184]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004514:	4926      	ldr	r1, [pc, #152]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004516:	4313      	orrs	r3, r2
 8004518:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d008      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004532:	491f      	ldr	r1, [pc, #124]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004534:	4313      	orrs	r3, r2
 8004536:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004544:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800454a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800454e:	6113      	str	r3, [r2, #16]
 8004550:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800455a:	4915      	ldr	r1, [pc, #84]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800455c:	4313      	orrs	r3, r2
 800455e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	da08      	bge.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800456a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004574:	490e      	ldr	r1, [pc, #56]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004576:	4313      	orrs	r3, r2
 8004578:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	4906      	ldr	r1, [pc, #24]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004596:	4313      	orrs	r3, r2
 8004598:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800459a:	7dbb      	ldrb	r3, [r7, #22]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	58024400 	.word	0x58024400

080045b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045c2:	4b53      	ldr	r3, [pc, #332]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d101      	bne.n	80045d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e099      	b.n	8004706 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045d2:	4b4f      	ldr	r3, [pc, #316]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a4e      	ldr	r2, [pc, #312]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80045d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045de:	f7fc fc2b 	bl	8000e38 <HAL_GetTick>
 80045e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045e4:	e008      	b.n	80045f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045e6:	f7fc fc27 	bl	8000e38 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e086      	b.n	8004706 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045f8:	4b45      	ldr	r3, [pc, #276]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f0      	bne.n	80045e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004604:	4b42      	ldr	r3, [pc, #264]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	031b      	lsls	r3, r3, #12
 8004612:	493f      	ldr	r1, [pc, #252]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	628b      	str	r3, [r1, #40]	; 0x28
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	3b01      	subs	r3, #1
 800461e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	3b01      	subs	r3, #1
 8004628:	025b      	lsls	r3, r3, #9
 800462a:	b29b      	uxth	r3, r3
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	3b01      	subs	r3, #1
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	3b01      	subs	r3, #1
 8004642:	061b      	lsls	r3, r3, #24
 8004644:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004648:	4931      	ldr	r1, [pc, #196]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 800464a:	4313      	orrs	r3, r2
 800464c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800464e:	4b30      	ldr	r3, [pc, #192]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	492d      	ldr	r1, [pc, #180]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 800465c:	4313      	orrs	r3, r2
 800465e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004660:	4b2b      	ldr	r3, [pc, #172]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f023 0220 	bic.w	r2, r3, #32
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	4928      	ldr	r1, [pc, #160]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 800466e:	4313      	orrs	r3, r2
 8004670:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004672:	4b27      	ldr	r3, [pc, #156]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	4a26      	ldr	r2, [pc, #152]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 8004678:	f023 0310 	bic.w	r3, r3, #16
 800467c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800467e:	4b24      	ldr	r3, [pc, #144]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 8004680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <RCCEx_PLL2_Config+0x160>)
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	69d2      	ldr	r2, [r2, #28]
 800468a:	00d2      	lsls	r2, r2, #3
 800468c:	4920      	ldr	r1, [pc, #128]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004692:	4b1f      	ldr	r3, [pc, #124]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 8004698:	f043 0310 	orr.w	r3, r3, #16
 800469c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046a4:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	4a19      	ldr	r2, [pc, #100]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80046aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046b0:	e00f      	b.n	80046d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d106      	bne.n	80046c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046b8:	4b15      	ldr	r3, [pc, #84]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80046be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046c4:	e005      	b.n	80046d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	4a11      	ldr	r2, [pc, #68]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80046cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046d2:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a0e      	ldr	r2, [pc, #56]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80046d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046de:	f7fc fbab 	bl	8000e38 <HAL_GetTick>
 80046e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046e4:	e008      	b.n	80046f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80046e6:	f7fc fba7 	bl	8000e38 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e006      	b.n	8004706 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <RCCEx_PLL2_Config+0x15c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	58024400 	.word	0x58024400
 8004714:	ffff0007 	.word	0xffff0007

08004718 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004726:	4b53      	ldr	r3, [pc, #332]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b03      	cmp	r3, #3
 8004730:	d101      	bne.n	8004736 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e099      	b.n	800486a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004736:	4b4f      	ldr	r3, [pc, #316]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a4e      	ldr	r2, [pc, #312]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 800473c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004742:	f7fc fb79 	bl	8000e38 <HAL_GetTick>
 8004746:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004748:	e008      	b.n	800475c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800474a:	f7fc fb75 	bl	8000e38 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e086      	b.n	800486a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800475c:	4b45      	ldr	r3, [pc, #276]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f0      	bne.n	800474a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004768:	4b42      	ldr	r3, [pc, #264]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	051b      	lsls	r3, r3, #20
 8004776:	493f      	ldr	r1, [pc, #252]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	628b      	str	r3, [r1, #40]	; 0x28
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	3b01      	subs	r3, #1
 8004782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	3b01      	subs	r3, #1
 800478c:	025b      	lsls	r3, r3, #9
 800478e:	b29b      	uxth	r3, r3
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	3b01      	subs	r3, #1
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	061b      	lsls	r3, r3, #24
 80047a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047ac:	4931      	ldr	r1, [pc, #196]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047b2:	4b30      	ldr	r3, [pc, #192]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	492d      	ldr	r1, [pc, #180]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	4928      	ldr	r1, [pc, #160]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047d6:	4b27      	ldr	r3, [pc, #156]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	4a26      	ldr	r2, [pc, #152]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <RCCEx_PLL3_Config+0x160>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	69d2      	ldr	r2, [r2, #28]
 80047ee:	00d2      	lsls	r2, r2, #3
 80047f0:	4920      	ldr	r1, [pc, #128]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80047f6:	4b1f      	ldr	r3, [pc, #124]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	4a1e      	ldr	r2, [pc, #120]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004808:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	4a19      	ldr	r2, [pc, #100]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 800480e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004814:	e00f      	b.n	8004836 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d106      	bne.n	800482a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800481c:	4b15      	ldr	r3, [pc, #84]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	4a14      	ldr	r2, [pc, #80]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 8004822:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004828:	e005      	b.n	8004836 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4a11      	ldr	r2, [pc, #68]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 8004830:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004834:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a0e      	ldr	r2, [pc, #56]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 800483c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004842:	f7fc faf9 	bl	8000e38 <HAL_GetTick>
 8004846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004848:	e008      	b.n	800485c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800484a:	f7fc faf5 	bl	8000e38 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e006      	b.n	800486a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <RCCEx_PLL3_Config+0x15c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	58024400 	.word	0x58024400
 8004878:	ffff0007 	.word	0xffff0007

0800487c <__errno>:
 800487c:	4b01      	ldr	r3, [pc, #4]	; (8004884 <__errno+0x8>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	24000010 	.word	0x24000010

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4d0d      	ldr	r5, [pc, #52]	; (80048c0 <__libc_init_array+0x38>)
 800488c:	4c0d      	ldr	r4, [pc, #52]	; (80048c4 <__libc_init_array+0x3c>)
 800488e:	1b64      	subs	r4, r4, r5
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	2600      	movs	r6, #0
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	4d0b      	ldr	r5, [pc, #44]	; (80048c8 <__libc_init_array+0x40>)
 800489a:	4c0c      	ldr	r4, [pc, #48]	; (80048cc <__libc_init_array+0x44>)
 800489c:	f000 fc8e 	bl	80051bc <_init>
 80048a0:	1b64      	subs	r4, r4, r5
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	2600      	movs	r6, #0
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	0800528c 	.word	0x0800528c
 80048c4:	0800528c 	.word	0x0800528c
 80048c8:	0800528c 	.word	0x0800528c
 80048cc:	08005290 	.word	0x08005290

080048d0 <memcpy>:
 80048d0:	440a      	add	r2, r1
 80048d2:	4291      	cmp	r1, r2
 80048d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048d8:	d100      	bne.n	80048dc <memcpy+0xc>
 80048da:	4770      	bx	lr
 80048dc:	b510      	push	{r4, lr}
 80048de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048e6:	4291      	cmp	r1, r2
 80048e8:	d1f9      	bne.n	80048de <memcpy+0xe>
 80048ea:	bd10      	pop	{r4, pc}

080048ec <memset>:
 80048ec:	4402      	add	r2, r0
 80048ee:	4603      	mov	r3, r0
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d100      	bne.n	80048f6 <memset+0xa>
 80048f4:	4770      	bx	lr
 80048f6:	f803 1b01 	strb.w	r1, [r3], #1
 80048fa:	e7f9      	b.n	80048f0 <memset+0x4>

080048fc <siprintf>:
 80048fc:	b40e      	push	{r1, r2, r3}
 80048fe:	b500      	push	{lr}
 8004900:	b09c      	sub	sp, #112	; 0x70
 8004902:	ab1d      	add	r3, sp, #116	; 0x74
 8004904:	9002      	str	r0, [sp, #8]
 8004906:	9006      	str	r0, [sp, #24]
 8004908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800490c:	4809      	ldr	r0, [pc, #36]	; (8004934 <siprintf+0x38>)
 800490e:	9107      	str	r1, [sp, #28]
 8004910:	9104      	str	r1, [sp, #16]
 8004912:	4909      	ldr	r1, [pc, #36]	; (8004938 <siprintf+0x3c>)
 8004914:	f853 2b04 	ldr.w	r2, [r3], #4
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	6800      	ldr	r0, [r0, #0]
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	a902      	add	r1, sp, #8
 8004920:	f000 f868 	bl	80049f4 <_svfiprintf_r>
 8004924:	9b02      	ldr	r3, [sp, #8]
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	b01c      	add	sp, #112	; 0x70
 800492c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004930:	b003      	add	sp, #12
 8004932:	4770      	bx	lr
 8004934:	24000010 	.word	0x24000010
 8004938:	ffff0208 	.word	0xffff0208

0800493c <__ssputs_r>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	688e      	ldr	r6, [r1, #8]
 8004942:	429e      	cmp	r6, r3
 8004944:	4682      	mov	sl, r0
 8004946:	460c      	mov	r4, r1
 8004948:	4690      	mov	r8, r2
 800494a:	461f      	mov	r7, r3
 800494c:	d838      	bhi.n	80049c0 <__ssputs_r+0x84>
 800494e:	898a      	ldrh	r2, [r1, #12]
 8004950:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004954:	d032      	beq.n	80049bc <__ssputs_r+0x80>
 8004956:	6825      	ldr	r5, [r4, #0]
 8004958:	6909      	ldr	r1, [r1, #16]
 800495a:	eba5 0901 	sub.w	r9, r5, r1
 800495e:	6965      	ldr	r5, [r4, #20]
 8004960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004964:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004968:	3301      	adds	r3, #1
 800496a:	444b      	add	r3, r9
 800496c:	106d      	asrs	r5, r5, #1
 800496e:	429d      	cmp	r5, r3
 8004970:	bf38      	it	cc
 8004972:	461d      	movcc	r5, r3
 8004974:	0553      	lsls	r3, r2, #21
 8004976:	d531      	bpl.n	80049dc <__ssputs_r+0xa0>
 8004978:	4629      	mov	r1, r5
 800497a:	f000 fb55 	bl	8005028 <_malloc_r>
 800497e:	4606      	mov	r6, r0
 8004980:	b950      	cbnz	r0, 8004998 <__ssputs_r+0x5c>
 8004982:	230c      	movs	r3, #12
 8004984:	f8ca 3000 	str.w	r3, [sl]
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004998:	6921      	ldr	r1, [r4, #16]
 800499a:	464a      	mov	r2, r9
 800499c:	f7ff ff98 	bl	80048d0 <memcpy>
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	6126      	str	r6, [r4, #16]
 80049ae:	6165      	str	r5, [r4, #20]
 80049b0:	444e      	add	r6, r9
 80049b2:	eba5 0509 	sub.w	r5, r5, r9
 80049b6:	6026      	str	r6, [r4, #0]
 80049b8:	60a5      	str	r5, [r4, #8]
 80049ba:	463e      	mov	r6, r7
 80049bc:	42be      	cmp	r6, r7
 80049be:	d900      	bls.n	80049c2 <__ssputs_r+0x86>
 80049c0:	463e      	mov	r6, r7
 80049c2:	6820      	ldr	r0, [r4, #0]
 80049c4:	4632      	mov	r2, r6
 80049c6:	4641      	mov	r1, r8
 80049c8:	f000 faa8 	bl	8004f1c <memmove>
 80049cc:	68a3      	ldr	r3, [r4, #8]
 80049ce:	1b9b      	subs	r3, r3, r6
 80049d0:	60a3      	str	r3, [r4, #8]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	4433      	add	r3, r6
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	2000      	movs	r0, #0
 80049da:	e7db      	b.n	8004994 <__ssputs_r+0x58>
 80049dc:	462a      	mov	r2, r5
 80049de:	f000 fb97 	bl	8005110 <_realloc_r>
 80049e2:	4606      	mov	r6, r0
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d1e1      	bne.n	80049ac <__ssputs_r+0x70>
 80049e8:	6921      	ldr	r1, [r4, #16]
 80049ea:	4650      	mov	r0, sl
 80049ec:	f000 fab0 	bl	8004f50 <_free_r>
 80049f0:	e7c7      	b.n	8004982 <__ssputs_r+0x46>
	...

080049f4 <_svfiprintf_r>:
 80049f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f8:	4698      	mov	r8, r3
 80049fa:	898b      	ldrh	r3, [r1, #12]
 80049fc:	061b      	lsls	r3, r3, #24
 80049fe:	b09d      	sub	sp, #116	; 0x74
 8004a00:	4607      	mov	r7, r0
 8004a02:	460d      	mov	r5, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	d50e      	bpl.n	8004a26 <_svfiprintf_r+0x32>
 8004a08:	690b      	ldr	r3, [r1, #16]
 8004a0a:	b963      	cbnz	r3, 8004a26 <_svfiprintf_r+0x32>
 8004a0c:	2140      	movs	r1, #64	; 0x40
 8004a0e:	f000 fb0b 	bl	8005028 <_malloc_r>
 8004a12:	6028      	str	r0, [r5, #0]
 8004a14:	6128      	str	r0, [r5, #16]
 8004a16:	b920      	cbnz	r0, 8004a22 <_svfiprintf_r+0x2e>
 8004a18:	230c      	movs	r3, #12
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	e0d1      	b.n	8004bc6 <_svfiprintf_r+0x1d2>
 8004a22:	2340      	movs	r3, #64	; 0x40
 8004a24:	616b      	str	r3, [r5, #20]
 8004a26:	2300      	movs	r3, #0
 8004a28:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a30:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a34:	2330      	movs	r3, #48	; 0x30
 8004a36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004be0 <_svfiprintf_r+0x1ec>
 8004a3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a3e:	f04f 0901 	mov.w	r9, #1
 8004a42:	4623      	mov	r3, r4
 8004a44:	469a      	mov	sl, r3
 8004a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a4a:	b10a      	cbz	r2, 8004a50 <_svfiprintf_r+0x5c>
 8004a4c:	2a25      	cmp	r2, #37	; 0x25
 8004a4e:	d1f9      	bne.n	8004a44 <_svfiprintf_r+0x50>
 8004a50:	ebba 0b04 	subs.w	fp, sl, r4
 8004a54:	d00b      	beq.n	8004a6e <_svfiprintf_r+0x7a>
 8004a56:	465b      	mov	r3, fp
 8004a58:	4622      	mov	r2, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	f7ff ff6d 	bl	800493c <__ssputs_r>
 8004a62:	3001      	adds	r0, #1
 8004a64:	f000 80aa 	beq.w	8004bbc <_svfiprintf_r+0x1c8>
 8004a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a6a:	445a      	add	r2, fp
 8004a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80a2 	beq.w	8004bbc <_svfiprintf_r+0x1c8>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a82:	f10a 0a01 	add.w	sl, sl, #1
 8004a86:	9304      	str	r3, [sp, #16]
 8004a88:	9307      	str	r3, [sp, #28]
 8004a8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a8e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a90:	4654      	mov	r4, sl
 8004a92:	2205      	movs	r2, #5
 8004a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a98:	4851      	ldr	r0, [pc, #324]	; (8004be0 <_svfiprintf_r+0x1ec>)
 8004a9a:	f7fb fc21 	bl	80002e0 <memchr>
 8004a9e:	9a04      	ldr	r2, [sp, #16]
 8004aa0:	b9d8      	cbnz	r0, 8004ada <_svfiprintf_r+0xe6>
 8004aa2:	06d0      	lsls	r0, r2, #27
 8004aa4:	bf44      	itt	mi
 8004aa6:	2320      	movmi	r3, #32
 8004aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aac:	0711      	lsls	r1, r2, #28
 8004aae:	bf44      	itt	mi
 8004ab0:	232b      	movmi	r3, #43	; 0x2b
 8004ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aba:	2b2a      	cmp	r3, #42	; 0x2a
 8004abc:	d015      	beq.n	8004aea <_svfiprintf_r+0xf6>
 8004abe:	9a07      	ldr	r2, [sp, #28]
 8004ac0:	4654      	mov	r4, sl
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f04f 0c0a 	mov.w	ip, #10
 8004ac8:	4621      	mov	r1, r4
 8004aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ace:	3b30      	subs	r3, #48	; 0x30
 8004ad0:	2b09      	cmp	r3, #9
 8004ad2:	d94e      	bls.n	8004b72 <_svfiprintf_r+0x17e>
 8004ad4:	b1b0      	cbz	r0, 8004b04 <_svfiprintf_r+0x110>
 8004ad6:	9207      	str	r2, [sp, #28]
 8004ad8:	e014      	b.n	8004b04 <_svfiprintf_r+0x110>
 8004ada:	eba0 0308 	sub.w	r3, r0, r8
 8004ade:	fa09 f303 	lsl.w	r3, r9, r3
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	9304      	str	r3, [sp, #16]
 8004ae6:	46a2      	mov	sl, r4
 8004ae8:	e7d2      	b.n	8004a90 <_svfiprintf_r+0x9c>
 8004aea:	9b03      	ldr	r3, [sp, #12]
 8004aec:	1d19      	adds	r1, r3, #4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	9103      	str	r1, [sp, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bfbb      	ittet	lt
 8004af6:	425b      	neglt	r3, r3
 8004af8:	f042 0202 	orrlt.w	r2, r2, #2
 8004afc:	9307      	strge	r3, [sp, #28]
 8004afe:	9307      	strlt	r3, [sp, #28]
 8004b00:	bfb8      	it	lt
 8004b02:	9204      	strlt	r2, [sp, #16]
 8004b04:	7823      	ldrb	r3, [r4, #0]
 8004b06:	2b2e      	cmp	r3, #46	; 0x2e
 8004b08:	d10c      	bne.n	8004b24 <_svfiprintf_r+0x130>
 8004b0a:	7863      	ldrb	r3, [r4, #1]
 8004b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b0e:	d135      	bne.n	8004b7c <_svfiprintf_r+0x188>
 8004b10:	9b03      	ldr	r3, [sp, #12]
 8004b12:	1d1a      	adds	r2, r3, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	9203      	str	r2, [sp, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bfb8      	it	lt
 8004b1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b20:	3402      	adds	r4, #2
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bf0 <_svfiprintf_r+0x1fc>
 8004b28:	7821      	ldrb	r1, [r4, #0]
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	4650      	mov	r0, sl
 8004b2e:	f7fb fbd7 	bl	80002e0 <memchr>
 8004b32:	b140      	cbz	r0, 8004b46 <_svfiprintf_r+0x152>
 8004b34:	2340      	movs	r3, #64	; 0x40
 8004b36:	eba0 000a 	sub.w	r0, r0, sl
 8004b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b3e:	9b04      	ldr	r3, [sp, #16]
 8004b40:	4303      	orrs	r3, r0
 8004b42:	3401      	adds	r4, #1
 8004b44:	9304      	str	r3, [sp, #16]
 8004b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b4a:	4826      	ldr	r0, [pc, #152]	; (8004be4 <_svfiprintf_r+0x1f0>)
 8004b4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b50:	2206      	movs	r2, #6
 8004b52:	f7fb fbc5 	bl	80002e0 <memchr>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d038      	beq.n	8004bcc <_svfiprintf_r+0x1d8>
 8004b5a:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <_svfiprintf_r+0x1f4>)
 8004b5c:	bb1b      	cbnz	r3, 8004ba6 <_svfiprintf_r+0x1b2>
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	3307      	adds	r3, #7
 8004b62:	f023 0307 	bic.w	r3, r3, #7
 8004b66:	3308      	adds	r3, #8
 8004b68:	9303      	str	r3, [sp, #12]
 8004b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b6c:	4433      	add	r3, r6
 8004b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b70:	e767      	b.n	8004a42 <_svfiprintf_r+0x4e>
 8004b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b76:	460c      	mov	r4, r1
 8004b78:	2001      	movs	r0, #1
 8004b7a:	e7a5      	b.n	8004ac8 <_svfiprintf_r+0xd4>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	3401      	adds	r4, #1
 8004b80:	9305      	str	r3, [sp, #20]
 8004b82:	4619      	mov	r1, r3
 8004b84:	f04f 0c0a 	mov.w	ip, #10
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b8e:	3a30      	subs	r2, #48	; 0x30
 8004b90:	2a09      	cmp	r2, #9
 8004b92:	d903      	bls.n	8004b9c <_svfiprintf_r+0x1a8>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0c5      	beq.n	8004b24 <_svfiprintf_r+0x130>
 8004b98:	9105      	str	r1, [sp, #20]
 8004b9a:	e7c3      	b.n	8004b24 <_svfiprintf_r+0x130>
 8004b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e7f0      	b.n	8004b88 <_svfiprintf_r+0x194>
 8004ba6:	ab03      	add	r3, sp, #12
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	462a      	mov	r2, r5
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <_svfiprintf_r+0x1f8>)
 8004bae:	a904      	add	r1, sp, #16
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	f3af 8000 	nop.w
 8004bb6:	1c42      	adds	r2, r0, #1
 8004bb8:	4606      	mov	r6, r0
 8004bba:	d1d6      	bne.n	8004b6a <_svfiprintf_r+0x176>
 8004bbc:	89ab      	ldrh	r3, [r5, #12]
 8004bbe:	065b      	lsls	r3, r3, #25
 8004bc0:	f53f af2c 	bmi.w	8004a1c <_svfiprintf_r+0x28>
 8004bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bc6:	b01d      	add	sp, #116	; 0x74
 8004bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bcc:	ab03      	add	r3, sp, #12
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	462a      	mov	r2, r5
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <_svfiprintf_r+0x1f8>)
 8004bd4:	a904      	add	r1, sp, #16
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f000 f87a 	bl	8004cd0 <_printf_i>
 8004bdc:	e7eb      	b.n	8004bb6 <_svfiprintf_r+0x1c2>
 8004bde:	bf00      	nop
 8004be0:	08005258 	.word	0x08005258
 8004be4:	08005262 	.word	0x08005262
 8004be8:	00000000 	.word	0x00000000
 8004bec:	0800493d 	.word	0x0800493d
 8004bf0:	0800525e 	.word	0x0800525e

08004bf4 <_printf_common>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	4699      	mov	r9, r3
 8004bfc:	688a      	ldr	r2, [r1, #8]
 8004bfe:	690b      	ldr	r3, [r1, #16]
 8004c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bfb8      	it	lt
 8004c08:	4613      	movlt	r3, r2
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c10:	4607      	mov	r7, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	b10a      	cbz	r2, 8004c1a <_printf_common+0x26>
 8004c16:	3301      	adds	r3, #1
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	0699      	lsls	r1, r3, #26
 8004c1e:	bf42      	ittt	mi
 8004c20:	6833      	ldrmi	r3, [r6, #0]
 8004c22:	3302      	addmi	r3, #2
 8004c24:	6033      	strmi	r3, [r6, #0]
 8004c26:	6825      	ldr	r5, [r4, #0]
 8004c28:	f015 0506 	ands.w	r5, r5, #6
 8004c2c:	d106      	bne.n	8004c3c <_printf_common+0x48>
 8004c2e:	f104 0a19 	add.w	sl, r4, #25
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	6832      	ldr	r2, [r6, #0]
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	42ab      	cmp	r3, r5
 8004c3a:	dc26      	bgt.n	8004c8a <_printf_common+0x96>
 8004c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c40:	1e13      	subs	r3, r2, #0
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	bf18      	it	ne
 8004c46:	2301      	movne	r3, #1
 8004c48:	0692      	lsls	r2, r2, #26
 8004c4a:	d42b      	bmi.n	8004ca4 <_printf_common+0xb0>
 8004c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c50:	4649      	mov	r1, r9
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	3001      	adds	r0, #1
 8004c58:	d01e      	beq.n	8004c98 <_printf_common+0xa4>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	68e5      	ldr	r5, [r4, #12]
 8004c5e:	6832      	ldr	r2, [r6, #0]
 8004c60:	f003 0306 	and.w	r3, r3, #6
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	bf08      	it	eq
 8004c68:	1aad      	subeq	r5, r5, r2
 8004c6a:	68a3      	ldr	r3, [r4, #8]
 8004c6c:	6922      	ldr	r2, [r4, #16]
 8004c6e:	bf0c      	ite	eq
 8004c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c74:	2500      	movne	r5, #0
 8004c76:	4293      	cmp	r3, r2
 8004c78:	bfc4      	itt	gt
 8004c7a:	1a9b      	subgt	r3, r3, r2
 8004c7c:	18ed      	addgt	r5, r5, r3
 8004c7e:	2600      	movs	r6, #0
 8004c80:	341a      	adds	r4, #26
 8004c82:	42b5      	cmp	r5, r6
 8004c84:	d11a      	bne.n	8004cbc <_printf_common+0xc8>
 8004c86:	2000      	movs	r0, #0
 8004c88:	e008      	b.n	8004c9c <_printf_common+0xa8>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4652      	mov	r2, sl
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4638      	mov	r0, r7
 8004c92:	47c0      	blx	r8
 8004c94:	3001      	adds	r0, #1
 8004c96:	d103      	bne.n	8004ca0 <_printf_common+0xac>
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca0:	3501      	adds	r5, #1
 8004ca2:	e7c6      	b.n	8004c32 <_printf_common+0x3e>
 8004ca4:	18e1      	adds	r1, r4, r3
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	2030      	movs	r0, #48	; 0x30
 8004caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cae:	4422      	add	r2, r4
 8004cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cb8:	3302      	adds	r3, #2
 8004cba:	e7c7      	b.n	8004c4c <_printf_common+0x58>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d0e6      	beq.n	8004c98 <_printf_common+0xa4>
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7d9      	b.n	8004c82 <_printf_common+0x8e>
	...

08004cd0 <_printf_i>:
 8004cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	7e0f      	ldrb	r7, [r1, #24]
 8004cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cd8:	2f78      	cmp	r7, #120	; 0x78
 8004cda:	4691      	mov	r9, r2
 8004cdc:	4680      	mov	r8, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	469a      	mov	sl, r3
 8004ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ce6:	d807      	bhi.n	8004cf8 <_printf_i+0x28>
 8004ce8:	2f62      	cmp	r7, #98	; 0x62
 8004cea:	d80a      	bhi.n	8004d02 <_printf_i+0x32>
 8004cec:	2f00      	cmp	r7, #0
 8004cee:	f000 80d8 	beq.w	8004ea2 <_printf_i+0x1d2>
 8004cf2:	2f58      	cmp	r7, #88	; 0x58
 8004cf4:	f000 80a3 	beq.w	8004e3e <_printf_i+0x16e>
 8004cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d00:	e03a      	b.n	8004d78 <_printf_i+0xa8>
 8004d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d06:	2b15      	cmp	r3, #21
 8004d08:	d8f6      	bhi.n	8004cf8 <_printf_i+0x28>
 8004d0a:	a101      	add	r1, pc, #4	; (adr r1, 8004d10 <_printf_i+0x40>)
 8004d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d10:	08004d69 	.word	0x08004d69
 8004d14:	08004d7d 	.word	0x08004d7d
 8004d18:	08004cf9 	.word	0x08004cf9
 8004d1c:	08004cf9 	.word	0x08004cf9
 8004d20:	08004cf9 	.word	0x08004cf9
 8004d24:	08004cf9 	.word	0x08004cf9
 8004d28:	08004d7d 	.word	0x08004d7d
 8004d2c:	08004cf9 	.word	0x08004cf9
 8004d30:	08004cf9 	.word	0x08004cf9
 8004d34:	08004cf9 	.word	0x08004cf9
 8004d38:	08004cf9 	.word	0x08004cf9
 8004d3c:	08004e89 	.word	0x08004e89
 8004d40:	08004dad 	.word	0x08004dad
 8004d44:	08004e6b 	.word	0x08004e6b
 8004d48:	08004cf9 	.word	0x08004cf9
 8004d4c:	08004cf9 	.word	0x08004cf9
 8004d50:	08004eab 	.word	0x08004eab
 8004d54:	08004cf9 	.word	0x08004cf9
 8004d58:	08004dad 	.word	0x08004dad
 8004d5c:	08004cf9 	.word	0x08004cf9
 8004d60:	08004cf9 	.word	0x08004cf9
 8004d64:	08004e73 	.word	0x08004e73
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	1d1a      	adds	r2, r3, #4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	602a      	str	r2, [r5, #0]
 8004d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0a3      	b.n	8004ec4 <_printf_i+0x1f4>
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	6829      	ldr	r1, [r5, #0]
 8004d80:	0606      	lsls	r6, r0, #24
 8004d82:	f101 0304 	add.w	r3, r1, #4
 8004d86:	d50a      	bpl.n	8004d9e <_printf_i+0xce>
 8004d88:	680e      	ldr	r6, [r1, #0]
 8004d8a:	602b      	str	r3, [r5, #0]
 8004d8c:	2e00      	cmp	r6, #0
 8004d8e:	da03      	bge.n	8004d98 <_printf_i+0xc8>
 8004d90:	232d      	movs	r3, #45	; 0x2d
 8004d92:	4276      	negs	r6, r6
 8004d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d98:	485e      	ldr	r0, [pc, #376]	; (8004f14 <_printf_i+0x244>)
 8004d9a:	230a      	movs	r3, #10
 8004d9c:	e019      	b.n	8004dd2 <_printf_i+0x102>
 8004d9e:	680e      	ldr	r6, [r1, #0]
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004da6:	bf18      	it	ne
 8004da8:	b236      	sxthne	r6, r6
 8004daa:	e7ef      	b.n	8004d8c <_printf_i+0xbc>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	6820      	ldr	r0, [r4, #0]
 8004db0:	1d19      	adds	r1, r3, #4
 8004db2:	6029      	str	r1, [r5, #0]
 8004db4:	0601      	lsls	r1, r0, #24
 8004db6:	d501      	bpl.n	8004dbc <_printf_i+0xec>
 8004db8:	681e      	ldr	r6, [r3, #0]
 8004dba:	e002      	b.n	8004dc2 <_printf_i+0xf2>
 8004dbc:	0646      	lsls	r6, r0, #25
 8004dbe:	d5fb      	bpl.n	8004db8 <_printf_i+0xe8>
 8004dc0:	881e      	ldrh	r6, [r3, #0]
 8004dc2:	4854      	ldr	r0, [pc, #336]	; (8004f14 <_printf_i+0x244>)
 8004dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2308      	moveq	r3, #8
 8004dca:	230a      	movne	r3, #10
 8004dcc:	2100      	movs	r1, #0
 8004dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dd2:	6865      	ldr	r5, [r4, #4]
 8004dd4:	60a5      	str	r5, [r4, #8]
 8004dd6:	2d00      	cmp	r5, #0
 8004dd8:	bfa2      	ittt	ge
 8004dda:	6821      	ldrge	r1, [r4, #0]
 8004ddc:	f021 0104 	bicge.w	r1, r1, #4
 8004de0:	6021      	strge	r1, [r4, #0]
 8004de2:	b90e      	cbnz	r6, 8004de8 <_printf_i+0x118>
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	d04d      	beq.n	8004e84 <_printf_i+0x1b4>
 8004de8:	4615      	mov	r5, r2
 8004dea:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dee:	fb03 6711 	mls	r7, r3, r1, r6
 8004df2:	5dc7      	ldrb	r7, [r0, r7]
 8004df4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004df8:	4637      	mov	r7, r6
 8004dfa:	42bb      	cmp	r3, r7
 8004dfc:	460e      	mov	r6, r1
 8004dfe:	d9f4      	bls.n	8004dea <_printf_i+0x11a>
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d10b      	bne.n	8004e1c <_printf_i+0x14c>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	07de      	lsls	r6, r3, #31
 8004e08:	d508      	bpl.n	8004e1c <_printf_i+0x14c>
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	6861      	ldr	r1, [r4, #4]
 8004e0e:	4299      	cmp	r1, r3
 8004e10:	bfde      	ittt	le
 8004e12:	2330      	movle	r3, #48	; 0x30
 8004e14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e1c:	1b52      	subs	r2, r2, r5
 8004e1e:	6122      	str	r2, [r4, #16]
 8004e20:	f8cd a000 	str.w	sl, [sp]
 8004e24:	464b      	mov	r3, r9
 8004e26:	aa03      	add	r2, sp, #12
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f7ff fee2 	bl	8004bf4 <_printf_common>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d14c      	bne.n	8004ece <_printf_i+0x1fe>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	b004      	add	sp, #16
 8004e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3e:	4835      	ldr	r0, [pc, #212]	; (8004f14 <_printf_i+0x244>)
 8004e40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e44:	6829      	ldr	r1, [r5, #0]
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e4c:	6029      	str	r1, [r5, #0]
 8004e4e:	061d      	lsls	r5, r3, #24
 8004e50:	d514      	bpl.n	8004e7c <_printf_i+0x1ac>
 8004e52:	07df      	lsls	r7, r3, #31
 8004e54:	bf44      	itt	mi
 8004e56:	f043 0320 	orrmi.w	r3, r3, #32
 8004e5a:	6023      	strmi	r3, [r4, #0]
 8004e5c:	b91e      	cbnz	r6, 8004e66 <_printf_i+0x196>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	f023 0320 	bic.w	r3, r3, #32
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	2310      	movs	r3, #16
 8004e68:	e7b0      	b.n	8004dcc <_printf_i+0xfc>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	f043 0320 	orr.w	r3, r3, #32
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	2378      	movs	r3, #120	; 0x78
 8004e74:	4828      	ldr	r0, [pc, #160]	; (8004f18 <_printf_i+0x248>)
 8004e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e7a:	e7e3      	b.n	8004e44 <_printf_i+0x174>
 8004e7c:	0659      	lsls	r1, r3, #25
 8004e7e:	bf48      	it	mi
 8004e80:	b2b6      	uxthmi	r6, r6
 8004e82:	e7e6      	b.n	8004e52 <_printf_i+0x182>
 8004e84:	4615      	mov	r5, r2
 8004e86:	e7bb      	b.n	8004e00 <_printf_i+0x130>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	6826      	ldr	r6, [r4, #0]
 8004e8c:	6961      	ldr	r1, [r4, #20]
 8004e8e:	1d18      	adds	r0, r3, #4
 8004e90:	6028      	str	r0, [r5, #0]
 8004e92:	0635      	lsls	r5, r6, #24
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	d501      	bpl.n	8004e9c <_printf_i+0x1cc>
 8004e98:	6019      	str	r1, [r3, #0]
 8004e9a:	e002      	b.n	8004ea2 <_printf_i+0x1d2>
 8004e9c:	0670      	lsls	r0, r6, #25
 8004e9e:	d5fb      	bpl.n	8004e98 <_printf_i+0x1c8>
 8004ea0:	8019      	strh	r1, [r3, #0]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6123      	str	r3, [r4, #16]
 8004ea6:	4615      	mov	r5, r2
 8004ea8:	e7ba      	b.n	8004e20 <_printf_i+0x150>
 8004eaa:	682b      	ldr	r3, [r5, #0]
 8004eac:	1d1a      	adds	r2, r3, #4
 8004eae:	602a      	str	r2, [r5, #0]
 8004eb0:	681d      	ldr	r5, [r3, #0]
 8004eb2:	6862      	ldr	r2, [r4, #4]
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f7fb fa12 	bl	80002e0 <memchr>
 8004ebc:	b108      	cbz	r0, 8004ec2 <_printf_i+0x1f2>
 8004ebe:	1b40      	subs	r0, r0, r5
 8004ec0:	6060      	str	r0, [r4, #4]
 8004ec2:	6863      	ldr	r3, [r4, #4]
 8004ec4:	6123      	str	r3, [r4, #16]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ecc:	e7a8      	b.n	8004e20 <_printf_i+0x150>
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	462a      	mov	r2, r5
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	47d0      	blx	sl
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d0ab      	beq.n	8004e34 <_printf_i+0x164>
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	079b      	lsls	r3, r3, #30
 8004ee0:	d413      	bmi.n	8004f0a <_printf_i+0x23a>
 8004ee2:	68e0      	ldr	r0, [r4, #12]
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	4298      	cmp	r0, r3
 8004ee8:	bfb8      	it	lt
 8004eea:	4618      	movlt	r0, r3
 8004eec:	e7a4      	b.n	8004e38 <_printf_i+0x168>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	47d0      	blx	sl
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d09b      	beq.n	8004e34 <_printf_i+0x164>
 8004efc:	3501      	adds	r5, #1
 8004efe:	68e3      	ldr	r3, [r4, #12]
 8004f00:	9903      	ldr	r1, [sp, #12]
 8004f02:	1a5b      	subs	r3, r3, r1
 8004f04:	42ab      	cmp	r3, r5
 8004f06:	dcf2      	bgt.n	8004eee <_printf_i+0x21e>
 8004f08:	e7eb      	b.n	8004ee2 <_printf_i+0x212>
 8004f0a:	2500      	movs	r5, #0
 8004f0c:	f104 0619 	add.w	r6, r4, #25
 8004f10:	e7f5      	b.n	8004efe <_printf_i+0x22e>
 8004f12:	bf00      	nop
 8004f14:	08005269 	.word	0x08005269
 8004f18:	0800527a 	.word	0x0800527a

08004f1c <memmove>:
 8004f1c:	4288      	cmp	r0, r1
 8004f1e:	b510      	push	{r4, lr}
 8004f20:	eb01 0402 	add.w	r4, r1, r2
 8004f24:	d902      	bls.n	8004f2c <memmove+0x10>
 8004f26:	4284      	cmp	r4, r0
 8004f28:	4623      	mov	r3, r4
 8004f2a:	d807      	bhi.n	8004f3c <memmove+0x20>
 8004f2c:	1e43      	subs	r3, r0, #1
 8004f2e:	42a1      	cmp	r1, r4
 8004f30:	d008      	beq.n	8004f44 <memmove+0x28>
 8004f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f3a:	e7f8      	b.n	8004f2e <memmove+0x12>
 8004f3c:	4402      	add	r2, r0
 8004f3e:	4601      	mov	r1, r0
 8004f40:	428a      	cmp	r2, r1
 8004f42:	d100      	bne.n	8004f46 <memmove+0x2a>
 8004f44:	bd10      	pop	{r4, pc}
 8004f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f4e:	e7f7      	b.n	8004f40 <memmove+0x24>

08004f50 <_free_r>:
 8004f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f52:	2900      	cmp	r1, #0
 8004f54:	d044      	beq.n	8004fe0 <_free_r+0x90>
 8004f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f5a:	9001      	str	r0, [sp, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f62:	bfb8      	it	lt
 8004f64:	18e4      	addlt	r4, r4, r3
 8004f66:	f000 f913 	bl	8005190 <__malloc_lock>
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <_free_r+0x94>)
 8004f6c:	9801      	ldr	r0, [sp, #4]
 8004f6e:	6813      	ldr	r3, [r2, #0]
 8004f70:	b933      	cbnz	r3, 8004f80 <_free_r+0x30>
 8004f72:	6063      	str	r3, [r4, #4]
 8004f74:	6014      	str	r4, [r2, #0]
 8004f76:	b003      	add	sp, #12
 8004f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f7c:	f000 b90e 	b.w	800519c <__malloc_unlock>
 8004f80:	42a3      	cmp	r3, r4
 8004f82:	d908      	bls.n	8004f96 <_free_r+0x46>
 8004f84:	6825      	ldr	r5, [r4, #0]
 8004f86:	1961      	adds	r1, r4, r5
 8004f88:	428b      	cmp	r3, r1
 8004f8a:	bf01      	itttt	eq
 8004f8c:	6819      	ldreq	r1, [r3, #0]
 8004f8e:	685b      	ldreq	r3, [r3, #4]
 8004f90:	1949      	addeq	r1, r1, r5
 8004f92:	6021      	streq	r1, [r4, #0]
 8004f94:	e7ed      	b.n	8004f72 <_free_r+0x22>
 8004f96:	461a      	mov	r2, r3
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b10b      	cbz	r3, 8004fa0 <_free_r+0x50>
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	d9fa      	bls.n	8004f96 <_free_r+0x46>
 8004fa0:	6811      	ldr	r1, [r2, #0]
 8004fa2:	1855      	adds	r5, r2, r1
 8004fa4:	42a5      	cmp	r5, r4
 8004fa6:	d10b      	bne.n	8004fc0 <_free_r+0x70>
 8004fa8:	6824      	ldr	r4, [r4, #0]
 8004faa:	4421      	add	r1, r4
 8004fac:	1854      	adds	r4, r2, r1
 8004fae:	42a3      	cmp	r3, r4
 8004fb0:	6011      	str	r1, [r2, #0]
 8004fb2:	d1e0      	bne.n	8004f76 <_free_r+0x26>
 8004fb4:	681c      	ldr	r4, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	6053      	str	r3, [r2, #4]
 8004fba:	4421      	add	r1, r4
 8004fbc:	6011      	str	r1, [r2, #0]
 8004fbe:	e7da      	b.n	8004f76 <_free_r+0x26>
 8004fc0:	d902      	bls.n	8004fc8 <_free_r+0x78>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	6003      	str	r3, [r0, #0]
 8004fc6:	e7d6      	b.n	8004f76 <_free_r+0x26>
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	1961      	adds	r1, r4, r5
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	bf04      	itt	eq
 8004fd0:	6819      	ldreq	r1, [r3, #0]
 8004fd2:	685b      	ldreq	r3, [r3, #4]
 8004fd4:	6063      	str	r3, [r4, #4]
 8004fd6:	bf04      	itt	eq
 8004fd8:	1949      	addeq	r1, r1, r5
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	6054      	str	r4, [r2, #4]
 8004fde:	e7ca      	b.n	8004f76 <_free_r+0x26>
 8004fe0:	b003      	add	sp, #12
 8004fe2:	bd30      	pop	{r4, r5, pc}
 8004fe4:	240002a8 	.word	0x240002a8

08004fe8 <sbrk_aligned>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	4e0e      	ldr	r6, [pc, #56]	; (8005024 <sbrk_aligned+0x3c>)
 8004fec:	460c      	mov	r4, r1
 8004fee:	6831      	ldr	r1, [r6, #0]
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	b911      	cbnz	r1, 8004ffa <sbrk_aligned+0x12>
 8004ff4:	f000 f8bc 	bl	8005170 <_sbrk_r>
 8004ff8:	6030      	str	r0, [r6, #0]
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f000 f8b7 	bl	8005170 <_sbrk_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d00a      	beq.n	800501c <sbrk_aligned+0x34>
 8005006:	1cc4      	adds	r4, r0, #3
 8005008:	f024 0403 	bic.w	r4, r4, #3
 800500c:	42a0      	cmp	r0, r4
 800500e:	d007      	beq.n	8005020 <sbrk_aligned+0x38>
 8005010:	1a21      	subs	r1, r4, r0
 8005012:	4628      	mov	r0, r5
 8005014:	f000 f8ac 	bl	8005170 <_sbrk_r>
 8005018:	3001      	adds	r0, #1
 800501a:	d101      	bne.n	8005020 <sbrk_aligned+0x38>
 800501c:	f04f 34ff 	mov.w	r4, #4294967295
 8005020:	4620      	mov	r0, r4
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	240002ac 	.word	0x240002ac

08005028 <_malloc_r>:
 8005028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800502c:	1ccd      	adds	r5, r1, #3
 800502e:	f025 0503 	bic.w	r5, r5, #3
 8005032:	3508      	adds	r5, #8
 8005034:	2d0c      	cmp	r5, #12
 8005036:	bf38      	it	cc
 8005038:	250c      	movcc	r5, #12
 800503a:	2d00      	cmp	r5, #0
 800503c:	4607      	mov	r7, r0
 800503e:	db01      	blt.n	8005044 <_malloc_r+0x1c>
 8005040:	42a9      	cmp	r1, r5
 8005042:	d905      	bls.n	8005050 <_malloc_r+0x28>
 8005044:	230c      	movs	r3, #12
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	2600      	movs	r6, #0
 800504a:	4630      	mov	r0, r6
 800504c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005050:	4e2e      	ldr	r6, [pc, #184]	; (800510c <_malloc_r+0xe4>)
 8005052:	f000 f89d 	bl	8005190 <__malloc_lock>
 8005056:	6833      	ldr	r3, [r6, #0]
 8005058:	461c      	mov	r4, r3
 800505a:	bb34      	cbnz	r4, 80050aa <_malloc_r+0x82>
 800505c:	4629      	mov	r1, r5
 800505e:	4638      	mov	r0, r7
 8005060:	f7ff ffc2 	bl	8004fe8 <sbrk_aligned>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	4604      	mov	r4, r0
 8005068:	d14d      	bne.n	8005106 <_malloc_r+0xde>
 800506a:	6834      	ldr	r4, [r6, #0]
 800506c:	4626      	mov	r6, r4
 800506e:	2e00      	cmp	r6, #0
 8005070:	d140      	bne.n	80050f4 <_malloc_r+0xcc>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	4631      	mov	r1, r6
 8005076:	4638      	mov	r0, r7
 8005078:	eb04 0803 	add.w	r8, r4, r3
 800507c:	f000 f878 	bl	8005170 <_sbrk_r>
 8005080:	4580      	cmp	r8, r0
 8005082:	d13a      	bne.n	80050fa <_malloc_r+0xd2>
 8005084:	6821      	ldr	r1, [r4, #0]
 8005086:	3503      	adds	r5, #3
 8005088:	1a6d      	subs	r5, r5, r1
 800508a:	f025 0503 	bic.w	r5, r5, #3
 800508e:	3508      	adds	r5, #8
 8005090:	2d0c      	cmp	r5, #12
 8005092:	bf38      	it	cc
 8005094:	250c      	movcc	r5, #12
 8005096:	4629      	mov	r1, r5
 8005098:	4638      	mov	r0, r7
 800509a:	f7ff ffa5 	bl	8004fe8 <sbrk_aligned>
 800509e:	3001      	adds	r0, #1
 80050a0:	d02b      	beq.n	80050fa <_malloc_r+0xd2>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	442b      	add	r3, r5
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	e00e      	b.n	80050c8 <_malloc_r+0xa0>
 80050aa:	6822      	ldr	r2, [r4, #0]
 80050ac:	1b52      	subs	r2, r2, r5
 80050ae:	d41e      	bmi.n	80050ee <_malloc_r+0xc6>
 80050b0:	2a0b      	cmp	r2, #11
 80050b2:	d916      	bls.n	80050e2 <_malloc_r+0xba>
 80050b4:	1961      	adds	r1, r4, r5
 80050b6:	42a3      	cmp	r3, r4
 80050b8:	6025      	str	r5, [r4, #0]
 80050ba:	bf18      	it	ne
 80050bc:	6059      	strne	r1, [r3, #4]
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	bf08      	it	eq
 80050c2:	6031      	streq	r1, [r6, #0]
 80050c4:	5162      	str	r2, [r4, r5]
 80050c6:	604b      	str	r3, [r1, #4]
 80050c8:	4638      	mov	r0, r7
 80050ca:	f104 060b 	add.w	r6, r4, #11
 80050ce:	f000 f865 	bl	800519c <__malloc_unlock>
 80050d2:	f026 0607 	bic.w	r6, r6, #7
 80050d6:	1d23      	adds	r3, r4, #4
 80050d8:	1af2      	subs	r2, r6, r3
 80050da:	d0b6      	beq.n	800504a <_malloc_r+0x22>
 80050dc:	1b9b      	subs	r3, r3, r6
 80050de:	50a3      	str	r3, [r4, r2]
 80050e0:	e7b3      	b.n	800504a <_malloc_r+0x22>
 80050e2:	6862      	ldr	r2, [r4, #4]
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	bf0c      	ite	eq
 80050e8:	6032      	streq	r2, [r6, #0]
 80050ea:	605a      	strne	r2, [r3, #4]
 80050ec:	e7ec      	b.n	80050c8 <_malloc_r+0xa0>
 80050ee:	4623      	mov	r3, r4
 80050f0:	6864      	ldr	r4, [r4, #4]
 80050f2:	e7b2      	b.n	800505a <_malloc_r+0x32>
 80050f4:	4634      	mov	r4, r6
 80050f6:	6876      	ldr	r6, [r6, #4]
 80050f8:	e7b9      	b.n	800506e <_malloc_r+0x46>
 80050fa:	230c      	movs	r3, #12
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	4638      	mov	r0, r7
 8005100:	f000 f84c 	bl	800519c <__malloc_unlock>
 8005104:	e7a1      	b.n	800504a <_malloc_r+0x22>
 8005106:	6025      	str	r5, [r4, #0]
 8005108:	e7de      	b.n	80050c8 <_malloc_r+0xa0>
 800510a:	bf00      	nop
 800510c:	240002a8 	.word	0x240002a8

08005110 <_realloc_r>:
 8005110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005114:	4680      	mov	r8, r0
 8005116:	4614      	mov	r4, r2
 8005118:	460e      	mov	r6, r1
 800511a:	b921      	cbnz	r1, 8005126 <_realloc_r+0x16>
 800511c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005120:	4611      	mov	r1, r2
 8005122:	f7ff bf81 	b.w	8005028 <_malloc_r>
 8005126:	b92a      	cbnz	r2, 8005134 <_realloc_r+0x24>
 8005128:	f7ff ff12 	bl	8004f50 <_free_r>
 800512c:	4625      	mov	r5, r4
 800512e:	4628      	mov	r0, r5
 8005130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005134:	f000 f838 	bl	80051a8 <_malloc_usable_size_r>
 8005138:	4284      	cmp	r4, r0
 800513a:	4607      	mov	r7, r0
 800513c:	d802      	bhi.n	8005144 <_realloc_r+0x34>
 800513e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005142:	d812      	bhi.n	800516a <_realloc_r+0x5a>
 8005144:	4621      	mov	r1, r4
 8005146:	4640      	mov	r0, r8
 8005148:	f7ff ff6e 	bl	8005028 <_malloc_r>
 800514c:	4605      	mov	r5, r0
 800514e:	2800      	cmp	r0, #0
 8005150:	d0ed      	beq.n	800512e <_realloc_r+0x1e>
 8005152:	42bc      	cmp	r4, r7
 8005154:	4622      	mov	r2, r4
 8005156:	4631      	mov	r1, r6
 8005158:	bf28      	it	cs
 800515a:	463a      	movcs	r2, r7
 800515c:	f7ff fbb8 	bl	80048d0 <memcpy>
 8005160:	4631      	mov	r1, r6
 8005162:	4640      	mov	r0, r8
 8005164:	f7ff fef4 	bl	8004f50 <_free_r>
 8005168:	e7e1      	b.n	800512e <_realloc_r+0x1e>
 800516a:	4635      	mov	r5, r6
 800516c:	e7df      	b.n	800512e <_realloc_r+0x1e>
	...

08005170 <_sbrk_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4d06      	ldr	r5, [pc, #24]	; (800518c <_sbrk_r+0x1c>)
 8005174:	2300      	movs	r3, #0
 8005176:	4604      	mov	r4, r0
 8005178:	4608      	mov	r0, r1
 800517a:	602b      	str	r3, [r5, #0]
 800517c:	f7fb fd76 	bl	8000c6c <_sbrk>
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	d102      	bne.n	800518a <_sbrk_r+0x1a>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	b103      	cbz	r3, 800518a <_sbrk_r+0x1a>
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	bd38      	pop	{r3, r4, r5, pc}
 800518c:	240002b0 	.word	0x240002b0

08005190 <__malloc_lock>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__malloc_lock+0x8>)
 8005192:	f000 b811 	b.w	80051b8 <__retarget_lock_acquire_recursive>
 8005196:	bf00      	nop
 8005198:	240002b4 	.word	0x240002b4

0800519c <__malloc_unlock>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__malloc_unlock+0x8>)
 800519e:	f000 b80c 	b.w	80051ba <__retarget_lock_release_recursive>
 80051a2:	bf00      	nop
 80051a4:	240002b4 	.word	0x240002b4

080051a8 <_malloc_usable_size_r>:
 80051a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ac:	1f18      	subs	r0, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfbc      	itt	lt
 80051b2:	580b      	ldrlt	r3, [r1, r0]
 80051b4:	18c0      	addlt	r0, r0, r3
 80051b6:	4770      	bx	lr

080051b8 <__retarget_lock_acquire_recursive>:
 80051b8:	4770      	bx	lr

080051ba <__retarget_lock_release_recursive>:
 80051ba:	4770      	bx	lr

080051bc <_init>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr

080051c8 <_fini>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	bf00      	nop
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr
