
Template_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f8  080053f8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080053f8  080053f8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053f8  080053f8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08005400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad4  24000078  08005478  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004b4c  08005478  00024b4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae63  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342f  00000000  00000000  0003af09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b3e3  00000000  00000000  00040b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017346  00000000  00000000  0007bf13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186463  00000000  00000000  00093259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002196bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f0  00000000  00000000  0021970c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005328 	.word	0x08005328

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08005328 	.word	0x08005328

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <SystemInit+0xfc>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <SystemInit+0xfc>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b39      	ldr	r3, [pc, #228]	; (80003dc <SystemInit+0xfc>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a38      	ldr	r2, [pc, #224]	; (80003dc <SystemInit+0xfc>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <SystemInit+0x100>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <SystemInit+0x100>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a32      	ldr	r2, [pc, #200]	; (80003e0 <SystemInit+0x100>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b31      	ldr	r3, [pc, #196]	; (80003e4 <SystemInit+0x104>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a30      	ldr	r2, [pc, #192]	; (80003e4 <SystemInit+0x104>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <SystemInit+0x104>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <SystemInit+0x104>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492c      	ldr	r1, [pc, #176]	; (80003e4 <SystemInit+0x104>)
 8000334:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <SystemInit+0x108>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <SystemInit+0x100>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <SystemInit+0x100>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a24      	ldr	r2, [pc, #144]	; (80003e0 <SystemInit+0x100>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x104>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <SystemInit+0x104>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x104>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <SystemInit+0x104>)
 800036a:	4a20      	ldr	r2, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x104>)
 8000370:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <SystemInit+0x110>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <SystemInit+0x104>)
 8000376:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <SystemInit+0x114>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x104>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <SystemInit+0x104>)
 8000382:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <SystemInit+0x114>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x104>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <SystemInit+0x104>)
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <SystemInit+0x114>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x104>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <SystemInit+0x104>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <SystemInit+0x104>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <SystemInit+0x104>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <SystemInit+0x118>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <SystemInit+0x118>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <SystemInit+0x11c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <SystemInit+0x120>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <SystemInit+0x124>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <SystemInit+0x128>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <MX_FREERTOS_Init+0x18>)
 8000412:	2100      	movs	r1, #0
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <MX_FREERTOS_Init+0x1c>)
 8000416:	f002 f957 	bl	80026c8 <osThreadNew>
 800041a:	4603      	mov	r3, r0
 800041c:	4a03      	ldr	r2, [pc, #12]	; (800042c <MX_FREERTOS_Init+0x20>)
 800041e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	08005374 	.word	0x08005374
 8000428:	08000431 	.word	0x08000431
 800042c:	24000094 	.word	0x24000094

08000430 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f002 f9d7 	bl	80027ec <osDelay>
 800043e:	e7fb      	b.n	8000438 <StartDefaultTask+0x8>

08000440 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_GPIO_Init+0x30>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a08      	ldr	r2, [pc, #32]	; (8000470 <MX_GPIO_Init+0x30>)
 800044e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_GPIO_Init+0x30>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	58024400 	.word	0x58024400

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800047a:	4b58      	ldr	r3, [pc, #352]	; (80005dc <main+0x168>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000492:	4b52      	ldr	r3, [pc, #328]	; (80005dc <main+0x168>)
 8000494:	2200      	movs	r2, #0
 8000496:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800049a:	f3bf 8f4f 	dsb	sy
}
 800049e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
}
 80004a4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004a6:	4b4d      	ldr	r3, [pc, #308]	; (80005dc <main+0x168>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a4c      	ldr	r2, [pc, #304]	; (80005dc <main+0x168>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004b2:	f3bf 8f4f 	dsb	sy
}
 80004b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004b8:	f3bf 8f6f 	isb	sy
}
 80004bc:	e000      	b.n	80004c0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004be:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004c0:	4b46      	ldr	r3, [pc, #280]	; (80005dc <main+0x168>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d138      	bne.n	800053e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004cc:	4b43      	ldr	r3, [pc, #268]	; (80005dc <main+0x168>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004da:	4b40      	ldr	r3, [pc, #256]	; (80005dc <main+0x168>)
 80004dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004e0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	0b5b      	lsrs	r3, r3, #13
 80004e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004ea:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004f4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	015a      	lsls	r2, r3, #5
 80004fa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004fe:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000504:	4935      	ldr	r1, [pc, #212]	; (80005dc <main+0x168>)
 8000506:	4313      	orrs	r3, r2
 8000508:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d1ef      	bne.n	80004f6 <main+0x82>
    } while(sets-- != 0U);
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	60fa      	str	r2, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1e5      	bne.n	80004ec <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000526:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <main+0x168>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <main+0x168>)
 800052c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000530:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000532:	f3bf 8f4f 	dsb	sy
}
 8000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
}
 800053c:	e000      	b.n	8000540 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800053e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000544:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000546:	bf00      	nop
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <main+0x16c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d004      	beq.n	800055e <main+0xea>
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	617a      	str	r2, [r7, #20]
 800055a:	2b00      	cmp	r3, #0
 800055c:	dcf4      	bgt.n	8000548 <main+0xd4>
  if ( timeout < 0 )
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b00      	cmp	r3, #0
 8000562:	da01      	bge.n	8000568 <main+0xf4>
  {
  Error_Handler();
 8000564:	f000 f8ca 	bl	80006fc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fa04 	bl	8000974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f83a 	bl	80005e4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <main+0x16c>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000576:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <main+0x16c>)
 8000578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <main+0x16c>)
 8000582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 fb38 	bl	8000c04 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fb4e 	bl	8000c38 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80005a2:	bf00      	nop
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <main+0x16c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d104      	bne.n	80005ba <main+0x146>
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	1e5a      	subs	r2, r3, #1
 80005b4:	617a      	str	r2, [r7, #20]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	dcf4      	bgt.n	80005a4 <main+0x130>
if ( timeout < 0 )
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da01      	bge.n	80005c4 <main+0x150>
{
Error_Handler();
 80005c0:	f000 f89c 	bl	80006fc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f7ff ff3c 	bl	8000440 <MX_GPIO_Init>
  MX_TIM12_Init();
 80005c8:	f000 f948 	bl	800085c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80005cc:	f002 f832 	bl	8002634 <osKernelInitialize>
  MX_FREERTOS_Init();
 80005d0:	f7ff ff1c 	bl	800040c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80005d4:	f002 f852 	bl	800267c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x164>
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	58024400 	.word	0x58024400

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09c      	sub	sp, #112	; 0x70
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ee:	224c      	movs	r2, #76	; 0x4c
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fdce 	bl	8005194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2220      	movs	r2, #32
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fdc8 	bl	8005194 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000604:	2004      	movs	r0, #4
 8000606:	f000 fb2b 	bl	8000c60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b30      	ldr	r3, [pc, #192]	; (80006d0 <SystemClock_Config+0xec>)
 8000610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000612:	4a2f      	ldr	r2, [pc, #188]	; (80006d0 <SystemClock_Config+0xec>)
 8000614:	f023 0301 	bic.w	r3, r3, #1
 8000618:	62d3      	str	r3, [r2, #44]	; 0x2c
 800061a:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <SystemClock_Config+0xec>)
 800061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <SystemClock_Config+0xf0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <SystemClock_Config+0xf0>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xf0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800063c:	bf00      	nop
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xf0>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800064a:	d1f8      	bne.n	800063e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	2302      	movs	r3, #2
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800065e:	2305      	movs	r3, #5
 8000660:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000662:	23a0      	movs	r3, #160	; 0xa0
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066a:	2304      	movs	r3, #4
 800066c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000672:	2308      	movs	r3, #8
 8000674:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000676:	2300      	movs	r3, #0
 8000678:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fb46 	bl	8000d14 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800068e:	f000 f835 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	233f      	movs	r3, #63	; 0x3f
 8000694:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2303      	movs	r3, #3
 8000698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800069e:	2308      	movs	r3, #8
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006a2:	2340      	movs	r3, #64	; 0x40
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006a6:	2340      	movs	r3, #64	; 0x40
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 ff59 	bl	8001570 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006c4:	f000 f81a 	bl	80006fc <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	; 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58000400 	.word	0x58000400
 80006d4:	58024800 	.word	0x58024800

080006d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d101      	bne.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ea:	f000 f97f 	bl	80009ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40014800 	.word	0x40014800

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x38>)
 8000710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000714:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <HAL_MspInit+0x38>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_MspInit+0x38>)
 8000720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	210f      	movs	r1, #15
 8000730:	f06f 0001 	mvn.w	r0, #1
 8000734:	f000 fa3e 	bl	8000bb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	58024400 	.word	0x58024400

08000744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b0f      	cmp	r3, #15
 8000750:	d844      	bhi.n	80007dc <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8000752:	2200      	movs	r2, #0
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	2076      	movs	r0, #118	; 0x76
 8000758:	f000 fa2c 	bl	8000bb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800075c:	2076      	movs	r0, #118	; 0x76
 800075e:	f000 fa43 	bl	8000be8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000762:	4a24      	ldr	r2, [pc, #144]	; (80007f4 <HAL_InitTick+0xb0>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <HAL_InitTick+0xb4>)
 800076a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800076e:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <HAL_InitTick+0xb4>)
 8000770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000774:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <HAL_InitTick+0xb4>)
 800077a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800077e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000786:	f107 020c 	add.w	r2, r7, #12
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f001 fa63 	bl	8001c5c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000796:	f001 fa4b 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 800079a:	4603      	mov	r3, r0
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a2:	4a16      	ldr	r2, [pc, #88]	; (80007fc <HAL_InitTick+0xb8>)
 80007a4:	fba2 2303 	umull	r2, r3, r2, r3
 80007a8:	0c9b      	lsrs	r3, r3, #18
 80007aa:	3b01      	subs	r3, #1
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_InitTick+0xbc>)
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <HAL_InitTick+0xc0>)
 80007b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0xbc>)
 80007b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ba:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <HAL_InitTick+0xbc>)
 80007be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_InitTick+0xbc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_InitTick+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <HAL_InitTick+0xbc>)
 80007d0:	f001 fa86 	bl	8001ce0 <HAL_TIM_Base_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d107      	bne.n	80007ea <HAL_InitTick+0xa6>
 80007da:	e001      	b.n	80007e0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
 80007de:	e005      	b.n	80007ec <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <HAL_InitTick+0xbc>)
 80007e2:	f001 fad5 	bl	8001d90 <HAL_TIM_Base_Start_IT>
 80007e6:	4603      	mov	r3, r0
 80007e8:	e000      	b.n	80007ec <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3738      	adds	r7, #56	; 0x38
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000008 	.word	0x24000008
 80007f8:	58024400 	.word	0x58024400
 80007fc:	431bde83 	.word	0x431bde83
 8000800:	24000098 	.word	0x24000098
 8000804:	40014800 	.word	0x40014800

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800083a:	f001 fb21 	bl	8001e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	240000e4 	.word	0x240000e4

08000848 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800084c:	4802      	ldr	r0, [pc, #8]	; (8000858 <TIM17_IRQHandler+0x10>)
 800084e:	f001 fb17 	bl	8001e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	24000098 	.word	0x24000098

0800085c <MX_TIM12_Init>:

TIM_HandleTypeDef htim12;

/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_TIM12_Init+0x6c>)
 8000870:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_TIM12_Init+0x70>)
 8000872:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_TIM12_Init+0x6c>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_TIM12_Init+0x6c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_TIM12_Init+0x6c>)
 8000882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000886:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_TIM12_Init+0x6c>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_TIM12_Init+0x6c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_TIM12_Init+0x6c>)
 8000896:	f001 fa23 	bl	8001ce0 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80008a0:	f7ff ff2c 	bl	80006fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_TIM12_Init+0x6c>)
 80008b0:	f001 fc06 	bl	80020c0 <HAL_TIM_ConfigClockSource>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80008ba:	f7ff ff1f 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	240000e4 	.word	0x240000e4
 80008cc:	40001800 	.word	0x40001800

080008d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_TIM_Base_MspInit+0x48>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d116      	bne.n	8000910 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_TIM_Base_MspInit+0x4c>)
 80008e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <HAL_TIM_Base_MspInit+0x4c>)
 80008ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_TIM_Base_MspInit+0x4c>)
 80008f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2105      	movs	r1, #5
 8000904:	202b      	movs	r0, #43	; 0x2b
 8000906:	f000 f955 	bl	8000bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800090a:	202b      	movs	r0, #43	; 0x2b
 800090c:	f000 f96c 	bl	8000be8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40001800 	.word	0x40001800
 800091c:	58024400 	.word	0x58024400

08000920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000958 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000924:	f7ff fcdc 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	; (8000960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094e:	f004 fbed 	bl	800512c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000952:	f7ff fd8f 	bl	8000474 <main>
  bx  lr
 8000956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800095c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000960:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000964:	08005400 	.word	0x08005400
  ldr r2, =_sbss
 8000968:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800096c:	24004b4c 	.word	0x24004b4c

08000970 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC3_IRQHandler>
	...

08000974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097a:	2003      	movs	r0, #3
 800097c:	f000 f90f 	bl	8000b9e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000980:	f000 ffac 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 8000984:	4602      	mov	r2, r0
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_Init+0x68>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	4913      	ldr	r1, [pc, #76]	; (80009e0 <HAL_Init+0x6c>)
 8000992:	5ccb      	ldrb	r3, [r1, r3]
 8000994:	f003 031f 	and.w	r3, r3, #31
 8000998:	fa22 f303 	lsr.w	r3, r2, r3
 800099c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_Init+0x68>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_Init+0x6c>)
 80009a8:	5cd3      	ldrb	r3, [r2, r3]
 80009aa:	f003 031f 	and.w	r3, r3, #31
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	fa22 f303 	lsr.w	r3, r2, r3
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <HAL_Init+0x70>)
 80009b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009b8:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <HAL_Init+0x74>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009be:	200f      	movs	r0, #15
 80009c0:	f7ff fec0 	bl	8000744 <HAL_InitTick>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e002      	b.n	80009d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009ce:	f7ff fe9b 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58024400 	.word	0x58024400
 80009e0:	08005364 	.word	0x08005364
 80009e4:	24000004 	.word	0x24000004
 80009e8:	24000000 	.word	0x24000000

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x20>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_IncTick+0x24>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2400000c 	.word	0x2400000c
 8000a10:	24000130 	.word	0x24000130

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	24000130 	.word	0x24000130

08000a2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetREVID+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	0c1b      	lsrs	r3, r3, #16
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	5c001000 	.word	0x5c001000

08000a44 <__NVIC_SetPriorityGrouping>:
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <__NVIC_SetPriorityGrouping+0x40>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x40>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	05fa0000 	.word	0x05fa0000

08000a8c <__NVIC_GetPriorityGrouping>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <__NVIC_EnableIRQ+0x38>)
 8000ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ff4c 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc2:	f7ff ff63 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000bc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	68b9      	ldr	r1, [r7, #8]
 8000bcc:	6978      	ldr	r0, [r7, #20]
 8000bce:	f7ff ffb3 	bl	8000b38 <NVIC_EncodePriority>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff82 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff56 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000c0c:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_HSEM_FastTake+0x2c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3320      	adds	r3, #32
 8000c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_HSEM_FastTake+0x30>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d101      	bne.n	8000c20 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e000      	b.n	8000c22 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	58026400 	.word	0x58026400
 8000c34:	80000300 	.word	0x80000300

08000c38 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000c42:	4906      	ldr	r1, [pc, #24]	; (8000c5c <HAL_HSEM_Release+0x24>)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	58026400 	.word	0x58026400

08000c60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	2b06      	cmp	r3, #6
 8000c72:	d00a      	beq.n	8000c8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d001      	beq.n	8000c86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e040      	b.n	8000d08 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e03e      	b.n	8000d08 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000c92:	491f      	ldr	r1, [pc, #124]	; (8000d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000c9a:	f7ff febb 	bl	8000a14 <HAL_GetTick>
 8000c9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ca0:	e009      	b.n	8000cb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000ca2:	f7ff feb7 	bl	8000a14 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cb0:	d901      	bls.n	8000cb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e028      	b.n	8000d08 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc2:	d1ee      	bne.n	8000ca2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b1e      	cmp	r3, #30
 8000cc8:	d008      	beq.n	8000cdc <HAL_PWREx_ConfigSupply+0x7c>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8000cce:	d005      	beq.n	8000cdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b1d      	cmp	r3, #29
 8000cd4:	d002      	beq.n	8000cdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b2d      	cmp	r3, #45	; 0x2d
 8000cda:	d114      	bne.n	8000d06 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000cdc:	f7ff fe9a 	bl	8000a14 <HAL_GetTick>
 8000ce0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000ce2:	e009      	b.n	8000cf8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000ce4:	f7ff fe96 	bl	8000a14 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cf2:	d901      	bls.n	8000cf8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e007      	b.n	8000d08 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d04:	d1ee      	bne.n	8000ce4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	58024800 	.word	0x58024800

08000d14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f000 bc1d 	b.w	8001562 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 8087 	beq.w	8000e44 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d36:	4b99      	ldr	r3, [pc, #612]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d40:	4b96      	ldr	r3, [pc, #600]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d48:	2b10      	cmp	r3, #16
 8000d4a:	d007      	beq.n	8000d5c <HAL_RCC_OscConfig+0x48>
 8000d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4e:	2b18      	cmp	r3, #24
 8000d50:	d110      	bne.n	8000d74 <HAL_RCC_OscConfig+0x60>
 8000d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d10b      	bne.n	8000d74 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	4b8f      	ldr	r3, [pc, #572]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d06c      	beq.n	8000e42 <HAL_RCC_OscConfig+0x12e>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d168      	bne.n	8000e42 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e3f6      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7c:	d106      	bne.n	8000d8c <HAL_RCC_OscConfig+0x78>
 8000d7e:	4b87      	ldr	r3, [pc, #540]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a86      	ldr	r2, [pc, #536]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e02e      	b.n	8000dea <HAL_RCC_OscConfig+0xd6>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10c      	bne.n	8000dae <HAL_RCC_OscConfig+0x9a>
 8000d94:	4b81      	ldr	r3, [pc, #516]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a80      	ldr	r2, [pc, #512]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b7e      	ldr	r3, [pc, #504]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a7d      	ldr	r2, [pc, #500]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	e01d      	b.n	8000dea <HAL_RCC_OscConfig+0xd6>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db6:	d10c      	bne.n	8000dd2 <HAL_RCC_OscConfig+0xbe>
 8000db8:	4b78      	ldr	r3, [pc, #480]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a77      	ldr	r2, [pc, #476]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b75      	ldr	r3, [pc, #468]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a74      	ldr	r2, [pc, #464]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e00b      	b.n	8000dea <HAL_RCC_OscConfig+0xd6>
 8000dd2:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a71      	ldr	r2, [pc, #452]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b6f      	ldr	r3, [pc, #444]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a6e      	ldr	r2, [pc, #440]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d013      	beq.n	8000e1a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df2:	f7ff fe0f 	bl	8000a14 <HAL_GetTick>
 8000df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dfa:	f7ff fe0b 	bl	8000a14 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b64      	cmp	r3, #100	; 0x64
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e3aa      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e0c:	4b63      	ldr	r3, [pc, #396]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f0      	beq.n	8000dfa <HAL_RCC_OscConfig+0xe6>
 8000e18:	e014      	b.n	8000e44 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fdfb 	bl	8000a14 <HAL_GetTick>
 8000e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e22:	f7ff fdf7 	bl	8000a14 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b64      	cmp	r3, #100	; 0x64
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e396      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e34:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f0      	bne.n	8000e22 <HAL_RCC_OscConfig+0x10e>
 8000e40:	e000      	b.n	8000e44 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80cb 	beq.w	8000fe8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e52:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e5a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e5c:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d007      	beq.n	8000e78 <HAL_RCC_OscConfig+0x164>
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	2b18      	cmp	r3, #24
 8000e6c:	d156      	bne.n	8000f1c <HAL_RCC_OscConfig+0x208>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d151      	bne.n	8000f1c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e78:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d005      	beq.n	8000e90 <HAL_RCC_OscConfig+0x17c>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e368      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e90:	4b42      	ldr	r3, [pc, #264]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f023 0219 	bic.w	r2, r3, #25
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	493f      	ldr	r1, [pc, #252]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000ea2:	f7ff fdb7 	bl	8000a14 <HAL_GetTick>
 8000ea6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fdb3 	bl	8000a14 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e352      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ebc:	4b37      	ldr	r3, [pc, #220]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec8:	f7ff fdb0 	bl	8000a2c <HAL_GetREVID>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f241 0203 	movw	r2, #4099	; 0x1003
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d817      	bhi.n	8000f06 <HAL_RCC_OscConfig+0x1f2>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	2b40      	cmp	r3, #64	; 0x40
 8000edc:	d108      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x1dc>
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000ee6:	4a2d      	ldr	r2, [pc, #180]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eee:	e07b      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	031b      	lsls	r3, r3, #12
 8000efe:	4927      	ldr	r1, [pc, #156]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f04:	e070      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	061b      	lsls	r3, r3, #24
 8000f14:	4921      	ldr	r1, [pc, #132]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f1a:	e065      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d048      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f023 0219 	bic.w	r2, r3, #25
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	491a      	ldr	r1, [pc, #104]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f36:	f7ff fd6d 	bl	8000a14 <HAL_GetTick>
 8000f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fd69 	bl	8000a14 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e308      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5c:	f7ff fd66 	bl	8000a2c <HAL_GetREVID>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d81a      	bhi.n	8000fa0 <HAL_RCC_OscConfig+0x28c>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b40      	cmp	r3, #64	; 0x40
 8000f70:	d108      	bne.n	8000f84 <HAL_RCC_OscConfig+0x270>
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	6053      	str	r3, [r2, #4]
 8000f82:	e031      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2d4>
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	031b      	lsls	r3, r3, #12
 8000f92:	4902      	ldr	r1, [pc, #8]	; (8000f9c <HAL_RCC_OscConfig+0x288>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
 8000f98:	e026      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2d4>
 8000f9a:	bf00      	nop
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	4b9a      	ldr	r3, [pc, #616]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	061b      	lsls	r3, r3, #24
 8000fae:	4997      	ldr	r1, [pc, #604]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
 8000fb4:	e018      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb6:	4b95      	ldr	r3, [pc, #596]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a94      	ldr	r2, [pc, #592]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fd27 	bl	8000a14 <HAL_GetTick>
 8000fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fca:	f7ff fd23 	bl	8000a14 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e2c2      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fdc:	4b8b      	ldr	r3, [pc, #556]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f0      	bne.n	8000fca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a9 	beq.w	8001148 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ff6:	4b85      	ldr	r3, [pc, #532]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ffe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001000:	4b82      	ldr	r3, [pc, #520]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2b08      	cmp	r3, #8
 800100a:	d007      	beq.n	800101c <HAL_RCC_OscConfig+0x308>
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2b18      	cmp	r3, #24
 8001010:	d13a      	bne.n	8001088 <HAL_RCC_OscConfig+0x374>
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d135      	bne.n	8001088 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800101c:	4b7b      	ldr	r3, [pc, #492]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <HAL_RCC_OscConfig+0x320>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	2b80      	cmp	r3, #128	; 0x80
 800102e:	d001      	beq.n	8001034 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e296      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001034:	f7ff fcfa 	bl	8000a2c <HAL_GetREVID>
 8001038:	4603      	mov	r3, r0
 800103a:	f241 0203 	movw	r2, #4099	; 0x1003
 800103e:	4293      	cmp	r3, r2
 8001040:	d817      	bhi.n	8001072 <HAL_RCC_OscConfig+0x35e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	2b20      	cmp	r3, #32
 8001048:	d108      	bne.n	800105c <HAL_RCC_OscConfig+0x348>
 800104a:	4b70      	ldr	r3, [pc, #448]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001052:	4a6e      	ldr	r2, [pc, #440]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001054:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001058:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800105a:	e075      	b.n	8001148 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800105c:	4b6b      	ldr	r3, [pc, #428]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	069b      	lsls	r3, r3, #26
 800106a:	4968      	ldr	r1, [pc, #416]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001070:	e06a      	b.n	8001148 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001072:	4b66      	ldr	r3, [pc, #408]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	061b      	lsls	r3, r3, #24
 8001080:	4962      	ldr	r1, [pc, #392]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001082:	4313      	orrs	r3, r2
 8001084:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001086:	e05f      	b.n	8001148 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d042      	beq.n	8001116 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001090:	4b5e      	ldr	r3, [pc, #376]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a5d      	ldr	r2, [pc, #372]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fcba 	bl	8000a14 <HAL_GetTick>
 80010a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80010a4:	f7ff fcb6 	bl	8000a14 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e255      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80010b6:	4b55      	ldr	r3, [pc, #340]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010c2:	f7ff fcb3 	bl	8000a2c <HAL_GetREVID>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d817      	bhi.n	8001100 <HAL_RCC_OscConfig+0x3ec>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d108      	bne.n	80010ea <HAL_RCC_OscConfig+0x3d6>
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80010e0:	4a4a      	ldr	r2, [pc, #296]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 80010e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010e6:	6053      	str	r3, [r2, #4]
 80010e8:	e02e      	b.n	8001148 <HAL_RCC_OscConfig+0x434>
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	069b      	lsls	r3, r3, #26
 80010f8:	4944      	ldr	r1, [pc, #272]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	604b      	str	r3, [r1, #4]
 80010fe:	e023      	b.n	8001148 <HAL_RCC_OscConfig+0x434>
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	061b      	lsls	r3, r3, #24
 800110e:	493f      	ldr	r1, [pc, #252]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001110:	4313      	orrs	r3, r2
 8001112:	60cb      	str	r3, [r1, #12]
 8001114:	e018      	b.n	8001148 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a3c      	ldr	r2, [pc, #240]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 800111c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001122:	f7ff fc77 	bl	8000a14 <HAL_GetTick>
 8001126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800112a:	f7ff fc73 	bl	8000a14 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e212      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800113c:	4b33      	ldr	r3, [pc, #204]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f0      	bne.n	800112a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d036      	beq.n	80011c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d019      	beq.n	8001190 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 800115e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001160:	4a2a      	ldr	r2, [pc, #168]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fc54 	bl	8000a14 <HAL_GetTick>
 800116c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fc50 	bl	8000a14 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1ef      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x45c>
 800118e:	e018      	b.n	80011c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff fc3a 	bl	8000a14 <HAL_GetTick>
 80011a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fc36 	bl	8000a14 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1d5      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 80011b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d039      	beq.n	8001242 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01c      	beq.n	8001210 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 80011dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fc17 	bl	8000a14 <HAL_GetTick>
 80011e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80011ea:	f7ff fc13 	bl	8000a14 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e1b2      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_RCC_OscConfig+0x4f8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x4d6>
 8001208:	e01b      	b.n	8001242 <HAL_RCC_OscConfig+0x52e>
 800120a:	bf00      	nop
 800120c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001210:	4b9b      	ldr	r3, [pc, #620]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a9a      	ldr	r2, [pc, #616]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800121a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800121c:	f7ff fbfa 	bl	8000a14 <HAL_GetTick>
 8001220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001224:	f7ff fbf6 	bl	8000a14 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e195      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001236:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8081 	beq.w	8001352 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001250:	4b8c      	ldr	r3, [pc, #560]	; (8001484 <HAL_RCC_OscConfig+0x770>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a8b      	ldr	r2, [pc, #556]	; (8001484 <HAL_RCC_OscConfig+0x770>)
 8001256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800125c:	f7ff fbda 	bl	8000a14 <HAL_GetTick>
 8001260:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001264:	f7ff fbd6 	bl	8000a14 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e175      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001276:	4b83      	ldr	r3, [pc, #524]	; (8001484 <HAL_RCC_OscConfig+0x770>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d106      	bne.n	8001298 <HAL_RCC_OscConfig+0x584>
 800128a:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128e:	4a7c      	ldr	r2, [pc, #496]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6713      	str	r3, [r2, #112]	; 0x70
 8001296:	e02d      	b.n	80012f4 <HAL_RCC_OscConfig+0x5e0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10c      	bne.n	80012ba <HAL_RCC_OscConfig+0x5a6>
 80012a0:	4b77      	ldr	r3, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a76      	ldr	r2, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
 80012ac:	4b74      	ldr	r3, [pc, #464]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b0:	4a73      	ldr	r2, [pc, #460]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012b2:	f023 0304 	bic.w	r3, r3, #4
 80012b6:	6713      	str	r3, [r2, #112]	; 0x70
 80012b8:	e01c      	b.n	80012f4 <HAL_RCC_OscConfig+0x5e0>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x5c8>
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6713      	str	r3, [r2, #112]	; 0x70
 80012ce:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d2:	4a6b      	ldr	r2, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6713      	str	r3, [r2, #112]	; 0x70
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0x5e0>
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e0:	4a67      	ldr	r2, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	6713      	str	r3, [r2, #112]	; 0x70
 80012e8:	4b65      	ldr	r3, [pc, #404]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a64      	ldr	r2, [pc, #400]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80012ee:	f023 0304 	bic.w	r3, r3, #4
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d015      	beq.n	8001328 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff fb8a 	bl	8000a14 <HAL_GetTick>
 8001300:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff fb86 	bl	8000a14 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e123      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800131a:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0ee      	beq.n	8001304 <HAL_RCC_OscConfig+0x5f0>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001328:	f7ff fb74 	bl	8000a14 <HAL_GetTick>
 800132c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800132e:	e00a      	b.n	8001346 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001330:	f7ff fb70 	bl	8000a14 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f241 3288 	movw	r2, #5000	; 0x1388
 800133e:	4293      	cmp	r3, r2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e10d      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001346:	4b4e      	ldr	r3, [pc, #312]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ee      	bne.n	8001330 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8102 	beq.w	8001560 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800135c:	4b48      	ldr	r3, [pc, #288]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001364:	2b18      	cmp	r3, #24
 8001366:	f000 80bd 	beq.w	80014e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	2b02      	cmp	r3, #2
 8001370:	f040 809e 	bne.w	80014b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001374:	4b42      	ldr	r3, [pc, #264]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a41      	ldr	r2, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 800137a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800137e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fb48 	bl	8000a14 <HAL_GetTick>
 8001384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff fb44 	bl	8000a14 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e0e3      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80013a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013aa:	4b37      	ldr	r3, [pc, #220]	; (8001488 <HAL_RCC_OscConfig+0x774>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	430a      	orrs	r2, r1
 80013ba:	4931      	ldr	r1, [pc, #196]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	628b      	str	r3, [r1, #40]	; 0x28
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	3b01      	subs	r3, #1
 80013c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ce:	3b01      	subs	r3, #1
 80013d0:	025b      	lsls	r3, r3, #9
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	3b01      	subs	r3, #1
 80013dc:	041b      	lsls	r3, r3, #16
 80013de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	3b01      	subs	r3, #1
 80013ea:	061b      	lsls	r3, r3, #24
 80013ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80013f0:	4923      	ldr	r1, [pc, #140]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	4a21      	ldr	r2, [pc, #132]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x778>)
 8001408:	4013      	ands	r3, r2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800140e:	00d2      	lsls	r2, r2, #3
 8001410:	491b      	ldr	r1, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001412:	4313      	orrs	r3, r2
 8001414:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	f023 020c 	bic.w	r2, r3, #12
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4917      	ldr	r1, [pc, #92]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001424:	4313      	orrs	r3, r2
 8001426:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	f023 0202 	bic.w	r2, r3, #2
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	4912      	ldr	r1, [pc, #72]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001436:	4313      	orrs	r3, r2
 8001438:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_RCC_OscConfig+0x76c>)
 8001470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff facd 	bl	8000a14 <HAL_GetTick>
 800147a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800147c:	e011      	b.n	80014a2 <HAL_RCC_OscConfig+0x78e>
 800147e:	bf00      	nop
 8001480:	58024400 	.word	0x58024400
 8001484:	58024800 	.word	0x58024800
 8001488:	fffffc0c 	.word	0xfffffc0c
 800148c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fac0 	bl	8000a14 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e05f      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014a2:	4b32      	ldr	r3, [pc, #200]	; (800156c <HAL_RCC_OscConfig+0x858>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x77c>
 80014ae:	e057      	b.n	8001560 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b0:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_RCC_OscConfig+0x858>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2d      	ldr	r2, [pc, #180]	; (800156c <HAL_RCC_OscConfig+0x858>)
 80014b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff faaa 	bl	8000a14 <HAL_GetTick>
 80014c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff faa6 	bl	8000a14 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e045      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_RCC_OscConfig+0x858>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x7b0>
 80014e2:	e03d      	b.n	8001560 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <HAL_RCC_OscConfig+0x858>)
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_RCC_OscConfig+0x858>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d031      	beq.n	800155c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f003 0203 	and.w	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d12a      	bne.n	800155c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d122      	bne.n	800155c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d11a      	bne.n	800155c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	0a5b      	lsrs	r3, r3, #9
 800152a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d111      	bne.n	800155c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	0c1b      	lsrs	r3, r3, #16
 800153c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001544:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d108      	bne.n	800155c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	0e1b      	lsrs	r3, r3, #24
 800154e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001556:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3730      	adds	r7, #48	; 0x30
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	58024400 	.word	0x58024400

08001570 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e19c      	b.n	80018be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b8a      	ldr	r3, [pc, #552]	; (80017b0 <HAL_RCC_ClockConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d910      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b87      	ldr	r3, [pc, #540]	; (80017b0 <HAL_RCC_ClockConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 020f 	bic.w	r2, r3, #15
 800159a:	4985      	ldr	r1, [pc, #532]	; (80017b0 <HAL_RCC_ClockConfig+0x240>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b83      	ldr	r3, [pc, #524]	; (80017b0 <HAL_RCC_ClockConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e184      	b.n	80018be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d010      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d908      	bls.n	80015e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80015d0:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4975      	ldr	r1, [pc, #468]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d010      	beq.n	8001610 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d908      	bls.n	8001610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80015fe:	4b6d      	ldr	r3, [pc, #436]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	496a      	ldr	r1, [pc, #424]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 800160c:	4313      	orrs	r3, r2
 800160e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	d010      	beq.n	800163e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	4b64      	ldr	r3, [pc, #400]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001628:	429a      	cmp	r2, r3
 800162a:	d908      	bls.n	800163e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800162c:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	495e      	ldr	r1, [pc, #376]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 800163a:	4313      	orrs	r3, r2
 800163c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	2b00      	cmp	r3, #0
 8001648:	d010      	beq.n	800166c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001656:	429a      	cmp	r2, r3
 8001658:	d908      	bls.n	800166c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800165a:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4953      	ldr	r1, [pc, #332]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001668:	4313      	orrs	r3, r2
 800166a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d010      	beq.n	800169a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	429a      	cmp	r2, r3
 8001686:	d908      	bls.n	800169a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001688:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f023 020f 	bic.w	r2, r3, #15
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4947      	ldr	r1, [pc, #284]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001696:	4313      	orrs	r3, r2
 8001698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d055      	beq.n	8001752 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4940      	ldr	r1, [pc, #256]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c0:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0f6      	b.n	80018be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d107      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d115      	bne.n	8001710 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0ea      	b.n	80018be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d109      	bne.n	8001710 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0de      	b.n	80018be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001700:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0d6      	b.n	80018be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f023 0207 	bic.w	r2, r3, #7
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4925      	ldr	r1, [pc, #148]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 800171e:	4313      	orrs	r3, r2
 8001720:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001722:	f7ff f977 	bl	8000a14 <HAL_GetTick>
 8001726:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001728:	e00a      	b.n	8001740 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172a:	f7ff f973 	bl	8000a14 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0be      	b.n	80018be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	429a      	cmp	r2, r3
 8001750:	d1eb      	bne.n	800172a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d010      	beq.n	8001780 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	429a      	cmp	r2, r3
 800176c:	d208      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f023 020f 	bic.w	r2, r3, #15
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	490e      	ldr	r1, [pc, #56]	; (80017b4 <HAL_RCC_ClockConfig+0x244>)
 800177c:	4313      	orrs	r3, r2
 800177e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_ClockConfig+0x240>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d214      	bcs.n	80017b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_RCC_ClockConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 020f 	bic.w	r2, r3, #15
 8001796:	4906      	ldr	r1, [pc, #24]	; (80017b0 <HAL_RCC_ClockConfig+0x240>)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_RCC_ClockConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e086      	b.n	80018be <HAL_RCC_ClockConfig+0x34e>
 80017b0:	52002000 	.word	0x52002000
 80017b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d208      	bcs.n	80017e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80017d4:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	4939      	ldr	r1, [pc, #228]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d010      	beq.n	8001814 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017fe:	429a      	cmp	r2, r3
 8001800:	d208      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	492e      	ldr	r1, [pc, #184]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 8001810:	4313      	orrs	r3, r2
 8001812:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d010      	beq.n	8001842 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800182c:	429a      	cmp	r2, r3
 800182e:	d208      	bcs.n	8001842 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4922      	ldr	r1, [pc, #136]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 800183e:	4313      	orrs	r3, r2
 8001840:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800185a:	429a      	cmp	r2, r3
 800185c:	d208      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4917      	ldr	r1, [pc, #92]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 800186c:	4313      	orrs	r3, r2
 800186e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001870:	f000 f834 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	4912      	ldr	r1, [pc, #72]	; (80018cc <HAL_RCC_ClockConfig+0x35c>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_RCC_ClockConfig+0x358>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_RCC_ClockConfig+0x35c>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x360>)
 80018a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_RCC_ClockConfig+0x364>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x368>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe ff46 	bl	8000744 <HAL_InitTick>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58024400 	.word	0x58024400
 80018cc:	08005364 	.word	0x08005364
 80018d0:	24000004 	.word	0x24000004
 80018d4:	24000000 	.word	0x24000000
 80018d8:	24000008 	.word	0x24000008

080018dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e2:	4bb3      	ldr	r3, [pc, #716]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ea:	2b18      	cmp	r3, #24
 80018ec:	f200 8155 	bhi.w	8001b9a <HAL_RCC_GetSysClockFreq+0x2be>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	0800195d 	.word	0x0800195d
 80018fc:	08001b9b 	.word	0x08001b9b
 8001900:	08001b9b 	.word	0x08001b9b
 8001904:	08001b9b 	.word	0x08001b9b
 8001908:	08001b9b 	.word	0x08001b9b
 800190c:	08001b9b 	.word	0x08001b9b
 8001910:	08001b9b 	.word	0x08001b9b
 8001914:	08001b9b 	.word	0x08001b9b
 8001918:	08001983 	.word	0x08001983
 800191c:	08001b9b 	.word	0x08001b9b
 8001920:	08001b9b 	.word	0x08001b9b
 8001924:	08001b9b 	.word	0x08001b9b
 8001928:	08001b9b 	.word	0x08001b9b
 800192c:	08001b9b 	.word	0x08001b9b
 8001930:	08001b9b 	.word	0x08001b9b
 8001934:	08001b9b 	.word	0x08001b9b
 8001938:	08001989 	.word	0x08001989
 800193c:	08001b9b 	.word	0x08001b9b
 8001940:	08001b9b 	.word	0x08001b9b
 8001944:	08001b9b 	.word	0x08001b9b
 8001948:	08001b9b 	.word	0x08001b9b
 800194c:	08001b9b 	.word	0x08001b9b
 8001950:	08001b9b 	.word	0x08001b9b
 8001954:	08001b9b 	.word	0x08001b9b
 8001958:	0800198f 	.word	0x0800198f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800195c:	4b94      	ldr	r3, [pc, #592]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	2b00      	cmp	r3, #0
 8001966:	d009      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001968:	4b91      	ldr	r3, [pc, #580]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	08db      	lsrs	r3, r3, #3
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	4a90      	ldr	r2, [pc, #576]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800197a:	e111      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800197c:	4b8d      	ldr	r3, [pc, #564]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800197e:	61bb      	str	r3, [r7, #24]
    break;
 8001980:	e10e      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001982:	4b8d      	ldr	r3, [pc, #564]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001984:	61bb      	str	r3, [r7, #24]
    break;
 8001986:	e10b      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001988:	4b8c      	ldr	r3, [pc, #560]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800198a:	61bb      	str	r3, [r7, #24]
    break;
 800198c:	e108      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800198e:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001998:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80019a4:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80019ae:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	08db      	lsrs	r3, r3, #3
 80019b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80e1 	beq.w	8001b94 <HAL_RCC_GetSysClockFreq+0x2b8>
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f000 8083 	beq.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x204>
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	f200 80a1 	bhi.w	8001b24 <HAL_RCC_GetSysClockFreq+0x248>
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x114>
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d056      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x1c0>
 80019ee:	e099      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d02d      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80019fc:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	08db      	lsrs	r3, r3, #3
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	4a6b      	ldr	r2, [pc, #428]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a26:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001a56:	e087      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001bc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a6a:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a9a:	e065      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aae:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ac2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ade:	e043      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001bcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8001aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b22:	e021      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	0a5b      	lsrs	r3, r3, #9
 8001b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b72:	3301      	adds	r3, #1
 8001b74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8c:	ee17 3a90 	vmov	r3, s15
 8001b90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001b92:	e005      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
    break;
 8001b98:	e002      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b9c:	61bb      	str	r3, [r7, #24]
    break;
 8001b9e:	bf00      	nop
  }

  return sysclockfreq;
 8001ba0:	69bb      	ldr	r3, [r7, #24]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	03d09000 	.word	0x03d09000
 8001bb8:	003d0900 	.word	0x003d0900
 8001bbc:	017d7840 	.word	0x017d7840
 8001bc0:	46000000 	.word	0x46000000
 8001bc4:	4c742400 	.word	0x4c742400
 8001bc8:	4a742400 	.word	0x4a742400
 8001bcc:	4bbebc20 	.word	0x4bbebc20

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001bd6:	f7ff fe81 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	490f      	ldr	r1, [pc, #60]	; (8001c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8001c0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	58024400 	.word	0x58024400
 8001c24:	08005364 	.word	0x08005364
 8001c28:	24000004 	.word	0x24000004
 8001c2c:	24000000 	.word	0x24000000

08001c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001c34:	f7ff ffcc 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4904      	ldr	r1, [pc, #16]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	58024400 	.word	0x58024400
 8001c58:	08005364 	.word	0x08005364

08001c5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	223f      	movs	r2, #63	; 0x3f
 8001c6a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f003 0207 	and.w	r2, r3, #7
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 020f 	and.w	r2, r3, #15
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_GetClockConfig+0x80>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 020f 	and.w	r2, r3, #15
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	601a      	str	r2, [r3, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	52002000 	.word	0x52002000

08001ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e049      	b.n	8001d86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fde2 	bl	80008d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f000 faee 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d001      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e054      	b.n	8001e52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a26      	ldr	r2, [pc, #152]	; (8001e60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d022      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd2:	d01d      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <HAL_TIM_Base_Start_IT+0xe0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_TIM_Base_Start_IT+0xe4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_TIM_Base_Start_IT+0xe8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d115      	bne.n	8001e3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_TIM_Base_Start_IT+0xec>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d015      	beq.n	8001e4e <HAL_TIM_Base_Start_IT+0xbe>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d011      	beq.n	8001e4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3a:	e008      	b.n	8001e4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	e000      	b.n	8001e50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800
 8001e6c:	40000c00 	.word	0x40000c00
 8001e70:	40010400 	.word	0x40010400
 8001e74:	40001800 	.word	0x40001800
 8001e78:	40014000 	.word	0x40014000
 8001e7c:	00010007 	.word	0x00010007

08001e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d122      	bne.n	8001edc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d11b      	bne.n	8001edc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0202 	mvn.w	r2, #2
 8001eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f9fe 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 8001ec8:	e005      	b.n	8001ed6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f9f0 	bl	80022b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fa01 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d122      	bne.n	8001f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d11b      	bne.n	8001f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0204 	mvn.w	r2, #4
 8001f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f9d4 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f9c6 	bl	80022b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f9d7 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0208 	mvn.w	r2, #8
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f9aa 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f99c 	bl	80022b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f9ad 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0210 	mvn.w	r2, #16
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2208      	movs	r2, #8
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f980 	bl	80022c4 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f972 	bl	80022b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f983 	bl	80022d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10e      	bne.n	8002004 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0201 	mvn.w	r2, #1
 8001ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fb6a 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	2b80      	cmp	r3, #128	; 0x80
 8002010:	d10e      	bne.n	8002030 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	2b80      	cmp	r3, #128	; 0x80
 800201e:	d107      	bne.n	8002030 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 faaa 	bl	8002584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203e:	d10e      	bne.n	800205e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d107      	bne.n	800205e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fa9d 	bl	8002598 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d10e      	bne.n	800208a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d107      	bne.n	800208a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f931 	bl	80022ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b20      	cmp	r3, #32
 8002096:	d10e      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d107      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f06f 0220 	mvn.w	r2, #32
 80020ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fa5d 	bl	8002570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_TIM_ConfigClockSource+0x1c>
 80020d8:	2302      	movs	r3, #2
 80020da:	e0dc      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x1d6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a64      	ldr	r2, [pc, #400]	; (80022a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	f000 80a9 	beq.w	800226a <HAL_TIM_ConfigClockSource+0x1aa>
 8002118:	4a62      	ldr	r2, [pc, #392]	; (80022a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	f200 80ae 	bhi.w	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 8002120:	4a61      	ldr	r2, [pc, #388]	; (80022a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	f000 80a1 	beq.w	800226a <HAL_TIM_ConfigClockSource+0x1aa>
 8002128:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f200 80a6 	bhi.w	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 8002130:	4a5e      	ldr	r2, [pc, #376]	; (80022ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8002132:	4293      	cmp	r3, r2
 8002134:	f000 8099 	beq.w	800226a <HAL_TIM_ConfigClockSource+0x1aa>
 8002138:	4a5c      	ldr	r2, [pc, #368]	; (80022ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800213a:	4293      	cmp	r3, r2
 800213c:	f200 809e 	bhi.w	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 8002140:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002144:	f000 8091 	beq.w	800226a <HAL_TIM_ConfigClockSource+0x1aa>
 8002148:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800214c:	f200 8096 	bhi.w	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 8002150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002154:	f000 8089 	beq.w	800226a <HAL_TIM_ConfigClockSource+0x1aa>
 8002158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215c:	f200 808e 	bhi.w	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 8002160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002164:	d03e      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0x124>
 8002166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800216a:	f200 8087 	bhi.w	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002172:	f000 8086 	beq.w	8002282 <HAL_TIM_ConfigClockSource+0x1c2>
 8002176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217a:	d87f      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 800217c:	2b70      	cmp	r3, #112	; 0x70
 800217e:	d01a      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0xf6>
 8002180:	2b70      	cmp	r3, #112	; 0x70
 8002182:	d87b      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 8002184:	2b60      	cmp	r3, #96	; 0x60
 8002186:	d050      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x16a>
 8002188:	2b60      	cmp	r3, #96	; 0x60
 800218a:	d877      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 800218c:	2b50      	cmp	r3, #80	; 0x50
 800218e:	d03c      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x14a>
 8002190:	2b50      	cmp	r3, #80	; 0x50
 8002192:	d873      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d058      	beq.n	800224a <HAL_TIM_ConfigClockSource+0x18a>
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d86f      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 800219c:	2b30      	cmp	r3, #48	; 0x30
 800219e:	d064      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x1aa>
 80021a0:	2b30      	cmp	r3, #48	; 0x30
 80021a2:	d86b      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d060      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x1aa>
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d867      	bhi.n	800227c <HAL_TIM_ConfigClockSource+0x1bc>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05c      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x1aa>
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d05a      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x1aa>
 80021b4:	e062      	b.n	800227c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f000 f9b3 	bl	8002530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	609a      	str	r2, [r3, #8]
      break;
 80021e2:	e04f      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6899      	ldr	r1, [r3, #8]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f000 f99c 	bl	8002530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002206:	609a      	str	r2, [r3, #8]
      break;
 8002208:	e03c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	461a      	mov	r2, r3
 8002218:	f000 f90c 	bl	8002434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2150      	movs	r1, #80	; 0x50
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f966 	bl	80024f4 <TIM_ITRx_SetConfig>
      break;
 8002228:	e02c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	461a      	mov	r2, r3
 8002238:	f000 f92b 	bl	8002492 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2160      	movs	r1, #96	; 0x60
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f956 	bl	80024f4 <TIM_ITRx_SetConfig>
      break;
 8002248:	e01c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	461a      	mov	r2, r3
 8002258:	f000 f8ec 	bl	8002434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2140      	movs	r1, #64	; 0x40
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f946 	bl	80024f4 <TIM_ITRx_SetConfig>
      break;
 8002268:	e00c      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f000 f93d 	bl	80024f4 <TIM_ITRx_SetConfig>
      break;
 800227a:	e003      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e000      	b.n	8002284 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	ffceff88 	.word	0xffceff88
 80022a4:	00100040 	.word	0x00100040
 80022a8:	00100030 	.word	0x00100030
 80022ac:	00100020 	.word	0x00100020

080022b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a40      	ldr	r2, [pc, #256]	; (8002414 <TIM_Base_SetConfig+0x114>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d013      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231e:	d00f      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3d      	ldr	r2, [pc, #244]	; (8002418 <TIM_Base_SetConfig+0x118>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00b      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a3c      	ldr	r2, [pc, #240]	; (800241c <TIM_Base_SetConfig+0x11c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a3b      	ldr	r2, [pc, #236]	; (8002420 <TIM_Base_SetConfig+0x120>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d003      	beq.n	8002340 <TIM_Base_SetConfig+0x40>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <TIM_Base_SetConfig+0x124>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d108      	bne.n	8002352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a2f      	ldr	r2, [pc, #188]	; (8002414 <TIM_Base_SetConfig+0x114>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01f      	beq.n	800239a <TIM_Base_SetConfig+0x9a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002360:	d01b      	beq.n	800239a <TIM_Base_SetConfig+0x9a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <TIM_Base_SetConfig+0x118>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d017      	beq.n	800239a <TIM_Base_SetConfig+0x9a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a2b      	ldr	r2, [pc, #172]	; (800241c <TIM_Base_SetConfig+0x11c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <TIM_Base_SetConfig+0x9a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a2a      	ldr	r2, [pc, #168]	; (8002420 <TIM_Base_SetConfig+0x120>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00f      	beq.n	800239a <TIM_Base_SetConfig+0x9a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a29      	ldr	r2, [pc, #164]	; (8002424 <TIM_Base_SetConfig+0x124>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00b      	beq.n	800239a <TIM_Base_SetConfig+0x9a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a28      	ldr	r2, [pc, #160]	; (8002428 <TIM_Base_SetConfig+0x128>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <TIM_Base_SetConfig+0x9a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <TIM_Base_SetConfig+0x12c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d003      	beq.n	800239a <TIM_Base_SetConfig+0x9a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a26      	ldr	r2, [pc, #152]	; (8002430 <TIM_Base_SetConfig+0x130>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d108      	bne.n	80023ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a10      	ldr	r2, [pc, #64]	; (8002414 <TIM_Base_SetConfig+0x114>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00f      	beq.n	80023f8 <TIM_Base_SetConfig+0xf8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <TIM_Base_SetConfig+0x124>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00b      	beq.n	80023f8 <TIM_Base_SetConfig+0xf8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a11      	ldr	r2, [pc, #68]	; (8002428 <TIM_Base_SetConfig+0x128>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <TIM_Base_SetConfig+0xf8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <TIM_Base_SetConfig+0x12c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d003      	beq.n	80023f8 <TIM_Base_SetConfig+0xf8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0f      	ldr	r2, [pc, #60]	; (8002430 <TIM_Base_SetConfig+0x130>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d103      	bne.n	8002400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	615a      	str	r2, [r3, #20]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40010000 	.word	0x40010000
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800
 8002420:	40000c00 	.word	0x40000c00
 8002424:	40010400 	.word	0x40010400
 8002428:	40014000 	.word	0x40014000
 800242c:	40014400 	.word	0x40014400
 8002430:	40014800 	.word	0x40014800

08002434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	f023 0201 	bic.w	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f023 030a 	bic.w	r3, r3, #10
 8002470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	621a      	str	r2, [r3, #32]
}
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002492:	b480      	push	{r7}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	f023 0210 	bic.w	r2, r3, #16
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	031b      	lsls	r3, r3, #12
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	621a      	str	r2, [r3, #32]
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <TIM_ITRx_SetConfig+0x38>)
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	f043 0307 	orr.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	609a      	str	r2, [r3, #8]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	ffcfff8f 	.word	0xffcfff8f

08002530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800254a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	021a      	lsls	r2, r3, #8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	431a      	orrs	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	609a      	str	r2, [r3, #8]
}
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <__NVIC_SetPriority>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0a      	blt.n	80025d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	490c      	ldr	r1, [pc, #48]	; (80025f8 <__NVIC_SetPriority+0x4c>)
 80025c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025d4:	e00a      	b.n	80025ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4908      	ldr	r1, [pc, #32]	; (80025fc <__NVIC_SetPriority+0x50>)
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3b04      	subs	r3, #4
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	761a      	strb	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Handler+0x1c>)
 8002606:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002608:	f002 f962 	bl	80048d0 <xTaskGetSchedulerState>
 800260c:	4603      	mov	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d001      	beq.n	8002616 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002612:	f000 fd99 	bl	8003148 <xPortSysTickHandler>
  }
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002624:	2100      	movs	r1, #0
 8002626:	f06f 0004 	mvn.w	r0, #4
 800262a:	f7ff ffbf 	bl	80025ac <__NVIC_SetPriority>
#endif
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800263a:	f3ef 8305 	mrs	r3, IPSR
 800263e:	603b      	str	r3, [r7, #0]
  return(result);
 8002640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002646:	f06f 0305 	mvn.w	r3, #5
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	e00c      	b.n	8002668 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <osKernelInitialize+0x44>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <osKernelInitialize+0x44>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	e002      	b.n	8002668 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002668:	687b      	ldr	r3, [r7, #4]
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	24000134 	.word	0x24000134

0800267c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002682:	f3ef 8305 	mrs	r3, IPSR
 8002686:	603b      	str	r3, [r7, #0]
  return(result);
 8002688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <osKernelStart+0x1a>
    stat = osErrorISR;
 800268e:	f06f 0305 	mvn.w	r3, #5
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	e010      	b.n	80026b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <osKernelStart+0x48>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d109      	bne.n	80026b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800269e:	f7ff ffbf 	bl	8002620 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <osKernelStart+0x48>)
 80026a4:	2202      	movs	r2, #2
 80026a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80026a8:	f001 fcb6 	bl	8004018 <vTaskStartScheduler>
      stat = osOK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	e002      	b.n	80026b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026b8:	687b      	ldr	r3, [r7, #4]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	24000134 	.word	0x24000134

080026c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08e      	sub	sp, #56	; 0x38
 80026cc:	af04      	add	r7, sp, #16
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026d8:	f3ef 8305 	mrs	r3, IPSR
 80026dc:	617b      	str	r3, [r7, #20]
  return(result);
 80026de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d17e      	bne.n	80027e2 <osThreadNew+0x11a>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d07b      	beq.n	80027e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80026ee:	2318      	movs	r3, #24
 80026f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80026f6:	f04f 33ff 	mov.w	r3, #4294967295
 80026fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d045      	beq.n	800278e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <osThreadNew+0x48>
        name = attr->name;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <osThreadNew+0x6e>
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b38      	cmp	r3, #56	; 0x38
 8002728:	d805      	bhi.n	8002736 <osThreadNew+0x6e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <osThreadNew+0x72>
        return (NULL);
 8002736:	2300      	movs	r3, #0
 8002738:	e054      	b.n	80027e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00e      	beq.n	8002770 <osThreadNew+0xa8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2bbb      	cmp	r3, #187	; 0xbb
 8002758:	d90a      	bls.n	8002770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <osThreadNew+0xa8>
        mem = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e010      	b.n	8002792 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10c      	bne.n	8002792 <osThreadNew+0xca>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d108      	bne.n	8002792 <osThreadNew+0xca>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d104      	bne.n	8002792 <osThreadNew+0xca>
          mem = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	e001      	b.n	8002792 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d110      	bne.n	80027ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80027a0:	9202      	str	r2, [sp, #8]
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6a3a      	ldr	r2, [r7, #32]
 80027ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f001 fa46 	bl	8003c40 <xTaskCreateStatic>
 80027b4:	4603      	mov	r3, r0
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	e013      	b.n	80027e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d110      	bne.n	80027e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f001 fa91 	bl	8003cfa <xTaskCreate>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d001      	beq.n	80027e2 <osThreadNew+0x11a>
            hTask = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027e2:	693b      	ldr	r3, [r7, #16]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027f4:	f3ef 8305 	mrs	r3, IPSR
 80027f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80027fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <osDelay+0x1c>
    stat = osErrorISR;
 8002800:	f06f 0305 	mvn.w	r3, #5
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e007      	b.n	8002818 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f001 fbcc 	bl	8003fb0 <vTaskDelay>
    }
  }

  return (stat);
 8002818:	68fb      	ldr	r3, [r7, #12]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a07      	ldr	r2, [pc, #28]	; (8002850 <vApplicationGetIdleTaskMemory+0x2c>)
 8002834:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4a06      	ldr	r2, [pc, #24]	; (8002854 <vApplicationGetIdleTaskMemory+0x30>)
 800283a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	601a      	str	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	24000138 	.word	0x24000138
 8002854:	240001f4 	.word	0x240001f4

08002858 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <vApplicationGetTimerTaskMemory+0x2c>)
 8002868:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <vApplicationGetTimerTaskMemory+0x30>)
 800286e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002876:	601a      	str	r2, [r3, #0]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	240003f4 	.word	0x240003f4
 8002888:	240004b0 	.word	0x240004b0

0800288c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002898:	f001 fc2e 	bl	80040f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800289c:	4b5b      	ldr	r3, [pc, #364]	; (8002a0c <pvPortMalloc+0x180>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80028a4:	f000 f920 	bl	8002ae8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <pvPortMalloc+0x184>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8093 	bne.w	80029dc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01d      	beq.n	80028f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80028bc:	2208      	movs	r2, #8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d014      	beq.n	80028f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f023 0307 	bic.w	r3, r3, #7
 80028d4:	3308      	adds	r3, #8
 80028d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028f4:	bf00      	nop
 80028f6:	e7fe      	b.n	80028f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d06e      	beq.n	80029dc <pvPortMalloc+0x150>
 80028fe:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <pvPortMalloc+0x188>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	429a      	cmp	r2, r3
 8002906:	d869      	bhi.n	80029dc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002908:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <pvPortMalloc+0x18c>)
 800290a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <pvPortMalloc+0x18c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002912:	e004      	b.n	800291e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	d903      	bls.n	8002930 <pvPortMalloc+0xa4>
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f1      	bne.n	8002914 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <pvPortMalloc+0x180>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002936:	429a      	cmp	r2, r3
 8002938:	d050      	beq.n	80029dc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2208      	movs	r2, #8
 8002940:	4413      	add	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	1ad2      	subs	r2, r2, r3
 8002954:	2308      	movs	r3, #8
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	429a      	cmp	r2, r3
 800295a:	d91f      	bls.n	800299c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <pvPortMalloc+0xf8>
	__asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	613b      	str	r3, [r7, #16]
}
 8002980:	bf00      	nop
 8002982:	e7fe      	b.n	8002982 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	1ad2      	subs	r2, r2, r3
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002996:	69b8      	ldr	r0, [r7, #24]
 8002998:	f000 f908 	bl	8002bac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <pvPortMalloc+0x188>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <pvPortMalloc+0x188>)
 80029a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <pvPortMalloc+0x188>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <pvPortMalloc+0x190>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d203      	bcs.n	80029be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <pvPortMalloc+0x188>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a18      	ldr	r2, [pc, #96]	; (8002a1c <pvPortMalloc+0x190>)
 80029bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <pvPortMalloc+0x184>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80029d2:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <pvPortMalloc+0x194>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <pvPortMalloc+0x194>)
 80029da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80029dc:	f001 fb9a 	bl	8004114 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <pvPortMalloc+0x174>
	__asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	60fb      	str	r3, [r7, #12]
}
 80029fc:	bf00      	nop
 80029fe:	e7fe      	b.n	80029fe <pvPortMalloc+0x172>
	return pvReturn;
 8002a00:	69fb      	ldr	r3, [r7, #28]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3728      	adds	r7, #40	; 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	240044b8 	.word	0x240044b8
 8002a10:	240044cc 	.word	0x240044cc
 8002a14:	240044bc 	.word	0x240044bc
 8002a18:	240044b0 	.word	0x240044b0
 8002a1c:	240044c0 	.word	0x240044c0
 8002a20:	240044c4 	.word	0x240044c4

08002a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d04d      	beq.n	8002ad2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002a36:	2308      	movs	r3, #8
 8002a38:	425b      	negs	r3, r3
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4b24      	ldr	r3, [pc, #144]	; (8002adc <vPortFree+0xb8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10a      	bne.n	8002a68 <vPortFree+0x44>
	__asm volatile
 8002a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	60fb      	str	r3, [r7, #12]
}
 8002a64:	bf00      	nop
 8002a66:	e7fe      	b.n	8002a66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <vPortFree+0x62>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	60bb      	str	r3, [r7, #8]
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <vPortFree+0xb8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01e      	beq.n	8002ad2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11a      	bne.n	8002ad2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <vPortFree+0xb8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002aac:	f001 fb24 	bl	80040f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <vPortFree+0xbc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <vPortFree+0xbc>)
 8002abc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002abe:	6938      	ldr	r0, [r7, #16]
 8002ac0:	f000 f874 	bl	8002bac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <vPortFree+0xc0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <vPortFree+0xc0>)
 8002acc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002ace:	f001 fb21 	bl	8004114 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ad2:	bf00      	nop
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	240044cc 	.word	0x240044cc
 8002ae0:	240044bc 	.word	0x240044bc
 8002ae4:	240044c8 	.word	0x240044c8

08002ae8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002aee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002af2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <prvHeapInit+0xac>)
 8002af6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00c      	beq.n	8002b1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3307      	adds	r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0307 	bic.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <prvHeapInit+0xac>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b20:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <prvHeapInit+0xb0>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <prvHeapInit+0xb0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	4413      	add	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002b34:	2208      	movs	r2, #8
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0307 	bic.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <prvHeapInit+0xb4>)
 8002b48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <prvHeapInit+0xb4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <prvHeapInit+0xb4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	1ad2      	subs	r2, r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <prvHeapInit+0xb4>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <prvHeapInit+0xb8>)
 8002b76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <prvHeapInit+0xbc>)
 8002b7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <prvHeapInit+0xc0>)
 8002b82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b86:	601a      	str	r2, [r3, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	240008b0 	.word	0x240008b0
 8002b98:	240044b0 	.word	0x240044b0
 8002b9c:	240044b8 	.word	0x240044b8
 8002ba0:	240044c0 	.word	0x240044c0
 8002ba4:	240044bc 	.word	0x240044bc
 8002ba8:	240044cc 	.word	0x240044cc

08002bac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <prvInsertBlockIntoFreeList+0xac>)
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e002      	b.n	8002bc0 <prvInsertBlockIntoFreeList+0x14>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d8f7      	bhi.n	8002bba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d108      	bne.n	8002bee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	441a      	add	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d118      	bne.n	8002c34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <prvInsertBlockIntoFreeList+0xb0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d00d      	beq.n	8002c2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	441a      	add	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e008      	b.n	8002c3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <prvInsertBlockIntoFreeList+0xb0>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e003      	b.n	8002c3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d002      	beq.n	8002c4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	240044b0 	.word	0x240044b0
 8002c5c:	240044b8 	.word	0x240044b8

08002c60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f103 0208 	add.w	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f103 0208 	add.w	r2, r3, #8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f103 0208 	add.w	r2, r3, #8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d103      	bne.n	8002d22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	e00c      	b.n	8002d3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3308      	adds	r3, #8
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e002      	b.n	8002d30 <vListInsert+0x2e>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d2f6      	bcs.n	8002d2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	601a      	str	r2, [r3, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6892      	ldr	r2, [r2, #8]
 8002d8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6852      	ldr	r2, [r2, #4]
 8002d94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d103      	bne.n	8002da8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	1e5a      	subs	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3b04      	subs	r3, #4
 8002de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f023 0201 	bic.w	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3b04      	subs	r3, #4
 8002df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002df8:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <pxPortInitialiseStack+0x64>)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3b14      	subs	r3, #20
 8002e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3b04      	subs	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f06f 0202 	mvn.w	r2, #2
 8002e16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3b20      	subs	r3, #32
 8002e1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	08002e31 	.word	0x08002e31

08002e30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <prvTaskExitError+0x54>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d00a      	beq.n	8002e5a <prvTaskExitError+0x2a>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	60fb      	str	r3, [r7, #12]
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <prvTaskExitError+0x28>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	60bb      	str	r3, [r7, #8]
}
 8002e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e6e:	bf00      	nop
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0fc      	beq.n	8002e70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	24000010 	.word	0x24000010
	...

08002e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <pxCurrentTCBConst2>)
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	6808      	ldr	r0, [r1, #0]
 8002e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9a:	f380 8809 	msr	PSP, r0
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f380 8811 	msr	BASEPRI, r0
 8002eaa:	4770      	bx	lr
 8002eac:	f3af 8000 	nop.w

08002eb0 <pxCurrentTCBConst2>:
 8002eb0:	24004518 	.word	0x24004518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop

08002eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002eb8:	4808      	ldr	r0, [pc, #32]	; (8002edc <prvPortStartFirstTask+0x24>)
 8002eba:	6800      	ldr	r0, [r0, #0]
 8002ebc:	6800      	ldr	r0, [r0, #0]
 8002ebe:	f380 8808 	msr	MSP, r0
 8002ec2:	f04f 0000 	mov.w	r0, #0
 8002ec6:	f380 8814 	msr	CONTROL, r0
 8002eca:	b662      	cpsie	i
 8002ecc:	b661      	cpsie	f
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	df00      	svc	0
 8002ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002eda:	bf00      	nop
 8002edc:	e000ed08 	.word	0xe000ed08

08002ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ee6:	4b46      	ldr	r3, [pc, #280]	; (8003000 <xPortStartScheduler+0x120>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a46      	ldr	r2, [pc, #280]	; (8003004 <xPortStartScheduler+0x124>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d10a      	bne.n	8002f06 <xPortStartScheduler+0x26>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	613b      	str	r3, [r7, #16]
}
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f06:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <xPortStartScheduler+0x120>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a3f      	ldr	r2, [pc, #252]	; (8003008 <xPortStartScheduler+0x128>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d10a      	bne.n	8002f26 <xPortStartScheduler+0x46>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	60fb      	str	r3, [r7, #12]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f26:	4b39      	ldr	r3, [pc, #228]	; (800300c <xPortStartScheduler+0x12c>)
 8002f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	22ff      	movs	r2, #255	; 0xff
 8002f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <xPortStartScheduler+0x130>)
 8002f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <xPortStartScheduler+0x134>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f54:	e009      	b.n	8002f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <xPortStartScheduler+0x134>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	4a2d      	ldr	r2, [pc, #180]	; (8003014 <xPortStartScheduler+0x134>)
 8002f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f72:	2b80      	cmp	r3, #128	; 0x80
 8002f74:	d0ef      	beq.n	8002f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f76:	4b27      	ldr	r3, [pc, #156]	; (8003014 <xPortStartScheduler+0x134>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1c3 0307 	rsb	r3, r3, #7
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00a      	beq.n	8002f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	60bb      	str	r3, [r7, #8]
}
 8002f94:	bf00      	nop
 8002f96:	e7fe      	b.n	8002f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <xPortStartScheduler+0x134>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	4a1d      	ldr	r2, [pc, #116]	; (8003014 <xPortStartScheduler+0x134>)
 8002fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <xPortStartScheduler+0x134>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002faa:	4a1a      	ldr	r2, [pc, #104]	; (8003014 <xPortStartScheduler+0x134>)
 8002fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <xPortStartScheduler+0x138>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a17      	ldr	r2, [pc, #92]	; (8003018 <xPortStartScheduler+0x138>)
 8002fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <xPortStartScheduler+0x138>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a14      	ldr	r2, [pc, #80]	; (8003018 <xPortStartScheduler+0x138>)
 8002fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002fce:	f000 f8dd 	bl	800318c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <xPortStartScheduler+0x13c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002fd8:	f000 f8fc 	bl	80031d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <xPortStartScheduler+0x140>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0f      	ldr	r2, [pc, #60]	; (8003020 <xPortStartScheduler+0x140>)
 8002fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002fe8:	f7ff ff66 	bl	8002eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002fec:	f001 f9fa 	bl	80043e4 <vTaskSwitchContext>
	prvTaskExitError();
 8002ff0:	f7ff ff1e 	bl	8002e30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	e000ed00 	.word	0xe000ed00
 8003004:	410fc271 	.word	0x410fc271
 8003008:	410fc270 	.word	0x410fc270
 800300c:	e000e400 	.word	0xe000e400
 8003010:	240044d0 	.word	0x240044d0
 8003014:	240044d4 	.word	0x240044d4
 8003018:	e000ed20 	.word	0xe000ed20
 800301c:	24000010 	.word	0x24000010
 8003020:	e000ef34 	.word	0xe000ef34

08003024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
	__asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	607b      	str	r3, [r7, #4]
}
 800303c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <vPortEnterCritical+0x58>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <vPortEnterCritical+0x58>)
 8003046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <vPortEnterCritical+0x58>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10f      	bne.n	8003070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <vPortEnterCritical+0x5c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <vPortEnterCritical+0x4c>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	603b      	str	r3, [r7, #0]
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <vPortEnterCritical+0x4a>
	}
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	24000010 	.word	0x24000010
 8003080:	e000ed04 	.word	0xe000ed04

08003084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <vPortExitCritical+0x50>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <vPortExitCritical+0x24>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	607b      	str	r3, [r7, #4]
}
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <vPortExitCritical+0x50>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <vPortExitCritical+0x50>)
 80030b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <vPortExitCritical+0x50>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d105      	bne.n	80030c6 <vPortExitCritical+0x42>
 80030ba:	2300      	movs	r3, #0
 80030bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	24000010 	.word	0x24000010
	...

080030e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80030e0:	f3ef 8009 	mrs	r0, PSP
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <pxCurrentTCBConst>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	f01e 0f10 	tst.w	lr, #16
 80030f0:	bf08      	it	eq
 80030f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80030f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030fa:	6010      	str	r0, [r2, #0]
 80030fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003104:	f380 8811 	msr	BASEPRI, r0
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f001 f968 	bl	80043e4 <vTaskSwitchContext>
 8003114:	f04f 0000 	mov.w	r0, #0
 8003118:	f380 8811 	msr	BASEPRI, r0
 800311c:	bc09      	pop	{r0, r3}
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	6808      	ldr	r0, [r1, #0]
 8003122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003126:	f01e 0f10 	tst.w	lr, #16
 800312a:	bf08      	it	eq
 800312c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003130:	f380 8809 	msr	PSP, r0
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	f3af 8000 	nop.w

08003140 <pxCurrentTCBConst>:
 8003140:	24004518 	.word	0x24004518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop

08003148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	607b      	str	r3, [r7, #4]
}
 8003160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003162:	f001 f885 	bl	8004270 <xTaskIncrementTick>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <xPortSysTickHandler+0x40>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	2300      	movs	r3, #0
 8003176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f383 8811 	msr	BASEPRI, r3
}
 800317e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	e000ed04 	.word	0xe000ed04

0800318c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <vPortSetupTimerInterrupt+0x34>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <vPortSetupTimerInterrupt+0x38>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800319c:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <vPortSetupTimerInterrupt+0x3c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <vPortSetupTimerInterrupt+0x40>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <vPortSetupTimerInterrupt+0x44>)
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <vPortSetupTimerInterrupt+0x34>)
 80031b0:	2207      	movs	r2, #7
 80031b2:	601a      	str	r2, [r3, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000e010 	.word	0xe000e010
 80031c4:	e000e018 	.word	0xe000e018
 80031c8:	24000000 	.word	0x24000000
 80031cc:	10624dd3 	.word	0x10624dd3
 80031d0:	e000e014 	.word	0xe000e014

080031d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80031d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80031e4 <vPortEnableVFP+0x10>
 80031d8:	6801      	ldr	r1, [r0, #0]
 80031da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80031de:	6001      	str	r1, [r0, #0]
 80031e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80031e2:	bf00      	nop
 80031e4:	e000ed88 	.word	0xe000ed88

080031e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80031ee:	f3ef 8305 	mrs	r3, IPSR
 80031f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	d914      	bls.n	8003224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <vPortValidateInterruptPriority+0x70>)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003204:	4b15      	ldr	r3, [pc, #84]	; (800325c <vPortValidateInterruptPriority+0x74>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	7afa      	ldrb	r2, [r7, #11]
 800320a:	429a      	cmp	r2, r3
 800320c:	d20a      	bcs.n	8003224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	607b      	str	r3, [r7, #4]
}
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <vPortValidateInterruptPriority+0x78>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <vPortValidateInterruptPriority+0x7c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d90a      	bls.n	800324a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	603b      	str	r3, [r7, #0]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <vPortValidateInterruptPriority+0x60>
	}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000e3f0 	.word	0xe000e3f0
 800325c:	240044d0 	.word	0x240044d0
 8003260:	e000ed0c 	.word	0xe000ed0c
 8003264:	240044d4 	.word	0x240044d4

08003268 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <xQueueGenericReset+0x2a>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	60bb      	str	r3, [r7, #8]
}
 800328e:	bf00      	nop
 8003290:	e7fe      	b.n	8003290 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003292:	f7ff fec7 	bl	8003024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	68f9      	ldr	r1, [r7, #12]
 80032a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	441a      	add	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c2:	3b01      	subs	r3, #1
 80032c4:	68f9      	ldr	r1, [r7, #12]
 80032c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	441a      	add	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	22ff      	movs	r2, #255	; 0xff
 80032d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	22ff      	movs	r2, #255	; 0xff
 80032de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d114      	bne.n	8003312 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01a      	beq.n	8003326 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3310      	adds	r3, #16
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 f929 	bl	800454c <xTaskRemoveFromEventList>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d012      	beq.n	8003326 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <xQueueGenericReset+0xcc>)
 8003302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	e009      	b.n	8003326 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3310      	adds	r3, #16
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fca2 	bl	8002c60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3324      	adds	r3, #36	; 0x24
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fc9d 	bl	8002c60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003326:	f7ff fead 	bl	8003084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08e      	sub	sp, #56	; 0x38
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
}
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <xQueueGenericCreateStatic+0x52>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <xQueueGenericCreateStatic+0x56>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <xQueueGenericCreateStatic+0x58>
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	623b      	str	r3, [r7, #32]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <xQueueGenericCreateStatic+0x7e>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <xQueueGenericCreateStatic+0x82>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <xQueueGenericCreateStatic+0x84>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	61fb      	str	r3, [r7, #28]
}
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033d6:	2350      	movs	r3, #80	; 0x50
 80033d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b50      	cmp	r3, #80	; 0x50
 80033de:	d00a      	beq.n	80033f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	61bb      	str	r3, [r7, #24]
}
 80033f2:	bf00      	nop
 80033f4:	e7fe      	b.n	80033f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800340a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f805 	bl	8003428 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003420:	4618      	mov	r0, r3
 8003422:	3730      	adds	r7, #48	; 0x30
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d103      	bne.n	8003444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e002      	b.n	800344a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003456:	2101      	movs	r1, #1
 8003458:	69b8      	ldr	r0, [r7, #24]
 800345a:	f7ff ff05 	bl	8003268 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	; 0x38
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <xQueueGenericSend+0x32>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800349e:	bf00      	nop
 80034a0:	e7fe      	b.n	80034a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <xQueueGenericSend+0x40>
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <xQueueGenericSend+0x44>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <xQueueGenericSend+0x46>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <xQueueGenericSend+0x60>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d103      	bne.n	80034de <xQueueGenericSend+0x6e>
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <xQueueGenericSend+0x72>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueGenericSend+0x74>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xQueueGenericSend+0x8e>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	623b      	str	r3, [r7, #32]
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034fe:	f001 f9e7 	bl	80048d0 <xTaskGetSchedulerState>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <xQueueGenericSend+0x9e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <xQueueGenericSend+0xa2>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <xQueueGenericSend+0xa4>
 8003512:	2300      	movs	r3, #0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xQueueGenericSend+0xbe>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	61fb      	str	r3, [r7, #28]
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800352e:	f7ff fd79 	bl	8003024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <xQueueGenericSend+0xd4>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d129      	bne.n	8003598 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800354a:	f000 fa0b 	bl	8003964 <prvCopyDataToQueue>
 800354e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	3324      	adds	r3, #36	; 0x24
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fff5 	bl	800454c <xTaskRemoveFromEventList>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003568:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <xQueueGenericSend+0x1f8>)
 800356a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	e00a      	b.n	8003590 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <xQueueGenericSend+0x1f8>)
 8003582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003590:	f7ff fd78 	bl	8003084 <vPortExitCritical>
				return pdPASS;
 8003594:	2301      	movs	r3, #1
 8003596:	e063      	b.n	8003660 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d103      	bne.n	80035a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800359e:	f7ff fd71 	bl	8003084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e05c      	b.n	8003660 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 f82f 	bl	8004614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035b6:	2301      	movs	r3, #1
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035ba:	f7ff fd63 	bl	8003084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035be:	f000 fd9b 	bl	80040f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035c2:	f7ff fd2f 	bl	8003024 <vPortEnterCritical>
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d103      	bne.n	80035dc <xQueueGenericSend+0x16c>
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d103      	bne.n	80035f2 <xQueueGenericSend+0x182>
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f2:	f7ff fd47 	bl	8003084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035f6:	1d3a      	adds	r2, r7, #4
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 f81e 	bl	8004640 <xTaskCheckForTimeOut>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d124      	bne.n	8003654 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800360a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800360c:	f000 faa2 	bl	8003b54 <prvIsQueueFull>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d018      	beq.n	8003648 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	3310      	adds	r3, #16
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f000 ff44 	bl	80044ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003626:	f000 fa2d 	bl	8003a84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800362a:	f000 fd73 	bl	8004114 <xTaskResumeAll>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	f47f af7c 	bne.w	800352e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <xQueueGenericSend+0x1f8>)
 8003638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	e772      	b.n	800352e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800364a:	f000 fa1b 	bl	8003a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800364e:	f000 fd61 	bl	8004114 <xTaskResumeAll>
 8003652:	e76c      	b.n	800352e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003656:	f000 fa15 	bl	8003a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800365a:	f000 fd5b 	bl	8004114 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800365e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003660:	4618      	mov	r0, r3
 8003662:	3738      	adds	r7, #56	; 0x38
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b090      	sub	sp, #64	; 0x40
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d103      	bne.n	80036a8 <xQueueGenericSendFromISR+0x3c>
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <xQueueGenericSendFromISR+0x40>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <xQueueGenericSendFromISR+0x42>
 80036ac:	2300      	movs	r3, #0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d103      	bne.n	80036d6 <xQueueGenericSendFromISR+0x6a>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <xQueueGenericSendFromISR+0x6e>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <xQueueGenericSendFromISR+0x70>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	623b      	str	r3, [r7, #32]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036f6:	f7ff fd77 	bl	80031e8 <vPortValidateInterruptPriority>
	__asm volatile
 80036fa:	f3ef 8211 	mrs	r2, BASEPRI
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	61fa      	str	r2, [r7, #28]
 8003710:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003712:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <xQueueGenericSendFromISR+0xbc>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d12f      	bne.n	8003788 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800372e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800373e:	f000 f911 	bl	8003964 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003742:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d112      	bne.n	8003772 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	3324      	adds	r3, #36	; 0x24
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fef7 	bl	800454c <xTaskRemoveFromEventList>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e007      	b.n	8003782 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003772:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003776:	3301      	adds	r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	b25a      	sxtb	r2, r3
 800377c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003782:	2301      	movs	r3, #1
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003786:	e001      	b.n	800378c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003788:	2300      	movs	r3, #0
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f383 8811 	msr	BASEPRI, r3
}
 8003796:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800379a:	4618      	mov	r0, r3
 800379c:	3740      	adds	r7, #64	; 0x40
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <xQueueReceive+0x30>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	623b      	str	r3, [r7, #32]
}
 80037d0:	bf00      	nop
 80037d2:	e7fe      	b.n	80037d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <xQueueReceive+0x3e>
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <xQueueReceive+0x42>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <xQueueReceive+0x44>
 80037e6:	2300      	movs	r3, #0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xQueueReceive+0x5e>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	61fb      	str	r3, [r7, #28]
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003802:	f001 f865 	bl	80048d0 <xTaskGetSchedulerState>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <xQueueReceive+0x6e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <xQueueReceive+0x72>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <xQueueReceive+0x74>
 8003816:	2300      	movs	r3, #0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <xQueueReceive+0x8e>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	61bb      	str	r3, [r7, #24]
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003832:	f7ff fbf7 	bl	8003024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01f      	beq.n	8003882 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003846:	f000 f8f7 	bl	8003a38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00f      	beq.n	800387a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	3310      	adds	r3, #16
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fe74 	bl	800454c <xTaskRemoveFromEventList>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <xQueueReceive+0x1bc>)
 800386c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800387a:	f7ff fc03 	bl	8003084 <vPortExitCritical>
				return pdPASS;
 800387e:	2301      	movs	r3, #1
 8003880:	e069      	b.n	8003956 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003888:	f7ff fbfc 	bl	8003084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800388c:	2300      	movs	r3, #0
 800388e:	e062      	b.n	8003956 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003896:	f107 0310 	add.w	r3, r7, #16
 800389a:	4618      	mov	r0, r3
 800389c:	f000 feba 	bl	8004614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038a4:	f7ff fbee 	bl	8003084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038a8:	f000 fc26 	bl	80040f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ac:	f7ff fbba 	bl	8003024 <vPortEnterCritical>
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038b6:	b25b      	sxtb	r3, r3
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d103      	bne.n	80038c6 <xQueueReceive+0x122>
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d103      	bne.n	80038dc <xQueueReceive+0x138>
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038dc:	f7ff fbd2 	bl	8003084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038e0:	1d3a      	adds	r2, r7, #4
 80038e2:	f107 0310 	add.w	r3, r7, #16
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fea9 	bl	8004640 <xTaskCheckForTimeOut>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d123      	bne.n	800393c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f6:	f000 f917 	bl	8003b28 <prvIsQueueEmpty>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d017      	beq.n	8003930 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	3324      	adds	r3, #36	; 0x24
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fdcf 	bl	80044ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800390e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003910:	f000 f8b8 	bl	8003a84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003914:	f000 fbfe 	bl	8004114 <xTaskResumeAll>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d189      	bne.n	8003832 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <xQueueReceive+0x1bc>)
 8003920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	e780      	b.n	8003832 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003932:	f000 f8a7 	bl	8003a84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003936:	f000 fbed 	bl	8004114 <xTaskResumeAll>
 800393a:	e77a      	b.n	8003832 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800393c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800393e:	f000 f8a1 	bl	8003a84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003942:	f000 fbe7 	bl	8004114 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003948:	f000 f8ee 	bl	8003b28 <prvIsQueueEmpty>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	f43f af6f 	beq.w	8003832 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003956:	4618      	mov	r0, r3
 8003958:	3730      	adds	r7, #48	; 0x30
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d14d      	bne.n	8003a26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 ffbc 	bl	800490c <xTaskPriorityDisinherit>
 8003994:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	e043      	b.n	8003a26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d119      	bne.n	80039d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6858      	ldr	r0, [r3, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	461a      	mov	r2, r3
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	f001 fbe2 	bl	8005178 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d32b      	bcc.n	8003a26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e026      	b.n	8003a26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68d8      	ldr	r0, [r3, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	461a      	mov	r2, r3
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	f001 fbc8 	bl	8005178 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	425b      	negs	r3, r3
 80039f2:	441a      	add	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d207      	bcs.n	8003a14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	425b      	negs	r3, r3
 8003a0e:	441a      	add	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d105      	bne.n	8003a26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a2e:	697b      	ldr	r3, [r7, #20]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d018      	beq.n	8003a7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	441a      	add	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d303      	bcc.n	8003a6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68d9      	ldr	r1, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	461a      	mov	r2, r3
 8003a76:	6838      	ldr	r0, [r7, #0]
 8003a78:	f001 fb7e 	bl	8005178 <memcpy>
	}
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a8c:	f7ff faca 	bl	8003024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a98:	e011      	b.n	8003abe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3324      	adds	r3, #36	; 0x24
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fd50 	bl	800454c <xTaskRemoveFromEventList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ab2:	f000 fe27 	bl	8004704 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	dce9      	bgt.n	8003a9a <prvUnlockQueue+0x16>
 8003ac6:	e000      	b.n	8003aca <prvUnlockQueue+0x46>
					break;
 8003ac8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	22ff      	movs	r2, #255	; 0xff
 8003ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ad2:	f7ff fad7 	bl	8003084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ad6:	f7ff faa5 	bl	8003024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ae0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ae2:	e011      	b.n	8003b08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d012      	beq.n	8003b12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3310      	adds	r3, #16
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fd2b 	bl	800454c <xTaskRemoveFromEventList>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003afc:	f000 fe02 	bl	8004704 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b00:	7bbb      	ldrb	r3, [r7, #14]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	dce9      	bgt.n	8003ae4 <prvUnlockQueue+0x60>
 8003b10:	e000      	b.n	8003b14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	22ff      	movs	r2, #255	; 0xff
 8003b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b1c:	f7ff fab2 	bl	8003084 <vPortExitCritical>
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b30:	f7ff fa78 	bl	8003024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	e001      	b.n	8003b46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b46:	f7ff fa9d 	bl	8003084 <vPortExitCritical>

	return xReturn;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b5c:	f7ff fa62 	bl	8003024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d102      	bne.n	8003b72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e001      	b.n	8003b76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f7ff fa85 	bl	8003084 <vPortExitCritical>

	return xReturn;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e014      	b.n	8003bbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b94:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <vQueueAddToRegistry+0x50>)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ba0:	490c      	ldr	r1, [pc, #48]	; (8003bd4 <vQueueAddToRegistry+0x50>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <vQueueAddToRegistry+0x50>)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003bb6:	e006      	b.n	8003bc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b07      	cmp	r3, #7
 8003bc2:	d9e7      	bls.n	8003b94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	240044d8 	.word	0x240044d8

08003bd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003be8:	f7ff fa1c 	bl	8003024 <vPortEnterCritical>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d103      	bne.n	8003c02 <vQueueWaitForMessageRestricted+0x2a>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d103      	bne.n	8003c18 <vQueueWaitForMessageRestricted+0x40>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c18:	f7ff fa34 	bl	8003084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3324      	adds	r3, #36	; 0x24
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fc61 	bl	80044f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c32:	6978      	ldr	r0, [r7, #20]
 8003c34:	f7ff ff26 	bl	8003a84 <prvUnlockQueue>
	}
 8003c38:	bf00      	nop
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08e      	sub	sp, #56	; 0x38
 8003c44:	af04      	add	r7, sp, #16
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	623b      	str	r3, [r7, #32]
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	61fb      	str	r3, [r7, #28]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c86:	23bc      	movs	r3, #188	; 0xbc
 8003c88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2bbc      	cmp	r3, #188	; 0xbc
 8003c8e:	d00a      	beq.n	8003ca6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	61bb      	str	r3, [r7, #24]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ca6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01e      	beq.n	8003cec <xTaskCreateStatic+0xac>
 8003cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9303      	str	r3, [sp, #12]
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	9302      	str	r3, [sp, #8]
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f850 	bl	8003d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ce6:	f000 f8f3 	bl	8003ed0 <prvAddNewTaskToReadyList>
 8003cea:	e001      	b.n	8003cf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cf0:	697b      	ldr	r3, [r7, #20]
	}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3728      	adds	r7, #40	; 0x28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b08c      	sub	sp, #48	; 0x30
 8003cfe:	af04      	add	r7, sp, #16
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fdbc 	bl	800288c <pvPortMalloc>
 8003d14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d1c:	20bc      	movs	r0, #188	; 0xbc
 8003d1e:	f7fe fdb5 	bl	800288c <pvPortMalloc>
 8003d22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d30:	e005      	b.n	8003d3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f7fe fe76 	bl	8002a24 <vPortFree>
 8003d38:	e001      	b.n	8003d3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d4c:	88fa      	ldrh	r2, [r7, #6]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9303      	str	r3, [sp, #12]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	9302      	str	r3, [sp, #8]
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f80e 	bl	8003d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d68:	69f8      	ldr	r0, [r7, #28]
 8003d6a:	f000 f8b1 	bl	8003ed0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e002      	b.n	8003d7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	21a5      	movs	r1, #165	; 0xa5
 8003d9e:	f001 f9f9 	bl	8005194 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003dac:	440b      	add	r3, r1
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f023 0307 	bic.w	r3, r3, #7
 8003dba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	617b      	str	r3, [r7, #20]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01f      	beq.n	8003e22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e012      	b.n	8003e0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	7819      	ldrb	r1, [r3, #0]
 8003df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	3334      	adds	r3, #52	; 0x34
 8003df8:	460a      	mov	r2, r1
 8003dfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4413      	add	r3, r2
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b0f      	cmp	r3, #15
 8003e12:	d9e9      	bls.n	8003de8 <prvInitialiseNewTask+0x64>
 8003e14:	e000      	b.n	8003e18 <prvInitialiseNewTask+0x94>
			{
				break;
 8003e16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e20:	e003      	b.n	8003e2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	2b37      	cmp	r3, #55	; 0x37
 8003e2e:	d901      	bls.n	8003e34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e30:	2337      	movs	r3, #55	; 0x37
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	2200      	movs	r2, #0
 8003e44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe ff28 	bl	8002ca0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	3318      	adds	r3, #24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe ff23 	bl	8002ca0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	3354      	adds	r3, #84	; 0x54
 8003e84:	2260      	movs	r2, #96	; 0x60
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 f983 	bl	8005194 <memset>
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	4a0c      	ldr	r2, [pc, #48]	; (8003ec4 <prvInitialiseNewTask+0x140>)
 8003e92:	659a      	str	r2, [r3, #88]	; 0x58
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	4a0c      	ldr	r2, [pc, #48]	; (8003ec8 <prvInitialiseNewTask+0x144>)
 8003e98:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <prvInitialiseNewTask+0x148>)
 8003e9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	68f9      	ldr	r1, [r7, #12]
 8003ea4:	69b8      	ldr	r0, [r7, #24]
 8003ea6:	f7fe ff8f 	bl	8002dc8 <pxPortInitialiseStack>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ebc:	bf00      	nop
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	080053b8 	.word	0x080053b8
 8003ec8:	080053d8 	.word	0x080053d8
 8003ecc:	08005398 	.word	0x08005398

08003ed0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ed8:	f7ff f8a4 	bl	8003024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003edc:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <prvAddNewTaskToReadyList+0xc4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <prvAddNewTaskToReadyList+0xc4>)
 8003ee4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003eee:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <prvAddNewTaskToReadyList+0xc4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d110      	bne.n	8003f1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003efc:	f000 fc26 	bl	800474c <prvInitialiseTaskLists>
 8003f00:	e00d      	b.n	8003f1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f02:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <prvAddNewTaskToReadyList+0xcc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f0a:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d802      	bhi.n	8003f1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f18:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <prvAddNewTaskToReadyList+0xd0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <prvAddNewTaskToReadyList+0xd0>)
 8003f26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <prvAddNewTaskToReadyList+0xd0>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <prvAddNewTaskToReadyList+0xd4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d903      	bls.n	8003f44 <prvAddNewTaskToReadyList+0x74>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <prvAddNewTaskToReadyList+0xd4>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <prvAddNewTaskToReadyList+0xd8>)
 8003f52:	441a      	add	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7fe fead 	bl	8002cba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f60:	f7ff f890 	bl	8003084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <prvAddNewTaskToReadyList+0xcc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <prvAddNewTaskToReadyList+0xc8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d207      	bcs.n	8003f8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <prvAddNewTaskToReadyList+0xdc>)
 8003f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	240049ec 	.word	0x240049ec
 8003f98:	24004518 	.word	0x24004518
 8003f9c:	240049f8 	.word	0x240049f8
 8003fa0:	24004a08 	.word	0x24004a08
 8003fa4:	240049f4 	.word	0x240049f4
 8003fa8:	2400451c 	.word	0x2400451c
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d017      	beq.n	8003ff2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <vTaskDelay+0x60>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <vTaskDelay+0x30>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	60bb      	str	r3, [r7, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fe0:	f000 f88a 	bl	80040f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fcfe 	bl	80049e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fec:	f000 f892 	bl	8004114 <xTaskResumeAll>
 8003ff0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d107      	bne.n	8004008 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <vTaskDelay+0x64>)
 8003ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	24004a14 	.word	0x24004a14
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004026:	463a      	mov	r2, r7
 8004028:	1d39      	adds	r1, r7, #4
 800402a:	f107 0308 	add.w	r3, r7, #8
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe fbf8 	bl	8002824 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004034:	6839      	ldr	r1, [r7, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	9202      	str	r2, [sp, #8]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	2300      	movs	r3, #0
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	460a      	mov	r2, r1
 8004046:	4924      	ldr	r1, [pc, #144]	; (80040d8 <vTaskStartScheduler+0xc0>)
 8004048:	4824      	ldr	r0, [pc, #144]	; (80040dc <vTaskStartScheduler+0xc4>)
 800404a:	f7ff fdf9 	bl	8003c40 <xTaskCreateStatic>
 800404e:	4603      	mov	r3, r0
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <vTaskStartScheduler+0xc8>)
 8004052:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <vTaskStartScheduler+0xc8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e001      	b.n	8004066 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800406c:	f000 fd10 	bl	8004a90 <xTimerCreateTimerTask>
 8004070:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d11b      	bne.n	80040b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	613b      	str	r3, [r7, #16]
}
 800408a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800408c:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <vTaskStartScheduler+0xcc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3354      	adds	r3, #84	; 0x54
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <vTaskStartScheduler+0xd0>)
 8004094:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <vTaskStartScheduler+0xd4>)
 8004098:	f04f 32ff 	mov.w	r2, #4294967295
 800409c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <vTaskStartScheduler+0xd8>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <vTaskStartScheduler+0xdc>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040aa:	f7fe ff19 	bl	8002ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040ae:	e00e      	b.n	80040ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d10a      	bne.n	80040ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60fb      	str	r3, [r7, #12]
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <vTaskStartScheduler+0xb4>
}
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	0800534c 	.word	0x0800534c
 80040dc:	0800471d 	.word	0x0800471d
 80040e0:	24004a10 	.word	0x24004a10
 80040e4:	24004518 	.word	0x24004518
 80040e8:	24000014 	.word	0x24000014
 80040ec:	24004a0c 	.word	0x24004a0c
 80040f0:	240049f8 	.word	0x240049f8
 80040f4:	240049f0 	.word	0x240049f0

080040f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040fc:	4b04      	ldr	r3, [pc, #16]	; (8004110 <vTaskSuspendAll+0x18>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	4a03      	ldr	r2, [pc, #12]	; (8004110 <vTaskSuspendAll+0x18>)
 8004104:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	24004a14 	.word	0x24004a14

08004114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004122:	4b42      	ldr	r3, [pc, #264]	; (800422c <xTaskResumeAll+0x118>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <xTaskResumeAll+0x2c>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	603b      	str	r3, [r7, #0]
}
 800413c:	bf00      	nop
 800413e:	e7fe      	b.n	800413e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004140:	f7fe ff70 	bl	8003024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004144:	4b39      	ldr	r3, [pc, #228]	; (800422c <xTaskResumeAll+0x118>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3b01      	subs	r3, #1
 800414a:	4a38      	ldr	r2, [pc, #224]	; (800422c <xTaskResumeAll+0x118>)
 800414c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800414e:	4b37      	ldr	r3, [pc, #220]	; (800422c <xTaskResumeAll+0x118>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d162      	bne.n	800421c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004156:	4b36      	ldr	r3, [pc, #216]	; (8004230 <xTaskResumeAll+0x11c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d05e      	beq.n	800421c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800415e:	e02f      	b.n	80041c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004160:	4b34      	ldr	r3, [pc, #208]	; (8004234 <xTaskResumeAll+0x120>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3318      	adds	r3, #24
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe fe01 	bl	8002d74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3304      	adds	r3, #4
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fdfc 	bl	8002d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <xTaskResumeAll+0x124>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d903      	bls.n	8004190 <xTaskResumeAll+0x7c>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <xTaskResumeAll+0x124>)
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4a27      	ldr	r2, [pc, #156]	; (800423c <xTaskResumeAll+0x128>)
 800419e:	441a      	add	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f7fe fd87 	bl	8002cba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4b23      	ldr	r3, [pc, #140]	; (8004240 <xTaskResumeAll+0x12c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <xTaskResumeAll+0x130>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c0:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <xTaskResumeAll+0x120>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1cb      	bne.n	8004160 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041ce:	f000 fb5f 	bl	8004890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041d2:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <xTaskResumeAll+0x134>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d010      	beq.n	8004200 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041de:	f000 f847 	bl	8004270 <xTaskIncrementTick>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <xTaskResumeAll+0x130>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f1      	bne.n	80041de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <xTaskResumeAll+0x134>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004200:	4b10      	ldr	r3, [pc, #64]	; (8004244 <xTaskResumeAll+0x130>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004208:	2301      	movs	r3, #1
 800420a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <xTaskResumeAll+0x138>)
 800420e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800421c:	f7fe ff32 	bl	8003084 <vPortExitCritical>

	return xAlreadyYielded;
 8004220:	68bb      	ldr	r3, [r7, #8]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	24004a14 	.word	0x24004a14
 8004230:	240049ec 	.word	0x240049ec
 8004234:	240049ac 	.word	0x240049ac
 8004238:	240049f4 	.word	0x240049f4
 800423c:	2400451c 	.word	0x2400451c
 8004240:	24004518 	.word	0x24004518
 8004244:	24004a00 	.word	0x24004a00
 8004248:	240049fc 	.word	0x240049fc
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <xTaskGetTickCount+0x1c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800425c:	687b      	ldr	r3, [r7, #4]
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	240049f0 	.word	0x240049f0

08004270 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427a:	4b4f      	ldr	r3, [pc, #316]	; (80043b8 <xTaskIncrementTick+0x148>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 808f 	bne.w	80043a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004284:	4b4d      	ldr	r3, [pc, #308]	; (80043bc <xTaskIncrementTick+0x14c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800428c:	4a4b      	ldr	r2, [pc, #300]	; (80043bc <xTaskIncrementTick+0x14c>)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d120      	bne.n	80042da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004298:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <xTaskIncrementTick+0x150>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	603b      	str	r3, [r7, #0]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <xTaskIncrementTick+0x46>
 80042b8:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <xTaskIncrementTick+0x150>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <xTaskIncrementTick+0x154>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a3f      	ldr	r2, [pc, #252]	; (80043c0 <xTaskIncrementTick+0x150>)
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4a3f      	ldr	r2, [pc, #252]	; (80043c4 <xTaskIncrementTick+0x154>)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <xTaskIncrementTick+0x158>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	4a3d      	ldr	r2, [pc, #244]	; (80043c8 <xTaskIncrementTick+0x158>)
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	f000 fadb 	bl	8004890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042da:	4b3c      	ldr	r3, [pc, #240]	; (80043cc <xTaskIncrementTick+0x15c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d349      	bcc.n	8004378 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042e4:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <xTaskIncrementTick+0x150>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d104      	bne.n	80042f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ee:	4b37      	ldr	r3, [pc, #220]	; (80043cc <xTaskIncrementTick+0x15c>)
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	601a      	str	r2, [r3, #0]
					break;
 80042f6:	e03f      	b.n	8004378 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f8:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <xTaskIncrementTick+0x150>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d203      	bcs.n	8004318 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004310:	4a2e      	ldr	r2, [pc, #184]	; (80043cc <xTaskIncrementTick+0x15c>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004316:	e02f      	b.n	8004378 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fd29 	bl	8002d74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d004      	beq.n	8004334 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	3318      	adds	r3, #24
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fd20 	bl	8002d74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <xTaskIncrementTick+0x160>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d903      	bls.n	8004348 <xTaskIncrementTick+0xd8>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <xTaskIncrementTick+0x160>)
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <xTaskIncrementTick+0x164>)
 8004356:	441a      	add	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f7fe fcab 	bl	8002cba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <xTaskIncrementTick+0x168>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	429a      	cmp	r2, r3
 8004370:	d3b8      	bcc.n	80042e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004372:	2301      	movs	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004376:	e7b5      	b.n	80042e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <xTaskIncrementTick+0x168>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437e:	4915      	ldr	r1, [pc, #84]	; (80043d4 <xTaskIncrementTick+0x164>)
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d901      	bls.n	8004394 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004390:	2301      	movs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <xTaskIncrementTick+0x16c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	e004      	b.n	80043ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <xTaskIncrementTick+0x170>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <xTaskIncrementTick+0x170>)
 80043aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043ac:	697b      	ldr	r3, [r7, #20]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	24004a14 	.word	0x24004a14
 80043bc:	240049f0 	.word	0x240049f0
 80043c0:	240049a4 	.word	0x240049a4
 80043c4:	240049a8 	.word	0x240049a8
 80043c8:	24004a04 	.word	0x24004a04
 80043cc:	24004a0c 	.word	0x24004a0c
 80043d0:	240049f4 	.word	0x240049f4
 80043d4:	2400451c 	.word	0x2400451c
 80043d8:	24004518 	.word	0x24004518
 80043dc:	24004a00 	.word	0x24004a00
 80043e0:	240049fc 	.word	0x240049fc

080043e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043ea:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <vTaskSwitchContext+0xb0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043f2:	4b29      	ldr	r3, [pc, #164]	; (8004498 <vTaskSwitchContext+0xb4>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043f8:	e046      	b.n	8004488 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80043fa:	4b27      	ldr	r3, [pc, #156]	; (8004498 <vTaskSwitchContext+0xb4>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004400:	4b26      	ldr	r3, [pc, #152]	; (800449c <vTaskSwitchContext+0xb8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e010      	b.n	800442a <vTaskSwitchContext+0x46>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <vTaskSwitchContext+0x40>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	607b      	str	r3, [r7, #4]
}
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <vTaskSwitchContext+0x3e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3b01      	subs	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	491d      	ldr	r1, [pc, #116]	; (80044a0 <vTaskSwitchContext+0xbc>)
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0e4      	beq.n	8004408 <vTaskSwitchContext+0x24>
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <vTaskSwitchContext+0xbc>)
 800444a:	4413      	add	r3, r2
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	3308      	adds	r3, #8
 8004460:	429a      	cmp	r2, r3
 8004462:	d104      	bne.n	800446e <vTaskSwitchContext+0x8a>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <vTaskSwitchContext+0xc0>)
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4a08      	ldr	r2, [pc, #32]	; (800449c <vTaskSwitchContext+0xb8>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800447e:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <vTaskSwitchContext+0xc0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3354      	adds	r3, #84	; 0x54
 8004484:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <vTaskSwitchContext+0xc4>)
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	24004a14 	.word	0x24004a14
 8004498:	24004a00 	.word	0x24004a00
 800449c:	240049f4 	.word	0x240049f4
 80044a0:	2400451c 	.word	0x2400451c
 80044a4:	24004518 	.word	0x24004518
 80044a8:	24000014 	.word	0x24000014

080044ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	60fb      	str	r3, [r7, #12]
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <vTaskPlaceOnEventList+0x44>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3318      	adds	r3, #24
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fe fc11 	bl	8002d02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044e0:	2101      	movs	r1, #1
 80044e2:	6838      	ldr	r0, [r7, #0]
 80044e4:	f000 fa80 	bl	80049e8 <prvAddCurrentTaskToDelayedList>
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	24004518 	.word	0x24004518

080044f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	617b      	str	r3, [r7, #20]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <vTaskPlaceOnEventListRestricted+0x54>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3318      	adds	r3, #24
 8004522:	4619      	mov	r1, r3
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7fe fbc8 	bl	8002cba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004530:	f04f 33ff 	mov.w	r3, #4294967295
 8004534:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	68b8      	ldr	r0, [r7, #8]
 800453a:	f000 fa55 	bl	80049e8 <prvAddCurrentTaskToDelayedList>
	}
 800453e:	bf00      	nop
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	24004518 	.word	0x24004518

0800454c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004566:	f383 8811 	msr	BASEPRI, r3
 800456a:	f3bf 8f6f 	isb	sy
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	60fb      	str	r3, [r7, #12]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3318      	adds	r3, #24
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fbf9 	bl	8002d74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <xTaskRemoveFromEventList+0xb0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11d      	bne.n	80045c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	3304      	adds	r3, #4
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fbf0 	bl	8002d74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <xTaskRemoveFromEventList+0xb4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d903      	bls.n	80045a8 <xTaskRemoveFromEventList+0x5c>
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <xTaskRemoveFromEventList+0xb4>)
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4a13      	ldr	r2, [pc, #76]	; (8004604 <xTaskRemoveFromEventList+0xb8>)
 80045b6:	441a      	add	r2, r3
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7fe fb7b 	bl	8002cba <vListInsertEnd>
 80045c4:	e005      	b.n	80045d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	3318      	adds	r3, #24
 80045ca:	4619      	mov	r1, r3
 80045cc:	480e      	ldr	r0, [pc, #56]	; (8004608 <xTaskRemoveFromEventList+0xbc>)
 80045ce:	f7fe fb74 	bl	8002cba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	4b0d      	ldr	r3, [pc, #52]	; (800460c <xTaskRemoveFromEventList+0xc0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	429a      	cmp	r2, r3
 80045de:	d905      	bls.n	80045ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <xTaskRemoveFromEventList+0xc4>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e001      	b.n	80045f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80045f0:	697b      	ldr	r3, [r7, #20]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	24004a14 	.word	0x24004a14
 8004600:	240049f4 	.word	0x240049f4
 8004604:	2400451c 	.word	0x2400451c
 8004608:	240049ac 	.word	0x240049ac
 800460c:	24004518 	.word	0x24004518
 8004610:	24004a00 	.word	0x24004a00

08004614 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <vTaskInternalSetTimeOutState+0x24>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <vTaskInternalSetTimeOutState+0x28>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	605a      	str	r2, [r3, #4]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	24004a04 	.word	0x24004a04
 800463c:	240049f0 	.word	0x240049f0

08004640 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	613b      	str	r3, [r7, #16]
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60fb      	str	r3, [r7, #12]
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004682:	f7fe fccf 	bl	8003024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <xTaskCheckForTimeOut+0xbc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d102      	bne.n	80046a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	e023      	b.n	80046ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <xTaskCheckForTimeOut+0xc0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d007      	beq.n	80046c2 <xTaskCheckForTimeOut+0x82>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d302      	bcc.n	80046c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e015      	b.n	80046ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d20b      	bcs.n	80046e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ff9b 	bl	8004614 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e004      	b.n	80046ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046ee:	f7fe fcc9 	bl	8003084 <vPortExitCritical>

	return xReturn;
 80046f2:	69fb      	ldr	r3, [r7, #28]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	240049f0 	.word	0x240049f0
 8004700:	24004a04 	.word	0x24004a04

08004704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <vTaskMissedYield+0x14>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	24004a00 	.word	0x24004a00

0800471c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004724:	f000 f852 	bl	80047cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <prvIdleTask+0x28>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d9f9      	bls.n	8004724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <prvIdleTask+0x2c>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004740:	e7f0      	b.n	8004724 <prvIdleTask+0x8>
 8004742:	bf00      	nop
 8004744:	2400451c 	.word	0x2400451c
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	e00c      	b.n	8004772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4a12      	ldr	r2, [pc, #72]	; (80047ac <prvInitialiseTaskLists+0x60>)
 8004764:	4413      	add	r3, r2
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fa7a 	bl	8002c60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3301      	adds	r3, #1
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b37      	cmp	r3, #55	; 0x37
 8004776:	d9ef      	bls.n	8004758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004778:	480d      	ldr	r0, [pc, #52]	; (80047b0 <prvInitialiseTaskLists+0x64>)
 800477a:	f7fe fa71 	bl	8002c60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800477e:	480d      	ldr	r0, [pc, #52]	; (80047b4 <prvInitialiseTaskLists+0x68>)
 8004780:	f7fe fa6e 	bl	8002c60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004784:	480c      	ldr	r0, [pc, #48]	; (80047b8 <prvInitialiseTaskLists+0x6c>)
 8004786:	f7fe fa6b 	bl	8002c60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800478a:	480c      	ldr	r0, [pc, #48]	; (80047bc <prvInitialiseTaskLists+0x70>)
 800478c:	f7fe fa68 	bl	8002c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004790:	480b      	ldr	r0, [pc, #44]	; (80047c0 <prvInitialiseTaskLists+0x74>)
 8004792:	f7fe fa65 	bl	8002c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <prvInitialiseTaskLists+0x78>)
 8004798:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <prvInitialiseTaskLists+0x64>)
 800479a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <prvInitialiseTaskLists+0x7c>)
 800479e:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <prvInitialiseTaskLists+0x68>)
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	2400451c 	.word	0x2400451c
 80047b0:	2400497c 	.word	0x2400497c
 80047b4:	24004990 	.word	0x24004990
 80047b8:	240049ac 	.word	0x240049ac
 80047bc:	240049c0 	.word	0x240049c0
 80047c0:	240049d8 	.word	0x240049d8
 80047c4:	240049a4 	.word	0x240049a4
 80047c8:	240049a8 	.word	0x240049a8

080047cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047d2:	e019      	b.n	8004808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047d4:	f7fe fc26 	bl	8003024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d8:	4b10      	ldr	r3, [pc, #64]	; (800481c <prvCheckTasksWaitingTermination+0x50>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fac5 	bl	8002d74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <prvCheckTasksWaitingTermination+0x54>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	4a0b      	ldr	r2, [pc, #44]	; (8004820 <prvCheckTasksWaitingTermination+0x54>)
 80047f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <prvCheckTasksWaitingTermination+0x58>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <prvCheckTasksWaitingTermination+0x58>)
 80047fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047fe:	f7fe fc41 	bl	8003084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f810 	bl	8004828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <prvCheckTasksWaitingTermination+0x58>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e1      	bne.n	80047d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	240049c0 	.word	0x240049c0
 8004820:	240049ec 	.word	0x240049ec
 8004824:	240049d4 	.word	0x240049d4

08004828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3354      	adds	r3, #84	; 0x54
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fcc3 	bl	80051c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004840:	2b00      	cmp	r3, #0
 8004842:	d108      	bne.n	8004856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	4618      	mov	r0, r3
 800484a:	f7fe f8eb 	bl	8002a24 <vPortFree>
				vPortFree( pxTCB );
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fe f8e8 	bl	8002a24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004854:	e018      	b.n	8004888 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800485c:	2b01      	cmp	r3, #1
 800485e:	d103      	bne.n	8004868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fe f8df 	bl	8002a24 <vPortFree>
	}
 8004866:	e00f      	b.n	8004888 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800486e:	2b02      	cmp	r3, #2
 8004870:	d00a      	beq.n	8004888 <prvDeleteTCB+0x60>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60fb      	str	r3, [r7, #12]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <prvDeleteTCB+0x5e>
	}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <prvResetNextTaskUnblockTime+0x38>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <prvResetNextTaskUnblockTime+0x3c>)
 80048a2:	f04f 32ff 	mov.w	r2, #4294967295
 80048a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048a8:	e008      	b.n	80048bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <prvResetNextTaskUnblockTime+0x38>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <prvResetNextTaskUnblockTime+0x3c>)
 80048ba:	6013      	str	r3, [r2, #0]
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	240049a4 	.word	0x240049a4
 80048cc:	24004a0c 	.word	0x24004a0c

080048d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <xTaskGetSchedulerState+0x34>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048de:	2301      	movs	r3, #1
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	e008      	b.n	80048f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <xTaskGetSchedulerState+0x38>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d102      	bne.n	80048f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048ec:	2302      	movs	r3, #2
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	e001      	b.n	80048f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048f6:	687b      	ldr	r3, [r7, #4]
	}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	240049f8 	.word	0x240049f8
 8004908:	24004a14 	.word	0x24004a14

0800490c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d056      	beq.n	80049d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004922:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <xTaskPriorityDisinherit+0xd0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	429a      	cmp	r2, r3
 800492a:	d00a      	beq.n	8004942 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	60fb      	str	r3, [r7, #12]
}
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	60bb      	str	r3, [r7, #8]
}
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	1e5a      	subs	r2, r3, #1
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	429a      	cmp	r2, r3
 8004974:	d02c      	beq.n	80049d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497a:	2b00      	cmp	r3, #0
 800497c:	d128      	bne.n	80049d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3304      	adds	r3, #4
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe f9f6 	bl	8002d74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <xTaskPriorityDisinherit+0xd4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d903      	bls.n	80049b0 <xTaskPriorityDisinherit+0xa4>
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a0c      	ldr	r2, [pc, #48]	; (80049e0 <xTaskPriorityDisinherit+0xd4>)
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <xTaskPriorityDisinherit+0xd8>)
 80049be:	441a      	add	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f7fe f977 	bl	8002cba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049d0:	697b      	ldr	r3, [r7, #20]
	}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	24004518 	.word	0x24004518
 80049e0:	240049f4 	.word	0x240049f4
 80049e4:	2400451c 	.word	0x2400451c

080049e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049f2:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <prvAddCurrentTaskToDelayedList+0x90>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049f8:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <prvAddCurrentTaskToDelayedList+0x94>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe f9b8 	bl	8002d74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d10a      	bne.n	8004a22 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a12:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4819      	ldr	r0, [pc, #100]	; (8004a80 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a1c:	f7fe f94d 	bl	8002cba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a20:	e026      	b.n	8004a70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4413      	add	r3, r2
 8004a28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d209      	bcs.n	8004a4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a3a:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f7fe f95b 	bl	8002d02 <vListInsert>
}
 8004a4c:	e010      	b.n	8004a70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f7fe f951 	bl	8002d02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a60:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d202      	bcs.n	8004a70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6013      	str	r3, [r2, #0]
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	240049f0 	.word	0x240049f0
 8004a7c:	24004518 	.word	0x24004518
 8004a80:	240049d8 	.word	0x240049d8
 8004a84:	240049a8 	.word	0x240049a8
 8004a88:	240049a4 	.word	0x240049a4
 8004a8c:	24004a0c 	.word	0x24004a0c

08004a90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a9a:	f000 fb07 	bl	80050ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a9e:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <xTimerCreateTimerTask+0x80>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d021      	beq.n	8004aea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004aae:	1d3a      	adds	r2, r7, #4
 8004ab0:	f107 0108 	add.w	r1, r7, #8
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fd fecd 	bl	8002858 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	9202      	str	r2, [sp, #8]
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	2302      	movs	r3, #2
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	460a      	mov	r2, r1
 8004ad0:	4910      	ldr	r1, [pc, #64]	; (8004b14 <xTimerCreateTimerTask+0x84>)
 8004ad2:	4811      	ldr	r0, [pc, #68]	; (8004b18 <xTimerCreateTimerTask+0x88>)
 8004ad4:	f7ff f8b4 	bl	8003c40 <xTaskCreateStatic>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <xTimerCreateTimerTask+0x8c>)
 8004adc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ade:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <xTimerCreateTimerTask+0x8c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	613b      	str	r3, [r7, #16]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b06:	697b      	ldr	r3, [r7, #20]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	24004a48 	.word	0x24004a48
 8004b14:	08005354 	.word	0x08005354
 8004b18:	08004c55 	.word	0x08004c55
 8004b1c:	24004a4c 	.word	0x24004a4c

08004b20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	623b      	str	r3, [r7, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b4e:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <xTimerGenericCommand+0x98>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d02a      	beq.n	8004bac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b05      	cmp	r3, #5
 8004b66:	dc18      	bgt.n	8004b9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b68:	f7ff feb2 	bl	80048d0 <xTaskGetSchedulerState>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d109      	bne.n	8004b86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b72:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <xTimerGenericCommand+0x98>)
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	f107 0110 	add.w	r1, r7, #16
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7e:	f7fe fc77 	bl	8003470 <xQueueGenericSend>
 8004b82:	6278      	str	r0, [r7, #36]	; 0x24
 8004b84:	e012      	b.n	8004bac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b86:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <xTimerGenericCommand+0x98>)
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	f107 0110 	add.w	r1, r7, #16
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2200      	movs	r2, #0
 8004b92:	f7fe fc6d 	bl	8003470 <xQueueGenericSend>
 8004b96:	6278      	str	r0, [r7, #36]	; 0x24
 8004b98:	e008      	b.n	8004bac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <xTimerGenericCommand+0x98>)
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	f107 0110 	add.w	r1, r7, #16
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	f7fe fd61 	bl	800366c <xQueueGenericSendFromISR>
 8004baa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3728      	adds	r7, #40	; 0x28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	24004a48 	.word	0x24004a48

08004bbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <prvProcessExpiredTimer+0x94>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fe f8cd 	bl	8002d74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d022      	beq.n	8004c2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	699a      	ldr	r2, [r3, #24]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	18d1      	adds	r1, r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	6978      	ldr	r0, [r7, #20]
 8004bf6:	f000 f8d1 	bl	8004d9c <prvInsertTimerInActiveList>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01f      	beq.n	8004c40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c00:	2300      	movs	r3, #0
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	2300      	movs	r3, #0
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	6978      	ldr	r0, [r7, #20]
 8004c0c:	f7ff ff88 	bl	8004b20 <xTimerGenericCommand>
 8004c10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d113      	bne.n	8004c40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	60fb      	str	r3, [r7, #12]
}
 8004c2a:	bf00      	nop
 8004c2c:	e7fe      	b.n	8004c2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	4798      	blx	r3
}
 8004c48:	bf00      	nop
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	24004a40 	.word	0x24004a40

08004c54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c5c:	f107 0308 	add.w	r3, r7, #8
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 f857 	bl	8004d14 <prvGetNextExpireTime>
 8004c66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f803 	bl	8004c78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c72:	f000 f8d5 	bl	8004e20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c76:	e7f1      	b.n	8004c5c <prvTimerTask+0x8>

08004c78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c82:	f7ff fa39 	bl	80040f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c86:	f107 0308 	add.w	r3, r7, #8
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f866 	bl	8004d5c <prvSampleTimeNow>
 8004c90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d130      	bne.n	8004cfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <prvProcessTimerOrBlockTask+0x3c>
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d806      	bhi.n	8004cb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ca6:	f7ff fa35 	bl	8004114 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff85 	bl	8004bbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004cb2:	e024      	b.n	8004cfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004cba:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <prvProcessTimerOrBlockTask+0x90>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <prvProcessTimerOrBlockTask+0x50>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <prvProcessTimerOrBlockTask+0x52>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ccc:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <prvProcessTimerOrBlockTask+0x94>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f7fe ff7d 	bl	8003bd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004cde:	f7ff fa19 	bl	8004114 <xTaskResumeAll>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <prvProcessTimerOrBlockTask+0x98>)
 8004cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	f3bf 8f6f 	isb	sy
}
 8004cf8:	e001      	b.n	8004cfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004cfa:	f7ff fa0b 	bl	8004114 <xTaskResumeAll>
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	24004a44 	.word	0x24004a44
 8004d0c:	24004a48 	.word	0x24004a48
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <prvGetNextExpireTime+0x44>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <prvGetNextExpireTime+0x16>
 8004d26:	2201      	movs	r2, #1
 8004d28:	e000      	b.n	8004d2c <prvGetNextExpireTime+0x18>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d105      	bne.n	8004d44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <prvGetNextExpireTime+0x44>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	e001      	b.n	8004d48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d48:	68fb      	ldr	r3, [r7, #12]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	24004a40 	.word	0x24004a40

08004d5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d64:	f7ff fa74 	bl	8004250 <xTaskGetTickCount>
 8004d68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <prvSampleTimeNow+0x3c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d205      	bcs.n	8004d80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d74:	f000 f936 	bl	8004fe4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e002      	b.n	8004d86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d86:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <prvSampleTimeNow+0x3c>)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	24004a50 	.word	0x24004a50

08004d9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d812      	bhi.n	8004de8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	1ad2      	subs	r2, r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d302      	bcc.n	8004dd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e01b      	b.n	8004e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <prvInsertTimerInActiveList+0x7c>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7fd ff8e 	bl	8002d02 <vListInsert>
 8004de6:	e012      	b.n	8004e0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d206      	bcs.n	8004dfe <prvInsertTimerInActiveList+0x62>
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d302      	bcc.n	8004dfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e007      	b.n	8004e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <prvInsertTimerInActiveList+0x80>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f7fd ff7a 	bl	8002d02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e0e:	697b      	ldr	r3, [r7, #20]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	24004a44 	.word	0x24004a44
 8004e1c:	24004a40 	.word	0x24004a40

08004e20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08e      	sub	sp, #56	; 0x38
 8004e24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e26:	e0ca      	b.n	8004fbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	da18      	bge.n	8004e60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e2e:	1d3b      	adds	r3, r7, #4
 8004e30:	3304      	adds	r3, #4
 8004e32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	61fb      	str	r3, [r7, #28]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e56:	6850      	ldr	r0, [r2, #4]
 8004e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e5a:	6892      	ldr	r2, [r2, #8]
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f2c0 80aa 	blt.w	8004fbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d004      	beq.n	8004e7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	3304      	adds	r3, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fd ff7b 	bl	8002d74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e7e:	463b      	mov	r3, r7
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff6b 	bl	8004d5c <prvSampleTimeNow>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	f200 8097 	bhi.w	8004fbe <prvProcessReceivedCommands+0x19e>
 8004e90:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <prvProcessReceivedCommands+0x78>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004ec1 	.word	0x08004ec1
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	08004ec1 	.word	0x08004ec1
 8004ea4:	08004f35 	.word	0x08004f35
 8004ea8:	08004f49 	.word	0x08004f49
 8004eac:	08004f93 	.word	0x08004f93
 8004eb0:	08004ec1 	.word	0x08004ec1
 8004eb4:	08004ec1 	.word	0x08004ec1
 8004eb8:	08004f35 	.word	0x08004f35
 8004ebc:	08004f49 	.word	0x08004f49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	18d1      	adds	r1, r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee0:	f7ff ff5c 	bl	8004d9c <prvInsertTimerInActiveList>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d069      	beq.n	8004fbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d05e      	beq.n	8004fbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	441a      	add	r2, r3
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2100      	movs	r1, #0
 8004f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f12:	f7ff fe05 	bl	8004b20 <xTimerGenericCommand>
 8004f16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d14f      	bne.n	8004fbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	61bb      	str	r3, [r7, #24]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f3a:	f023 0301 	bic.w	r3, r3, #1
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004f46:	e03a      	b.n	8004fbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	617b      	str	r3, [r7, #20]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	18d1      	adds	r1, r2, r3
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8c:	f7ff ff06 	bl	8004d9c <prvInsertTimerInActiveList>
					break;
 8004f90:	e015      	b.n	8004fbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa2:	f7fd fd3f 	bl	8002a24 <vPortFree>
 8004fa6:	e00a      	b.n	8004fbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fba:	e000      	b.n	8004fbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004fbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fbe:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <prvProcessReceivedCommands+0x1c0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	1d39      	adds	r1, r7, #4
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fbec 	bl	80037a4 <xQueueReceive>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f47f af2a 	bne.w	8004e28 <prvProcessReceivedCommands+0x8>
	}
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	3730      	adds	r7, #48	; 0x30
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	24004a48 	.word	0x24004a48

08004fe4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fea:	e048      	b.n	800507e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fec:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <prvSwitchTimerLists+0xc0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff6:	4b2b      	ldr	r3, [pc, #172]	; (80050a4 <prvSwitchTimerLists+0xc0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3304      	adds	r3, #4
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd feb5 	bl	8002d74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02e      	beq.n	800507e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	429a      	cmp	r2, r3
 8005030:	d90e      	bls.n	8005050 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800503e:	4b19      	ldr	r3, [pc, #100]	; (80050a4 <prvSwitchTimerLists+0xc0>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3304      	adds	r3, #4
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f7fd fe5a 	bl	8002d02 <vListInsert>
 800504e:	e016      	b.n	800507e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2300      	movs	r3, #0
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	2100      	movs	r1, #0
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff fd60 	bl	8004b20 <xTimerGenericCommand>
 8005060:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	603b      	str	r3, [r7, #0]
}
 800507a:	bf00      	nop
 800507c:	e7fe      	b.n	800507c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <prvSwitchTimerLists+0xc0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1b1      	bne.n	8004fec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <prvSwitchTimerLists+0xc0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <prvSwitchTimerLists+0xc4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <prvSwitchTimerLists+0xc0>)
 8005094:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005096:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <prvSwitchTimerLists+0xc4>)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6013      	str	r3, [r2, #0]
}
 800509c:	bf00      	nop
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	24004a40 	.word	0x24004a40
 80050a8:	24004a44 	.word	0x24004a44

080050ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050b2:	f7fd ffb7 	bl	8003024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050b6:	4b15      	ldr	r3, [pc, #84]	; (800510c <prvCheckForValidListAndQueue+0x60>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d120      	bne.n	8005100 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050be:	4814      	ldr	r0, [pc, #80]	; (8005110 <prvCheckForValidListAndQueue+0x64>)
 80050c0:	f7fd fdce 	bl	8002c60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050c4:	4813      	ldr	r0, [pc, #76]	; (8005114 <prvCheckForValidListAndQueue+0x68>)
 80050c6:	f7fd fdcb 	bl	8002c60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <prvCheckForValidListAndQueue+0x6c>)
 80050cc:	4a10      	ldr	r2, [pc, #64]	; (8005110 <prvCheckForValidListAndQueue+0x64>)
 80050ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050d0:	4b12      	ldr	r3, [pc, #72]	; (800511c <prvCheckForValidListAndQueue+0x70>)
 80050d2:	4a10      	ldr	r2, [pc, #64]	; (8005114 <prvCheckForValidListAndQueue+0x68>)
 80050d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050d6:	2300      	movs	r3, #0
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <prvCheckForValidListAndQueue+0x74>)
 80050dc:	4a11      	ldr	r2, [pc, #68]	; (8005124 <prvCheckForValidListAndQueue+0x78>)
 80050de:	2110      	movs	r1, #16
 80050e0:	200a      	movs	r0, #10
 80050e2:	f7fe f929 	bl	8003338 <xQueueGenericCreateStatic>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4a08      	ldr	r2, [pc, #32]	; (800510c <prvCheckForValidListAndQueue+0x60>)
 80050ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <prvCheckForValidListAndQueue+0x60>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <prvCheckForValidListAndQueue+0x60>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	490b      	ldr	r1, [pc, #44]	; (8005128 <prvCheckForValidListAndQueue+0x7c>)
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe fd42 	bl	8003b84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005100:	f7fd ffc0 	bl	8003084 <vPortExitCritical>
}
 8005104:	bf00      	nop
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	24004a48 	.word	0x24004a48
 8005110:	24004a18 	.word	0x24004a18
 8005114:	24004a2c 	.word	0x24004a2c
 8005118:	24004a40 	.word	0x24004a40
 800511c:	24004a44 	.word	0x24004a44
 8005120:	24004af4 	.word	0x24004af4
 8005124:	24004a54 	.word	0x24004a54
 8005128:	0800535c 	.word	0x0800535c

0800512c <__libc_init_array>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	4d0d      	ldr	r5, [pc, #52]	; (8005164 <__libc_init_array+0x38>)
 8005130:	4c0d      	ldr	r4, [pc, #52]	; (8005168 <__libc_init_array+0x3c>)
 8005132:	1b64      	subs	r4, r4, r5
 8005134:	10a4      	asrs	r4, r4, #2
 8005136:	2600      	movs	r6, #0
 8005138:	42a6      	cmp	r6, r4
 800513a:	d109      	bne.n	8005150 <__libc_init_array+0x24>
 800513c:	4d0b      	ldr	r5, [pc, #44]	; (800516c <__libc_init_array+0x40>)
 800513e:	4c0c      	ldr	r4, [pc, #48]	; (8005170 <__libc_init_array+0x44>)
 8005140:	f000 f8f2 	bl	8005328 <_init>
 8005144:	1b64      	subs	r4, r4, r5
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	2600      	movs	r6, #0
 800514a:	42a6      	cmp	r6, r4
 800514c:	d105      	bne.n	800515a <__libc_init_array+0x2e>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	f855 3b04 	ldr.w	r3, [r5], #4
 8005154:	4798      	blx	r3
 8005156:	3601      	adds	r6, #1
 8005158:	e7ee      	b.n	8005138 <__libc_init_array+0xc>
 800515a:	f855 3b04 	ldr.w	r3, [r5], #4
 800515e:	4798      	blx	r3
 8005160:	3601      	adds	r6, #1
 8005162:	e7f2      	b.n	800514a <__libc_init_array+0x1e>
 8005164:	080053f8 	.word	0x080053f8
 8005168:	080053f8 	.word	0x080053f8
 800516c:	080053f8 	.word	0x080053f8
 8005170:	080053fc 	.word	0x080053fc

08005174 <__retarget_lock_acquire_recursive>:
 8005174:	4770      	bx	lr

08005176 <__retarget_lock_release_recursive>:
 8005176:	4770      	bx	lr

08005178 <memcpy>:
 8005178:	440a      	add	r2, r1
 800517a:	4291      	cmp	r1, r2
 800517c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005180:	d100      	bne.n	8005184 <memcpy+0xc>
 8005182:	4770      	bx	lr
 8005184:	b510      	push	{r4, lr}
 8005186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800518a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800518e:	4291      	cmp	r1, r2
 8005190:	d1f9      	bne.n	8005186 <memcpy+0xe>
 8005192:	bd10      	pop	{r4, pc}

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d100      	bne.n	800519e <memset+0xa>
 800519c:	4770      	bx	lr
 800519e:	f803 1b01 	strb.w	r1, [r3], #1
 80051a2:	e7f9      	b.n	8005198 <memset+0x4>

080051a4 <cleanup_glue>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	460c      	mov	r4, r1
 80051a8:	6809      	ldr	r1, [r1, #0]
 80051aa:	4605      	mov	r5, r0
 80051ac:	b109      	cbz	r1, 80051b2 <cleanup_glue+0xe>
 80051ae:	f7ff fff9 	bl	80051a4 <cleanup_glue>
 80051b2:	4621      	mov	r1, r4
 80051b4:	4628      	mov	r0, r5
 80051b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ba:	f000 b869 	b.w	8005290 <_free_r>
	...

080051c0 <_reclaim_reent>:
 80051c0:	4b2c      	ldr	r3, [pc, #176]	; (8005274 <_reclaim_reent+0xb4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4283      	cmp	r3, r0
 80051c6:	b570      	push	{r4, r5, r6, lr}
 80051c8:	4604      	mov	r4, r0
 80051ca:	d051      	beq.n	8005270 <_reclaim_reent+0xb0>
 80051cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051ce:	b143      	cbz	r3, 80051e2 <_reclaim_reent+0x22>
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d14a      	bne.n	800526c <_reclaim_reent+0xac>
 80051d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051d8:	6819      	ldr	r1, [r3, #0]
 80051da:	b111      	cbz	r1, 80051e2 <_reclaim_reent+0x22>
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 f857 	bl	8005290 <_free_r>
 80051e2:	6961      	ldr	r1, [r4, #20]
 80051e4:	b111      	cbz	r1, 80051ec <_reclaim_reent+0x2c>
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 f852 	bl	8005290 <_free_r>
 80051ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80051ee:	b111      	cbz	r1, 80051f6 <_reclaim_reent+0x36>
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 f84d 	bl	8005290 <_free_r>
 80051f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051f8:	b111      	cbz	r1, 8005200 <_reclaim_reent+0x40>
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f848 	bl	8005290 <_free_r>
 8005200:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005202:	b111      	cbz	r1, 800520a <_reclaim_reent+0x4a>
 8005204:	4620      	mov	r0, r4
 8005206:	f000 f843 	bl	8005290 <_free_r>
 800520a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800520c:	b111      	cbz	r1, 8005214 <_reclaim_reent+0x54>
 800520e:	4620      	mov	r0, r4
 8005210:	f000 f83e 	bl	8005290 <_free_r>
 8005214:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005216:	b111      	cbz	r1, 800521e <_reclaim_reent+0x5e>
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f839 	bl	8005290 <_free_r>
 800521e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005220:	b111      	cbz	r1, 8005228 <_reclaim_reent+0x68>
 8005222:	4620      	mov	r0, r4
 8005224:	f000 f834 	bl	8005290 <_free_r>
 8005228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800522a:	b111      	cbz	r1, 8005232 <_reclaim_reent+0x72>
 800522c:	4620      	mov	r0, r4
 800522e:	f000 f82f 	bl	8005290 <_free_r>
 8005232:	69a3      	ldr	r3, [r4, #24]
 8005234:	b1e3      	cbz	r3, 8005270 <_reclaim_reent+0xb0>
 8005236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005238:	4620      	mov	r0, r4
 800523a:	4798      	blx	r3
 800523c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800523e:	b1b9      	cbz	r1, 8005270 <_reclaim_reent+0xb0>
 8005240:	4620      	mov	r0, r4
 8005242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005246:	f7ff bfad 	b.w	80051a4 <cleanup_glue>
 800524a:	5949      	ldr	r1, [r1, r5]
 800524c:	b941      	cbnz	r1, 8005260 <_reclaim_reent+0xa0>
 800524e:	3504      	adds	r5, #4
 8005250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005252:	2d80      	cmp	r5, #128	; 0x80
 8005254:	68d9      	ldr	r1, [r3, #12]
 8005256:	d1f8      	bne.n	800524a <_reclaim_reent+0x8a>
 8005258:	4620      	mov	r0, r4
 800525a:	f000 f819 	bl	8005290 <_free_r>
 800525e:	e7ba      	b.n	80051d6 <_reclaim_reent+0x16>
 8005260:	680e      	ldr	r6, [r1, #0]
 8005262:	4620      	mov	r0, r4
 8005264:	f000 f814 	bl	8005290 <_free_r>
 8005268:	4631      	mov	r1, r6
 800526a:	e7ef      	b.n	800524c <_reclaim_reent+0x8c>
 800526c:	2500      	movs	r5, #0
 800526e:	e7ef      	b.n	8005250 <_reclaim_reent+0x90>
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	bf00      	nop
 8005274:	24000014 	.word	0x24000014

08005278 <__malloc_lock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_lock+0x8>)
 800527a:	f7ff bf7b 	b.w	8005174 <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	24004b44 	.word	0x24004b44

08005284 <__malloc_unlock>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__malloc_unlock+0x8>)
 8005286:	f7ff bf76 	b.w	8005176 <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	24004b44 	.word	0x24004b44

08005290 <_free_r>:
 8005290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005292:	2900      	cmp	r1, #0
 8005294:	d044      	beq.n	8005320 <_free_r+0x90>
 8005296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529a:	9001      	str	r0, [sp, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f1a1 0404 	sub.w	r4, r1, #4
 80052a2:	bfb8      	it	lt
 80052a4:	18e4      	addlt	r4, r4, r3
 80052a6:	f7ff ffe7 	bl	8005278 <__malloc_lock>
 80052aa:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <_free_r+0x94>)
 80052ac:	9801      	ldr	r0, [sp, #4]
 80052ae:	6813      	ldr	r3, [r2, #0]
 80052b0:	b933      	cbnz	r3, 80052c0 <_free_r+0x30>
 80052b2:	6063      	str	r3, [r4, #4]
 80052b4:	6014      	str	r4, [r2, #0]
 80052b6:	b003      	add	sp, #12
 80052b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052bc:	f7ff bfe2 	b.w	8005284 <__malloc_unlock>
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	d908      	bls.n	80052d6 <_free_r+0x46>
 80052c4:	6825      	ldr	r5, [r4, #0]
 80052c6:	1961      	adds	r1, r4, r5
 80052c8:	428b      	cmp	r3, r1
 80052ca:	bf01      	itttt	eq
 80052cc:	6819      	ldreq	r1, [r3, #0]
 80052ce:	685b      	ldreq	r3, [r3, #4]
 80052d0:	1949      	addeq	r1, r1, r5
 80052d2:	6021      	streq	r1, [r4, #0]
 80052d4:	e7ed      	b.n	80052b2 <_free_r+0x22>
 80052d6:	461a      	mov	r2, r3
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	b10b      	cbz	r3, 80052e0 <_free_r+0x50>
 80052dc:	42a3      	cmp	r3, r4
 80052de:	d9fa      	bls.n	80052d6 <_free_r+0x46>
 80052e0:	6811      	ldr	r1, [r2, #0]
 80052e2:	1855      	adds	r5, r2, r1
 80052e4:	42a5      	cmp	r5, r4
 80052e6:	d10b      	bne.n	8005300 <_free_r+0x70>
 80052e8:	6824      	ldr	r4, [r4, #0]
 80052ea:	4421      	add	r1, r4
 80052ec:	1854      	adds	r4, r2, r1
 80052ee:	42a3      	cmp	r3, r4
 80052f0:	6011      	str	r1, [r2, #0]
 80052f2:	d1e0      	bne.n	80052b6 <_free_r+0x26>
 80052f4:	681c      	ldr	r4, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	6053      	str	r3, [r2, #4]
 80052fa:	4421      	add	r1, r4
 80052fc:	6011      	str	r1, [r2, #0]
 80052fe:	e7da      	b.n	80052b6 <_free_r+0x26>
 8005300:	d902      	bls.n	8005308 <_free_r+0x78>
 8005302:	230c      	movs	r3, #12
 8005304:	6003      	str	r3, [r0, #0]
 8005306:	e7d6      	b.n	80052b6 <_free_r+0x26>
 8005308:	6825      	ldr	r5, [r4, #0]
 800530a:	1961      	adds	r1, r4, r5
 800530c:	428b      	cmp	r3, r1
 800530e:	bf04      	itt	eq
 8005310:	6819      	ldreq	r1, [r3, #0]
 8005312:	685b      	ldreq	r3, [r3, #4]
 8005314:	6063      	str	r3, [r4, #4]
 8005316:	bf04      	itt	eq
 8005318:	1949      	addeq	r1, r1, r5
 800531a:	6021      	streq	r1, [r4, #0]
 800531c:	6054      	str	r4, [r2, #4]
 800531e:	e7ca      	b.n	80052b6 <_free_r+0x26>
 8005320:	b003      	add	sp, #12
 8005322:	bd30      	pop	{r4, r5, pc}
 8005324:	24004b48 	.word	0x24004b48

08005328 <_init>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr

08005334 <_fini>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr
