<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [FlashTestRTOS_CM7\FlashTestRTOS_CM7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image FlashTestRTOS_CM7\FlashTestRTOS_CM7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Feb 25 18:46:17 2023
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MX_CANopen_Init &rArr; codrvCanInit &rArr; codrvCanInitController &rArr; codrvCanSetBitRate &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[cd]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[87]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[87]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[15a]">pdoTransmitData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[121]">icoTransmitMessage</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[87]">ADC3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[89]">BDMA_Channel0_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[8b]">BDMA_Channel2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[8c]">BDMA_Channel3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[8d]">BDMA_Channel4_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[8e]">BDMA_Channel5_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[8f]">BDMA_Channel6_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[90]">BDMA_Channel7_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32h7xx_it_1.o(i.BusFault_Handler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[67]">CEC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[4d]">CM4_SEV_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[4c]">CM7_SEV_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[91]">COMP1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[98]">CRS_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[77]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[78]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[79]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[7a]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[6f]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[88]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32h7xx_it_1.o(i.DebugMon_Handler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[99]">ECC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[49]">ETH_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[4a]">ETH_WKUP_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from stm32h7xx_it_1.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[20]">FDCAN1_IT0_IRQHandler</a> from cpu_stm32_fdcan_hal.o(i.FDCAN1_IT0_IRQHandler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[22]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[21]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[23]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[4b]">FDCAN_CAL_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[3c]">FMC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[9b]">HOLD_CORE_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[76]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[70]">HRTIM1_Master_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[71]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[72]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[73]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[74]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[75]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[85]">HSEM1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[86]">HSEM2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32h7xx_it_1.o(i.HardFault_Handler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[69]">I2C4_ER_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[68]">I2C4_EV_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[82]">JPEG_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[66]">LPTIM1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[92]">LPTIM2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[93]">LPTIM3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[94]">LPTIM4_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[95]">LPTIM5_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[96]">LPUART1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[81]">MDIOS_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[80]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[83]">MDMA_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32h7xx_it_1.o(i.MemManage_Handler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32h7xx_it_1.o(i.NMI_Handler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[6c]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[6b]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[6e]">OTG_FS_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[6d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[e]">PVD_AVD_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[65]">QUADSPI_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[59]">RNG_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[64]">SAI2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[7b]">SAI3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[9a]">SAI4_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[3d]">SDMMC1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[84]">SDMMC2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[6a]">SPDIF_RX_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[7c]">SWPMI1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[ae]">StartDefaultTask</a> from main_1.o(i.StartDefaultTask) referenced from main_1.o(i.main)
 <LI><a href="#[c]">SysTick_Handler</a> from cmsis_os2.o(i.SysTick_Handler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[9d]">SystemInit</a> from system_stm32h7xx_dualcore_boot_cm4_cm7.o(i.SystemInit) referenced from startup_stm32h745xx_cm7.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[7d]">TIM15_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[7e]">TIM16_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[7f]">TIM17_IRQHandler</a> from stm32h7xx_it_1.o(i.TIM17_IRQHandler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32h7xx_it_1.o(i.UsageFault_Handler) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[9c]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[97]">WWDG_RST_IRQHandler</a> from startup_stm32h745xx_cm7.o(.text) referenced from startup_stm32h745xx_cm7.o(RESET)
 <LI><a href="#[b4]">__main</a> from __main.o(!!!main) referenced from startup_stm32h745xx_cm7.o(.text)
 <LI><a href="#[a8]">canInd</a> from app_canopen.o(i.canInd) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[a9]">commInd</a> from app_canopen.o(i.commInd) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[ad]">demoTimerFct</a> from co_queue.o(i.demoTimerFct) referenced from co_queue.o(i.icoTransmitMessage)
 <LI><a href="#[ab]">hbProdSendMessage</a> from co_errctrl.o(i.hbProdSendMessage) referenced from co_errctrl.o(i.icoHbProdStart)
 <LI><a href="#[a0]">hbState</a> from app_canopen.o(i.hbState) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[a6]">ledGreenInd</a> from app_canopen.o(i.ledGreenInd) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[a7]">ledRedInd</a> from app_canopen.o(i.ledRedInd) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[b1]">ledTimerInd</a> from co_led.o(i.ledTimerInd) referenced from co_led.o(i.startLedTimer)
 <LI><a href="#[af]">myTask</a> from main_1.o(i.myTask) referenced from main_1.o(i.main)
 <LI><a href="#[9f]">nmtInd</a> from app_canopen.o(i.nmtInd) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[aa]">pdoEventTimer</a> from co_pdo.o(i.pdoEventTimer) referenced from co_pdo.o(i.coPdoReqNr)
 <LI><a href="#[aa]">pdoEventTimer</a> from co_pdo.o(i.pdoEventTimer) referenced from co_pdo.o(i.setupTrPdoTimer)
 <LI><a href="#[a4]">pdoInd</a> from app_canopen.o(i.pdoInd) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[a5]">pdoRecEvent</a> from app_canopen.o(i.pdoRecEvent) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[b2]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[b0]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[b3]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[a2]">sdoServerCheckWriteInd</a> from app_canopen.o(i.sdoServerCheckWriteInd) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[a1]">sdoServerReadInd</a> from app_canopen.o(i.sdoServerReadInd) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[a3]">sdoServerWriteInd</a> from app_canopen.o(i.sdoServerWriteInd) referenced from app_canopen.o(i.MX_CANopen_Init)
 <LI><a href="#[ac]">syncEventTimer</a> from co_sync.o(i.syncEventTimer) referenced from co_sync.o(i.icoSyncObjChanged)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b4]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b5]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b7]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[202]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[203]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[204]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[205]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[206]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[bd]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[207]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[208]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[209]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[210]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[211]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[212]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[213]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[214]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[215]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[216]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[217]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[218]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[219]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[21b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[21c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[21d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[21e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[21f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[220]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[221]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b6]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[222]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ba]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bc]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[223]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[be]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_CANopen_Init &rArr; codrvCanInit &rArr; codrvCanInitController &rArr; codrvCanSetBitRate &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[224]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ce]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[225]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[1fa]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1f9]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[1f2]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CM4_SEV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CM7_SEV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>HOLD_CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>HSEM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>WWDG_RST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h745xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h745xx_cm7.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvTimerSetup
</UL>

<P><STRONG><a name="[226]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyPack
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyUnpack
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyPack
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueReceiveBufferIsFilled
</UL>

<P><STRONG><a name="[c6]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[227]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[228]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerVarInit
</UL>

<P><STRONG><a name="[22b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[22d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c9]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bb]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c0]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[231]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[232]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[233]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it_1.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[235]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it_1.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_it_1.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; osThreadFlagsSet &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main_1.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[20]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cpu_stm32_fdcan_hal.o(i.FDCAN1_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FDCAN1_IT0_IRQHandler &rArr; codrvCanReceiveInterrupt &rArr; coQueueGetReceiveBuffer &rArr; coQueueReceiveBufferIsFilled
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmitInterrupt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanReceiveInterrupt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>Flash_Read_Data</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, memory_management.o(i.Flash_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_Read_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myTask
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[17a]"></a>HAL_FDCAN_AbortTxRequest</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_AbortTxRequest))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmit
</UL>

<P><STRONG><a name="[16d]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanEnableInterrupt
</UL>

<P><STRONG><a name="[d3]"></a>HAL_FDCAN_AddMessageToTxFifoQ</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_AddMessageToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmit
</UL>

<P><STRONG><a name="[179]"></a>HAL_FDCAN_GetLatestTxFifoQRequestBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_GetLatestTxFifoQRequestBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmit
</UL>

<P><STRONG><a name="[16e]"></a>HAL_FDCAN_GetProtocolStatus</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_GetProtocolStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_GetProtocolStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInterrupt
</UL>

<P><STRONG><a name="[173]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 400 bytes, Stack size 20 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanReceiveInterrupt
</UL>

<P><STRONG><a name="[178]"></a>HAL_FDCAN_GetTxFifoFreeLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_GetTxFifoFreeLevel))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmit
</UL>

<P><STRONG><a name="[d5]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 572 bytes, Stack size 104 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CalcultateRamBlockAddresses
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetBitRate
</UL>

<P><STRONG><a name="[17b]"></a>HAL_FDCAN_IsTxBufferMessagePending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_IsTxBufferMessagePending))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmit
</UL>

<P><STRONG><a name="[d6]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 126 bytes, Stack size 224 bytes, stm32h7xx_hal_msp_1.o(i.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_Start))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanEnable
</UL>

<P><STRONG><a name="[16a]"></a>HAL_FDCAN_Stop</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(i.HAL_FDCAN_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanDisable
</UL>

<P><STRONG><a name="[dd]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_it_1.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; osThreadFlagsSet &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; osThreadFlagsSet &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_GPIO_Init</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[d7]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[e0]"></a>HAL_GetTickFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>

<P><STRONG><a name="[df]"></a>HAL_IncTick</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_canopen.o(i.HAL_IncTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_IncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[e2]"></a>HAL_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>HAL_InitTick</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, stm32h7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_msp_1.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanEnableInterrupt
</UL>

<P><STRONG><a name="[175]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetTxInterrupt
</UL>

<P><STRONG><a name="[e7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[da]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2472 bytes, Stack size 48 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>

<P><STRONG><a name="[f1]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f2]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvTimerSetup
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[f3]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1410 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17e]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvTimerSetup
</UL>

<P><STRONG><a name="[f5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvTimerSetup
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; HAL_IncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_1.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; HAL_IncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it_1.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>MX_CANopen_Init</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, app_canopen.o(i.MX_CANopen_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = MX_CANopen_Init &rArr; codrvCanInit &rArr; codrvCanInitController &rArr; codrvCanSetBitRate &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvTimerSetup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvHardwareInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanEnable
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_SDO_SERVER_WRITE
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_SDO_SERVER_READ
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_SDO_SERVER_CHECK_WRITE
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_PDO_REC_EVENT
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_PDO
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_NMT
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_LED_RED
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_LED_GREEN
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_ERRCTRL
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_COMM_EVENT
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_CAN_STATE
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyWriteReq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it_1.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it_1.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>StartDefaultTask</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main_1.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StartDefaultTask &rArr; Flash_Read_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmsis_os2.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>SystemClock_Config</STRONG> (Thumb, 162 bytes, Stack size 136 bytes, main_1.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>SystemInit</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, system_stm32h7xx_dualcore_boot_cm4_cm7.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>TIM17_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it_1.o(i.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; HAL_IncTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32h7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it_1.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h745xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>coCanOpenStackInit</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, gen_objdict.o(i.coCanOpenStackInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = coCanOpenStackInit &rArr; coNmtInit &rArr; nmtResetComm &rArr; icoPdoReset &rArr; icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coSyncInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coSdoServerInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdInitOdPtr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLssInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coErrorCtrlInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyProducerInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyConsumerInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[122]"></a>coCanOpenStackVarInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, co_stackinit.o(i.coCanOpenStackVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = coCanOpenStackVarInit &rArr; icoSdoServerVarInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdAccessVarInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtVarInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoLssVarInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoLedVarInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlVarInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyVarInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCommTaskVarInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncVarInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueVarInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobHandlerVarInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerVarInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[13c]"></a>coCommStateEvent</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, co_commtask.o(i.coCommStateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorBehavior
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
</UL>

<P><STRONG><a name="[162]"></a>coCommTaskSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, co_commtask.o(i.coCommTaskSet))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueReceiveBufferIsFilled
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerTick
</UL>

<P><STRONG><a name="[12a]"></a>coEmcyConsumerInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, co_emcy.o(i.coEmcyConsumerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = coEmcyConsumerInit &rArr; icoCobCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[128]"></a>coEmcyProducerInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_emcy.o(i.coEmcyProducerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coEmcyProducerInit &rArr; icoCobCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[113]"></a>coEmcyWriteReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, co_emcy.o(i.coEmcyWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = coEmcyWriteReq &rArr; classicalEmergency &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classicalEmergency
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[127]"></a>coErrorCtrlInit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, co_errctrl.o(i.coErrorCtrlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = coErrorCtrlInit &rArr; coOdGetDefaultVal_u8 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHbConsumer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[10f]"></a>coEventRegister_CAN_STATE</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_commtask.o(i.coEventRegister_CAN_STATE))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[110]"></a>coEventRegister_COMM_EVENT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_commtask.o(i.coEventRegister_COMM_EVENT))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[107]"></a>coEventRegister_ERRCTRL</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_errctrl.o(i.coEventRegister_ERRCTRL))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[10d]"></a>coEventRegister_LED_GREEN</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, co_led.o(i.coEventRegister_LED_GREEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coEventRegister_LED_GREEN &rArr; ledGreenInd
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledGreenInd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[10e]"></a>coEventRegister_LED_RED</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, co_led.o(i.coEventRegister_LED_RED))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = coEventRegister_LED_RED &rArr; ledRedInd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRedInd
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[106]"></a>coEventRegister_NMT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_nmt.o(i.coEventRegister_NMT))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[10b]"></a>coEventRegister_PDO</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_pdo.o(i.coEventRegister_PDO))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[10c]"></a>coEventRegister_PDO_REC_EVENT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_pdo.o(i.coEventRegister_PDO_REC_EVENT))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[109]"></a>coEventRegister_SDO_SERVER_CHECK_WRITE</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_sdoserv.o(i.coEventRegister_SDO_SERVER_CHECK_WRITE))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[108]"></a>coEventRegister_SDO_SERVER_READ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_sdoserv.o(i.coEventRegister_SDO_SERVER_READ))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[10a]"></a>coEventRegister_SDO_SERVER_WRITE</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_sdoserv.o(i.coEventRegister_SDO_SERVER_WRITE))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[125]"></a>coLedInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, co_led.o(i.coLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = coLedInit &rArr; coLedSetRed &rArr; startLedTimer &rArr; coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[144]"></a>coLedSetGreen</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, co_led.o(i.coLedSetGreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = coLedSetGreen &rArr; startLedTimer &rArr; coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLedTimer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLedTimer
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledGreenInd
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedInit
</UL>

<P><STRONG><a name="[145]"></a>coLedSetRed</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, co_led.o(i.coLedSetRed))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = coLedSetRed &rArr; startLedTimer &rArr; coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLedTimer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLedTimer
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRedInd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetState
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedInit
</UL>

<P><STRONG><a name="[13e]"></a>coLedSetState</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, co_led.o(i.coLedSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = coLedSetState &rArr; coLedSetRed &rArr; startLedTimer &rArr; coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
</UL>

<P><STRONG><a name="[12d]"></a>coLssInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, co_lss.o(i.coLssInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = coLssInit &rArr; icoLssReset &rArr; icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoLssReset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[112]"></a>coNmtGetNodeId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, co_nmt.o(i.coNmtGetNodeId))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerSetDefaultValue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
</UL>

<P><STRONG><a name="[120]"></a>coNmtGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, co_nmt.o(i.coNmtGetState))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbProdSendMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classicalEmergency
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorBehavior
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncEventTimer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSyncHandling
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
</UL>

<P><STRONG><a name="[12e]"></a>coNmtInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, co_nmt.o(i.coNmtInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = coNmtInit &rArr; nmtResetComm &rArr; icoPdoReset &rArr; icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[14b]"></a>coNumMemcpyPack</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, co_odaccess.o(i.coNumMemcpyPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coNumMemcpyPack &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoReceiveData
</UL>

<P><STRONG><a name="[14e]"></a>coNumMemcpyUnpack</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, co_odaccess.o(i.coNumMemcpyUnpack))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoTransmitData
</UL>

<P><STRONG><a name="[14f]"></a>coOdGetDefaultVal_u16</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, co_odaccess.o(i.coOdGetDefaultVal_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = coOdGetDefaultVal_u16 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlSetDefaultValue
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
</UL>

<P><STRONG><a name="[151]"></a>coOdGetDefaultVal_u32</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, co_odaccess.o(i.coOdGetDefaultVal_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = coOdGetDefaultVal_u32 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncSetDefaultValue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlSetDefaultValue
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyConsumerSetDefaultValue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoRecMapTable
</UL>

<P><STRONG><a name="[141]"></a>coOdGetDefaultVal_u8</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, co_odaccess.o(i.coOdGetDefaultVal_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = coOdGetDefaultVal_u8 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncSetDefaultValue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlSetDefaultValue
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coErrorCtrlInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoRecMapTable
</UL>

<P><STRONG><a name="[11f]"></a>coOdGetObjAddr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, co_odaccess.o(i.coOdGetObjAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = coOdGetObjAddr &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classicalEmergency
</UL>

<P><STRONG><a name="[150]"></a>coOdGetObjDescPtr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, co_odaccess.o(i.coOdGetObjDescPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjDescIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAddr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u16
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoReceiveData
</UL>

<P><STRONG><a name="[19e]"></a>coOdGetObjSize</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, co_odaccess.o(i.coOdGetObjSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = coOdGetObjSize
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
</UL>

<P><STRONG><a name="[123]"></a>coOdInitOdPtr</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, co_odaccess.o(i.coOdInitOdPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = coOdInitOdPtr &rArr; icoOdReset
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdReset
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[12c]"></a>coPdoReceiveInit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, co_pdo.o(i.coPdoReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = coPdoReceiveInit &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoRecMapTable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceivePdo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[158]"></a>coPdoReqNr</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, co_pdo.o(i.coPdoReqNr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerIsActive
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTransmitPdo
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoTransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoOperational
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoEventTimer
</UL>

<P><STRONG><a name="[12b]"></a>coPdoTransmitInit</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, co_pdo.o(i.coPdoTransmitInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = coPdoTransmitInit &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransmitPdo
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTrPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[17c]"></a>coQueueGetNextTransmitMessage</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, co_queue.o(i.coQueueGetNextTransmitMessage))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmitInterrupt
</UL>

<P><STRONG><a name="[160]"></a>coQueueGetReceiveBuffer</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, co_queue.o(i.coQueueGetReceiveBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = coQueueGetReceiveBuffer &rArr; coQueueReceiveBufferIsFilled
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueReceiveBufferIsFilled
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanReceiveInterrupt
</UL>

<P><STRONG><a name="[1c1]"></a>coQueueInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, co_queue.o(i.coQueueInit))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
</UL>

<P><STRONG><a name="[17d]"></a>coQueueMsgTransmitted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, co_queue.o(i.coQueueMsgTransmitted))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmitInterrupt
</UL>

<P><STRONG><a name="[161]"></a>coQueueReceiveBufferIsFilled</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, co_queue.o(i.coQueueReceiveBufferIsFilled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = coQueueReceiveBufferIsFilled
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommTaskSet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueGetReceiveBuffer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanReceiveInterrupt
</UL>

<P><STRONG><a name="[126]"></a>coSdoServerInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, co_sdoserv.o(i.coSdoServerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = coSdoServerInit &rArr; icoCobCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSdoServer
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[129]"></a>coSyncInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, co_sync.o(i.coSyncInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = coSyncInit &rArr; icoCobCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[124]"></a>coTimerInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, co_timer.o(i.coTimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackInit
</UL>

<P><STRONG><a name="[15b]"></a>coTimerIsActive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_timer.o(i.coTimerIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
</UL>

<P><STRONG><a name="[15c]"></a>coTimerStart</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, co_timer.o(i.coTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncObjChanged
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLedTimer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
</UL>

<P><STRONG><a name="[164]"></a>coTimerStop</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, co_timer.o(i.coTimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncObjChanged
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLedTimer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupHbConsumer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
</UL>

<P><STRONG><a name="[e1]"></a>coTimerTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, co_timer.o(i.coTimerTick))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommTaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>

<P><STRONG><a name="[169]"></a>codrvCanDisable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = codrvCanDisable &rArr; HAL_FDCAN_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetBitRate
</UL>

<P><STRONG><a name="[111]"></a>codrvCanEnable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = codrvCanEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[16c]"></a>codrvCanEnableInterrupt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cpu_stm32_fdcan_hal.o(i.codrvCanEnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = codrvCanEnableInterrupt &rArr; HAL_FDCAN_ActivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInitController
</UL>

<P><STRONG><a name="[16f]"></a>codrvCanErrorGetFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, codrv_error.o(i.codrvCanErrorGetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmitInterrupt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInterrupt
</UL>

<P><STRONG><a name="[172]"></a>codrvCanErrorInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, codrv_error.o(i.codrvCanErrorInit))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInitController
</UL>

<P><STRONG><a name="[d2]"></a>codrvCanErrorInterrupt</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanErrorInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = codrvCanErrorInterrupt &rArr; HAL_FDCAN_GetProtocolStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetProtocolStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorGetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>codrvCanInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = codrvCanInit &rArr; codrvCanInitController &rArr; codrvCanSetBitRate &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInitController
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[d1]"></a>codrvCanReceiveInterrupt</STRONG> (Thumb, 108 bytes, Stack size 120 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanReceiveInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = codrvCanReceiveInterrupt &rArr; coQueueGetReceiveBuffer &rArr; coQueueReceiveBufferIsFilled
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueReceiveBufferIsFilled
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueGetReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>codrvCanSetBitRate</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanSetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = codrvCanSetBitRate &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInitController
</UL>

<P><STRONG><a name="[174]"></a>codrvCanSetTxInterrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_stm32_fdcan_hal.o(i.codrvCanSetTxInterrupt))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanStartTransmission
</UL>

<P><STRONG><a name="[176]"></a>codrvCanStartTransmission</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanStartTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = codrvCanStartTransmission
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetTxInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveInhibitToTransmitList
</UL>

<P><STRONG><a name="[d0]"></a>codrvCanTransmitInterrupt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanTransmitInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = codrvCanTransmitInterrupt &rArr; codrvCanTransmit &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorGetFlags
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueMsgTransmitted
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueGetNextTransmitMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>codrvHardwareInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu_stm32_fdcan_hal.o(i.codrvHardwareInit))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[104]"></a>codrvTimerSetup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cpu_stm32_fdcan_hal.o(i.codrvTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = codrvTimerSetup &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
</UL>

<P><STRONG><a name="[180]"></a>icoCobChangeType</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, co_cobhandler.o(i.icoCobChangeType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoCobChangeType &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCobData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cobFilterSet
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncObjChanged
</UL>

<P><STRONG><a name="[13f]"></a>icoCobCreate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, co_cobhandler.o(i.icoCobCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoCobCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueSetSyncId
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCobData
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coSyncInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coSdoServerInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLssInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coErrorCtrlInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyProducerInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyConsumerInit
</UL>

<P><STRONG><a name="[181]"></a>icoCobDisable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_cobhandler.o(i.icoCobDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoCobDisable &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCobData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cobFilterSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisableAll
</UL>

<P><STRONG><a name="[182]"></a>icoCobDisableAll</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, co_cobhandler.o(i.icoCobDisableAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icoCobDisableAll &rArr; icoCobDisable &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCobData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[1a5]"></a>icoCobGetPointer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_cobhandler.o(i.icoCobGetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveInhibitToTransmitList
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueDeleteInhibit
</UL>

<P><STRONG><a name="[12f]"></a>icoCobHandlerVarInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, co_cobhandler.o(i.icoCobHandlerVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[183]"></a>icoCobSet</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, co_cobhandler.o(i.icoCobSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cobFilterSet
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncObjChanged
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoObjChanged
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerReset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtReset
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoLssReset
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupHbConsumer
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyReset
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyObjChanged
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyConsumerReset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
</UL>

<P><STRONG><a name="[15f]"></a>icoCobSetInhibit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, co_cobhandler.o(i.icoCobSetInhibit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icoCobSetInhibit &rArr; icoQueueDeleteInhibit &rArr; moveInhibitToTransmitList &rArr; codrvCanStartTransmission
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueDeleteInhibit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCobData
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyObjChanged
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
</UL>

<P><STRONG><a name="[130]"></a>icoCommTaskVarInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, co_commtask.o(i.icoCommTaskVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[185]"></a>icoEmcyConsumerReset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, co_emcy.o(i.icoEmcyConsumerReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icoEmcyConsumerReset &rArr; icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[186]"></a>icoEmcyConsumerSetDefaultValue</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, co_emcy.o(i.icoEmcyConsumerSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = icoEmcyConsumerSetDefaultValue &rArr; coOdGetDefaultVal_u32 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[1c3]"></a>icoEmcyGetObjectAddr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, co_emcy.o(i.icoEmcyGetObjectAddr))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[187]"></a>icoEmcyObjChanged</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, co_emcy.o(i.icoEmcyObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = icoEmcyObjChanged &rArr; icoCobSetInhibit &rArr; icoQueueDeleteInhibit &rArr; moveInhibitToTransmitList &rArr; codrvCanStartTransmission
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[188]"></a>icoEmcyProducerSetDefaultValue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, co_emcy.o(i.icoEmcyProducerSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icoEmcyProducerSetDefaultValue &rArr; coOdGetDefaultVal_u32 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[189]"></a>icoEmcyReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, co_emcy.o(i.icoEmcyReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoEmcyReset &rArr; icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[131]"></a>icoEmcyVarInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, co_emcy.o(i.icoEmcyVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoEmcyVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[18a]"></a>icoErrCtrlGetObjectAddr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, co_errctrl.o(i.icoErrCtrlGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icoErrCtrlGetObjectAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHbConsumer
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[190]"></a>icoErrCtrlInd</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, co_errctrl.o(i.icoErrCtrlInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoErrCtrlInd
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
</UL>

<P><STRONG><a name="[18b]"></a>icoErrCtrlObjChanged</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, co_errctrl.o(i.icoErrCtrlObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = icoErrCtrlObjChanged &rArr; icoHbProdStart &rArr; hbProdSendMessage &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupHbConsumer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHbConsumer
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[13d]"></a>icoErrorBehavior</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, co_errctrl.o(i.icoErrorBehavior))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
</UL>

<P><STRONG><a name="[18f]"></a>icoErrorCtrlReset</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, co_errctrl.o(i.icoErrorCtrlReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = icoErrorCtrlReset &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlInd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupHbConsumer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHbConsumer
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[191]"></a>icoErrorCtrlSetDefaultValue</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, co_errctrl.o(i.icoErrorCtrlSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icoErrorCtrlSetDefaultValue &rArr; coOdGetDefaultVal_u8 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHbConsumer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[132]"></a>icoErrorCtrlVarInit</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, co_errctrl.o(i.icoErrorCtrlVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = icoErrorCtrlVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[133]"></a>icoEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, co_event.o(i.icoEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[192]"></a>icoEventObjectChanged</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, co_odaccess.o(i.icoEventObjectChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = icoEventObjectChanged &rArr; icoErrCtrlObjChanged &rArr; icoHbProdStart &rArr; hbProdSendMessage &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoMapChanged
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncObjChanged
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoObjChanged
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoMapChanged
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChangedFunction
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlObjChanged
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyObjChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoReceiveData
</UL>

<P><STRONG><a name="[199]"></a>icoEventObjectChangedFunction</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, co_odaccess.o(i.icoEventObjectChangedFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoEventObjectChangedFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[18c]"></a>icoHbProdStart</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, co_errctrl.o(i.icoHbProdStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = icoHbProdStart &rArr; hbProdSendMessage &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbProdSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlObjChanged
</UL>

<P><STRONG><a name="[134]"></a>icoLedVarInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_led.o(i.icoLedVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[148]"></a>icoLssReset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, co_lss.o(i.icoLssReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icoLssReset &rArr; icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLssInit
</UL>

<P><STRONG><a name="[19a]"></a>icoLssResetAppl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, co_lss.o(i.icoLssResetAppl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icoLssResetAppl
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtPersistantNodeIdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
</UL>

<P><STRONG><a name="[135]"></a>icoLssVarInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, co_lss.o(i.icoLssVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[19b]"></a>icoNmtPersistantNodeIdGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, co_nmt.o(i.icoNmtPersistantNodeIdGet))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoLssResetAppl
</UL>

<P><STRONG><a name="[18e]"></a>icoNmtStateChange</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, co_nmt.o(i.icoNmtStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoPreOperational
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoOperational
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorBehavior
</UL>

<P><STRONG><a name="[136]"></a>icoNmtVarInit</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, co_nmt.o(i.icoNmtVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = icoNmtVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[137]"></a>icoOdAccessVarInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, co_odaccess.o(i.icoOdAccessVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[11a]"></a>icoOdGetNumberOfSubs</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, co_odaccess.o(i.icoOdGetNumberOfSubs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icoOdGetNumberOfSubs
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoRecMapTable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTrPdoMappingTable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
</UL>

<P><STRONG><a name="[11b]"></a>icoOdGetObjRecMapData</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, co_odaccess.o(i.icoOdGetObjRecMapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjSize
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoMapChanged
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoRecMapTable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
</UL>

<P><STRONG><a name="[11d]"></a>icoOdGetObjTrMapData</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, co_odaccess.o(i.icoOdGetObjTrMapData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjSize
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr_R
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoMapChanged
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTrPdoMappingTable
</UL>

<P><STRONG><a name="[154]"></a>icoOdReset</STRONG> (Thumb, 574 bytes, Stack size 108 bytes, co_odaccess.o(i.icoOdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = icoOdReset
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdInitOdPtr
</UL>

<P><STRONG><a name="[19d]"></a>icoPdoOperational</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, co_pdo.o(i.icoPdoOperational))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransmitPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
</UL>

<P><STRONG><a name="[19c]"></a>icoPdoPreOperational</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, co_pdo.o(i.icoPdoPreOperational))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = icoPdoPreOperational &rArr; setupTrPdoTimer &rArr; coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransmitPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
</UL>

<P><STRONG><a name="[1a1]"></a>icoPdoReset</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, co_pdo.o(i.icoPdoReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = icoPdoReset &rArr; icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransmitPdo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceivePdo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[159]"></a>icoPdoSearchTransmitPdo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, co_pdo.o(i.icoPdoSearchTransmitPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransmitPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoMapChanged
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoGetObjectAddr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapGetObjectAddr_R
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapGetObjectAddr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
</UL>

<P><STRONG><a name="[1a2]"></a>icoPdoSetDefaultValue</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, co_pdo.o(i.icoPdoSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = icoPdoSetDefaultValue &rArr; setupPdoTrMapTable &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoTrMapTable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPdoRecMapTable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransmitPdo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceivePdo
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[1a3]"></a>icoPdoSyncHandling</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, co_pdo.o(i.icoPdoSyncHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = icoPdoSyncHandling &rArr; pdoReceiveData &rArr; icoEventObjectChanged &rArr; icoErrCtrlObjChanged &rArr; icoHbProdStart &rArr; hbProdSendMessage &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoTransmitData
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoReceiveData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransmitPdo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceivePdo
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncHandler
</UL>

<P><STRONG><a name="[138]"></a>icoPdoVarInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, co_pdo.o(i.icoPdoVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[184]"></a>icoQueueDeleteInhibit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, co_queue.o(i.icoQueueDeleteInhibit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icoQueueDeleteInhibit &rArr; moveInhibitToTransmitList &rArr; codrvCanStartTransmission
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveInhibitToTransmitList
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobGetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
</UL>

<P><STRONG><a name="[168]"></a>icoQueueSetSyncId</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, co_queue.o(i.icoQueueSetSyncId))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cobFilterSet
</UL>

<P><STRONG><a name="[139]"></a>icoQueueVarInit</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, co_queue.o(i.icoQueueVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = icoQueueVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[1a7]"></a>icoRecMapGetObjectAddr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, co_pdo.o(i.icoRecMapGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoRecMapGetObjectAddr &rArr; searchRecPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[1a9]"></a>icoRecMapGetObjectAddr_R</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, co_pdo.o(i.icoRecMapGetObjectAddr_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoRecMapGetObjectAddr_R &rArr; searchRecPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr_R
</UL>

<P><STRONG><a name="[1aa]"></a>icoRecPdoGetObjectAddr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, co_pdo.o(i.icoRecPdoGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icoRecPdoGetObjectAddr &rArr; searchRecPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[197]"></a>icoRecPdoMapChanged</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, co_pdo.o(i.icoRecPdoMapChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = icoRecPdoMapChanged &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[196]"></a>icoRecPdoObjChanged</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, co_pdo.o(i.icoRecPdoObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = icoRecPdoObjChanged &rArr; checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRecPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[1ab]"></a>icoSdoGetObjectAddr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, co_sdoserv.o(i.icoSdoGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icoSdoGetObjectAddr &rArr; icoSdoServerPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[193]"></a>icoSdoObjChanged</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, co_sdoserv.o(i.icoSdoObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icoSdoObjChanged &rArr; icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[1ac]"></a>icoSdoServerPtr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, co_sdoserv.o(i.icoSdoServerPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoSdoServerPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSdoServer
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoObjChanged
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoGetObjectAddr
</UL>

<P><STRONG><a name="[1ad]"></a>icoSdoServerReset</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, co_sdoserv.o(i.icoSdoServerReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icoSdoServerReset &rArr; icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSdoServer
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[1ae]"></a>icoSdoServerSetDefaultValue</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, co_sdoserv.o(i.icoSdoServerSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icoSdoServerSetDefaultValue
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetNodeId
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSdoServer
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[13a]"></a>icoSdoServerVarInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, co_sdoserv.o(i.icoSdoServerVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icoSdoServerVarInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[1c0]"></a>icoStoreLoadReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, co_store.o(i.icoStoreLoadReq))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetAppl
</UL>

<P><STRONG><a name="[1c2]"></a>icoSyncGetObjectAddr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, co_sync.o(i.icoSyncGetObjectAddr))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[1af]"></a>icoSyncHandler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, co_sync.o(i.icoSyncHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = icoSyncHandler &rArr; icoPdoSyncHandling &rArr; pdoReceiveData &rArr; icoEventObjectChanged &rArr; icoErrCtrlObjChanged &rArr; icoHbProdStart &rArr; hbProdSendMessage &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSyncHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncEventTimer
</UL>

<P><STRONG><a name="[198]"></a>icoSyncObjChanged</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, co_sync.o(i.icoSyncObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icoSyncObjChanged &rArr; coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobChangeType
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncReset
</UL>

<P><STRONG><a name="[1b0]"></a>icoSyncReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, co_sync.o(i.icoSyncReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icoSyncReset &rArr; icoSyncObjChanged &rArr; coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncObjChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[1b1]"></a>icoSyncSetDefaultValue</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, co_sync.o(i.icoSyncSetDefaultValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icoSyncSetDefaultValue &rArr; coOdGetDefaultVal_u8 &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[13b]"></a>icoSyncVarInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, co_sync.o(i.icoSyncVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icoSyncVarInit
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCanOpenStackVarInit
</UL>

<P><STRONG><a name="[1b2]"></a>icoTrMapGetObjectAddr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, co_pdo.o(i.icoTrMapGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoTrMapGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTransmitPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[1b3]"></a>icoTrMapGetObjectAddr_R</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, co_pdo.o(i.icoTrMapGetObjectAddr_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icoTrMapGetObjectAddr_R &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTransmitPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr_R
</UL>

<P><STRONG><a name="[1b4]"></a>icoTrPdoGetObjectAddr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, co_pdo.o(i.icoTrPdoGetObjectAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTransmitPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>

<P><STRONG><a name="[195]"></a>icoTrPdoMapChanged</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, co_pdo.o(i.icoTrPdoMapChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = icoTrPdoMapChanged &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTransmitPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
</UL>

<P><STRONG><a name="[194]"></a>icoTrPdoObjChanged</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, co_pdo.o(i.icoTrPdoObjChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTransmitPdo
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupTrPdoTimer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPdoCob
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTrPdoMappingTable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
</UL>

<P><STRONG><a name="[121]"></a>icoTransmitMessage</STRONG> (Thumb, 500 bytes, Stack size 56 bytes, co_queue.o(i.icoTransmitMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerIsActive
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coCommStateEvent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanStartTransmission
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchLastMessage
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTimerFct
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToTransmitList
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToInhibitList
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobGetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hbProdSendMessage
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classicalEmergency
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syncEventTimer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoTransmitData
</UL>

<P><STRONG><a name="[bf]"></a>main</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, main_1.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_CANopen_Init &rArr; codrvCanInit &rArr; codrvCanInitController &rArr; codrvCanSetBitRate &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CANopen_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[af]"></a>myTask</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main_1.o(i.myTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = myTask &rArr; Flash_Read_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(i.main)
</UL>
<P><STRONG><a name="[1bb]"></a>osKernelInitialize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>osThreadFlagsSet</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, cmsis_os2.o(i.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osThreadFlagsSet &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1bc]"></a>osThreadNew</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>osThreadSetPriority</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cmsis_os2.o(i.osThreadSetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadSetPriority &rArr; vTaskPrioritySet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>pvPortMalloc</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1de]"></a>pxPortInitialiseStack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1cb]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1f5]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[201]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationGetTimerTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1d0]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1dd]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1cd]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[1cc]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[1cf]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1d1]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1d9]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1f8]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1f1]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1d4]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1e8]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1fd]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ed]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1f4]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1f3]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1c9]"></a>vTaskPrioritySet</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(i.vTaskPrioritySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskPrioritySet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[1c4]"></a>vTaskStartScheduler</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1e6]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[c5]"></a>vTaskSwitchContext</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1f7]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[117]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1d3]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1db]"></a>xQueueGenericReset</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1fc]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1ff]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1e4]"></a>xQueueReceive</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1fe]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c8]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[1c7]"></a>xTaskCreateStatic</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1c6]"></a>xTaskGenericNotify</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[1c5]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, tasks.o(i.xTaskGenericNotifyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[116]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1e9]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1fb]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[1d7]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1ec]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1e7]"></a>xTaskResumeAll</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1f6]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1e3]"></a>xTimerGenericCommand</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[b9]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[236]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[237]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[114]"></a>MX_FDCAN1_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main_1.o(i.MX_FDCAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MX_FDCAN1_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[d8]"></a>FDCAN_CalcultateRamBlockAddresses</STRONG> (Thumb, 446 bytes, Stack size 20 bytes, stm32h7xx_hal_fdcan.o(i.FDCAN_CalcultateRamBlockAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[d4]"></a>FDCAN_CopyMessageToRAM</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32h7xx_hal_fdcan.o(i.FDCAN_CopyMessageToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>

<P><STRONG><a name="[ef]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[f0]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1d5]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1d6]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1da]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[1e0]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1eb]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1ca]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1ce]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1d8]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[b2]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1dc]"></a>prvInitialiseNewTask</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[200]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1d2]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1df]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1e1]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1e5]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1e2]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1ea]"></a>prvSwitchTimerLists</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[b3]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[1ef]"></a>prvHeapInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1f0]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[b0]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[a8]"></a>canInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_canopen.o(i.canInd))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[a9]"></a>commInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_canopen.o(i.commInd))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[a0]"></a>hbState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_canopen.o(i.hbState))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[a6]"></a>ledGreenInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_canopen.o(i.ledGreenInd))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[a7]"></a>ledRedInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_canopen.o(i.ledRedInd))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[9f]"></a>nmtInd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_canopen.o(i.nmtInd))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[a4]"></a>pdoInd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_canopen.o(i.pdoInd))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[a5]"></a>pdoRecEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_canopen.o(i.pdoRecEvent))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[a2]"></a>sdoServerCheckWriteInd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_canopen.o(i.sdoServerCheckWriteInd))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[a1]"></a>sdoServerReadInd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_canopen.o(i.sdoServerReadInd))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[a3]"></a>sdoServerWriteInd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_canopen.o(i.sdoServerWriteInd))
<BR>[Address Reference Count : 1]<UL><LI> app_canopen.o(i.MX_CANopen_Init)
</UL>
<P><STRONG><a name="[170]"></a>codrvCanInitController</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanInitController))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = codrvCanInitController &rArr; codrvCanSetBitRate &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanErrorInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanEnableInterrupt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanInit
</UL>

<P><STRONG><a name="[177]"></a>codrvCanTransmit</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, codrv_stm32_fdcan_hal.o(i.codrvCanTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = codrvCanTransmit &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IsTxBufferMessagePending
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetTxFifoFreeLevel
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetLatestTxFifoQRequestBuffer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AbortTxRequest
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanTransmitInterrupt
</UL>

<P><STRONG><a name="[11e]"></a>classicalEmergency</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, co_emcy.o(i.classicalEmergency))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = classicalEmergency &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAddr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEmcyWriteReq
</UL>

<P><STRONG><a name="[140]"></a>getHbConsumer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, co_errctrl.o(i.getHbConsumer))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlSetDefaultValue
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlObjChanged
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlGetObjectAddr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coErrorCtrlInit
</UL>

<P><STRONG><a name="[ab]"></a>hbProdSendMessage</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, co_errctrl.o(i.hbProdSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hbProdSendMessage &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_errctrl.o(i.icoHbProdStart)
</UL>
<P><STRONG><a name="[18d]"></a>setupHbConsumer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, co_errctrl.o(i.setupHbConsumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setupHbConsumer &rArr; icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlObjChanged
</UL>

<P><STRONG><a name="[142]"></a>ledGreenInd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, co_led.o(i.ledGreenInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ledGreenInd
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTimerInd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_LED_GREEN
</UL>

<P><STRONG><a name="[143]"></a>ledRedInd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, co_led.o(i.ledRedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ledRedInd
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTimerInd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coEventRegister_LED_RED
</UL>

<P><STRONG><a name="[b1]"></a>ledTimerInd</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, co_led.o(i.ledTimerInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ledTimerInd &rArr; ledRedInd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledRedInd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledGreenInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_led.o(i.startLedTimer)
</UL>
<P><STRONG><a name="[147]"></a>startLedTimer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, co_led.o(i.startLedTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = startLedTimer &rArr; coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
</UL>

<P><STRONG><a name="[146]"></a>stopLedTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, co_led.o(i.stopLedTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopLedTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetRed
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coLedSetGreen
</UL>

<P><STRONG><a name="[1bf]"></a>nmtReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, co_nmt.o(i.nmtReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nmtReset &rArr; icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtResetComm
</UL>

<P><STRONG><a name="[149]"></a>nmtResetAppl</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, co_nmt.o(i.nmtResetAppl))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = nmtResetAppl &rArr; icoOdReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoStoreLoadReq
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdReset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coQueueInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoLssResetAppl
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtInit
</UL>

<P><STRONG><a name="[14a]"></a>nmtResetComm</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, co_nmt.o(i.nmtResetComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nmtResetComm &rArr; icoPdoReset &rArr; icoTrPdoObjChanged &rArr; checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncSetDefaultValue
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncReset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoStoreLoadReq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerSetDefaultValue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerReset
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdReset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisableAll
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmtReset
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtPersistantNodeIdGet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoLssReset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoNmtStateChange
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoHbProdStart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlSetDefaultValue
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrorCtrlReset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyReset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyProducerSetDefaultValue
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyConsumerSetDefaultValue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyConsumerReset
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtInit
</UL>

<P><STRONG><a name="[152]"></a>odGetObjAddr</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, co_odaccess.o(i.odGetObjAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoGetObjectAddr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapGetObjectAddr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncGetObjectAddr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoGetObjectAddr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoGetObjectAddr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapGetObjectAddr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoErrCtrlGetObjectAddr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEmcyGetObjectAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr_R
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjAddr
</UL>

<P><STRONG><a name="[19f]"></a>odGetObjAddr_R</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, co_odaccess.o(i.odGetObjAddr_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrMapGetObjectAddr_R
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapGetObjectAddr_R
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;odGetObjAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
</UL>

<P><STRONG><a name="[153]"></a>odGetObjDescIdx</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, co_odaccess.o(i.odGetObjDescIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = odGetObjDescIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
</UL>

<P><STRONG><a name="[119]"></a>checkRecPdoMappingTable</STRONG> (Thumb, 156 bytes, Stack size 136 bytes, co_pdo.o(i.checkRecPdoMappingTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = checkRecPdoMappingTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetNumberOfSubs
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
</UL>

<P><STRONG><a name="[11c]"></a>checkTrPdoMappingTable</STRONG> (Thumb, 146 bytes, Stack size 136 bytes, co_pdo.o(i.checkTrPdoMappingTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = checkTrPdoMappingTable &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetNumberOfSubs
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
</UL>

<P><STRONG><a name="[155]"></a>getReceivePdo</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_pdo.o(i.getReceivePdo))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSyncHandling
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchRecPdo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdoReceiveData
</UL>

<P><STRONG><a name="[15d]"></a>getTransmitPdo</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_pdo.o(i.getTransmitPdo))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoPreOperational
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoOperational
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSyncHandling
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSearchTransmitPdo
</UL>

<P><STRONG><a name="[aa]"></a>pdoEventTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, co_pdo.o(i.pdoEventTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pdoEventTimer &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_pdo.o(i.coPdoReqNr)
<LI> co_pdo.o(i.setupTrPdoTimer)
</UL>
<P><STRONG><a name="[1a4]"></a>pdoReceiveData</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, co_pdo.o(i.pdoReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pdoReceiveData &rArr; icoEventObjectChanged &rArr; icoErrCtrlObjChanged &rArr; icoHbProdStart &rArr; hbProdSendMessage &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoEventObjectChanged
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetObjDescPtr
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyPack
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceivePdo
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSyncHandling
</UL>

<P><STRONG><a name="[15a]"></a>pdoTransmitData</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, co_pdo.o(i.pdoTransmitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNumMemcpyUnpack
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSyncHandling
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReqNr
</UL>

<P><STRONG><a name="[1a8]"></a>searchRecPdo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, co_pdo.o(i.searchRecPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = searchRecPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceivePdo
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoMapChanged
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoGetObjectAddr
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapGetObjectAddr_R
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecMapGetObjectAddr
</UL>

<P><STRONG><a name="[156]"></a>setPdoCob</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, co_pdo.o(i.setPdoCob))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setPdoCob &rArr; icoCobSet &rArr; cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoRecPdoObjChanged
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
</UL>

<P><STRONG><a name="[157]"></a>setupPdoRecMapTable</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, co_pdo.o(i.setupPdoRecMapTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = setupPdoRecMapTable &rArr; icoOdGetObjRecMapData &rArr; coOdGetObjDescPtr &rArr; odGetObjDescIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjRecMapData
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetNumberOfSubs
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoReceiveInit
</UL>

<P><STRONG><a name="[15e]"></a>setupPdoTrMapTable</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, co_pdo.o(i.setupPdoTrMapTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = setupPdoTrMapTable &rArr; icoOdGetObjTrMapData &rArr; odGetObjAddr_R &rArr; odGetObjAddr &rArr; icoTrPdoGetObjectAddr &rArr; icoPdoSearchTransmitPdo
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetObjTrMapData
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoOdGetNumberOfSubs
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u8
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coOdGetDefaultVal_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoSetDefaultValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coPdoTransmitInit
</UL>

<P><STRONG><a name="[1a0]"></a>setupTrPdoTimer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, co_pdo.o(i.setupTrPdoTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setupTrPdoTimer &rArr; coTimerStart &rArr; addTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStop
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTrPdoObjChanged
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoReset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoPreOperational
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoPdoOperational
</UL>

<P><STRONG><a name="[163]"></a>getSdoServer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_sdoserv.o(i.getSdoServer))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerSetDefaultValue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerReset
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coSdoServerInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSdoServerPtr
</UL>

<P><STRONG><a name="[ac]"></a>syncEventTimer</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, co_sync.o(i.syncEventTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = syncEventTimer &rArr; icoSyncHandler &rArr; icoPdoSyncHandling &rArr; pdoReceiveData &rArr; icoEventObjectChanged &rArr; icoErrCtrlObjChanged &rArr; icoHbProdStart &rArr; hbProdSendMessage &rArr; icoTransmitMessage &rArr; coCommStateEvent &rArr; icoErrorBehavior &rArr; icoNmtStateChange &rArr; icoPdoOperational &rArr; coPdoReqNr &rArr; pdoTransmitData &rArr;  icoTransmitMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coNmtGetState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoSyncHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sync.o(i.icoSyncObjChanged)
</UL>
<P><STRONG><a name="[165]"></a>addTimer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, co_timer.o(i.addTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = addTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coTimerStart
</UL>

<P><STRONG><a name="[166]"></a>cobFilterSet</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, co_cobhandler.o(i.cobFilterSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cobFilterSet
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueSetSyncId
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCobData
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSet
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobChangeType
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisable
</UL>

<P><STRONG><a name="[167]"></a>getCobData</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_cobhandler.o(i.getCobData))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisableAll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobSetInhibit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobCreate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cobFilterSet
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobChangeType
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobDisable
</UL>

<P><STRONG><a name="[1b6]"></a>addToInhibitList</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, co_queue.o(i.addToInhibitList))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
</UL>

<P><STRONG><a name="[1b7]"></a>addToTransmitList</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, co_queue.o(i.addToTransmitList))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveInhibitToTransmitList
</UL>

<P><STRONG><a name="[ad]"></a>demoTimerFct</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, co_queue.o(i.demoTimerFct))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_queue.o(i.icoTransmitMessage)
</UL>
<P><STRONG><a name="[1a6]"></a>moveInhibitToTransmitList</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, co_queue.o(i.moveInhibitToTransmitList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = moveInhibitToTransmitList &rArr; codrvCanStartTransmission
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codrvCanStartTransmission
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToTransmitList
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoCobGetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoQueueDeleteInhibit
</UL>

<P><STRONG><a name="[1b5]"></a>searchLastMessage</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, co_queue.o(i.searchLastMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = searchLastMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icoTransmitMessage
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
