
Timer Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a0  080029a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080029a0  080029a0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029a0  080029a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a4  080029a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080029a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000010  080029b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400007c  080029b8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e137  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b54  00000000  00000000  0002e175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00030900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038b0b  00000000  00000000  00031458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e12b  00000000  00000000  00069f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017b4f6  00000000  00000000  0007808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f3584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003238  00000000  00000000  001f35d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002978 	.word	0x08002978

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002978 	.word	0x08002978

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <MX_GPIO_Init+0xc8>)
 800041c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000420:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <MX_GPIO_Init+0xc8>)
 8000422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_GPIO_Init+0xc8>)
 800042c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MX_GPIO_Init+0xc8>)
 800043a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800043e:	4a23      	ldr	r2, [pc, #140]	; (80004cc <MX_GPIO_Init+0xc8>)
 8000440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000448:	4b20      	ldr	r3, [pc, #128]	; (80004cc <MX_GPIO_Init+0xc8>)
 800044a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <MX_GPIO_Init+0xc8>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <MX_GPIO_Init+0xc8>)
 800045e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MX_GPIO_Init+0xc8>)
 8000468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047a:	4815      	ldr	r0, [pc, #84]	; (80004d0 <MX_GPIO_Init+0xcc>)
 800047c:	f000 fd20 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2104      	movs	r1, #4
 8000484:	4813      	ldr	r0, [pc, #76]	; (80004d4 <MX_GPIO_Init+0xd0>)
 8000486:	f000 fd1b 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800048a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	2301      	movs	r3, #1
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	480b      	ldr	r0, [pc, #44]	; (80004d0 <MX_GPIO_Init+0xcc>)
 80004a4:	f000 fb5c 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004a8:	2304      	movs	r3, #4
 80004aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	4619      	mov	r1, r3
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_GPIO_Init+0xd0>)
 80004c0:	f000 fb4e 	bl	8000b60 <HAL_GPIO_Init>

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	58024400 	.word	0x58024400
 80004d0:	58022000 	.word	0x58022000
 80004d4:	58022400 	.word	0x58022400

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 f992 	bl	8000804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80a 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f7ff ff8e 	bl	8000404 <MX_GPIO_Init>
  MX_TIM15_Init();
 80004e8:	f000 f8da 	bl	80006a0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim15);
 80004ec:	4801      	ldr	r0, [pc, #4]	; (80004f4 <main+0x1c>)
 80004ee:	f001 fd71 	bl	8001fd4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <main+0x1a>
 80004f4:	2400002c 	.word	0x2400002c

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09c      	sub	sp, #112	; 0x70
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000502:	224c      	movs	r2, #76	; 0x4c
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fa2e 	bl	8002968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2220      	movs	r2, #32
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fa28 	bl	8002968 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000518:	2004      	movs	r0, #4
 800051a:	f000 fd05 	bl	8000f28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051e:	2300      	movs	r3, #0
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	4b30      	ldr	r3, [pc, #192]	; (80005e4 <SystemClock_Config+0xec>)
 8000524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000526:	4a2f      	ldr	r2, [pc, #188]	; (80005e4 <SystemClock_Config+0xec>)
 8000528:	f023 0301 	bic.w	r3, r3, #1
 800052c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800052e:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <SystemClock_Config+0xec>)
 8000530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <SystemClock_Config+0xf0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a2a      	ldr	r2, [pc, #168]	; (80005e8 <SystemClock_Config+0xf0>)
 800053e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xf0>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000550:	bf00      	nop
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xf0>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800055e:	d1f8      	bne.n	8000552 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	2302      	movs	r3, #2
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000572:	2305      	movs	r3, #5
 8000574:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000576:	23a0      	movs	r3, #160	; 0xa0
 8000578:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800057a:	2302      	movs	r3, #2
 800057c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800057e:	2304      	movs	r3, #4
 8000580:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000582:	2304      	movs	r3, #4
 8000584:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000586:	2308      	movs	r3, #8
 8000588:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800058a:	2300      	movs	r3, #0
 800058c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fd20 	bl	8000fdc <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005a2:	f000 f823 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	233f      	movs	r3, #63	; 0x3f
 80005a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2303      	movs	r3, #3
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005b2:	2308      	movs	r3, #8
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005b6:	2340      	movs	r3, #64	; 0x40
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ba:	2340      	movs	r3, #64	; 0x40
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 f933 	bl	8001838 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80005d8:	f000 f808 	bl	80005ec <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3770      	adds	r7, #112	; 0x70
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	58000400 	.word	0x58000400
 80005e8:	58024800 	.word	0x58024800

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <HAL_MspInit+0x30>)
 8000600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000604:	4a08      	ldr	r2, [pc, #32]	; (8000628 <HAL_MspInit+0x30>)
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_MspInit+0x30>)
 8000610:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	58024400 	.word	0x58024400

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <NMI_Handler+0x4>

08000632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <MemManage_Handler+0x4>

0800063e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <BusFault_Handler+0x4>

08000644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <UsageFault_Handler+0x4>

0800064a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000678:	f000 f936 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 8000684:	2104      	movs	r1, #4
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <TIM15_IRQHandler+0x18>)
 8000688:	f000 fc33 	bl	8000ef2 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <TIM15_IRQHandler+0x1c>)
 800068e:	f001 fd19 	bl	80020c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	58022400 	.word	0x58022400
 800069c:	2400002c 	.word	0x2400002c

080006a0 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_Init 0 */
	uint32_t prescaler, frequency;

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  frequency = 2 * HAL_RCC_GetPCLK2Freq();
 80006be:	f001 fc1b 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 80006c2:	4603      	mov	r3, r0
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24

  //To get the frequency down to 1 MHz it needs to be divided by 1000000 and - 1 because of digital stuff

  prescaler = (uint32_t)((frequency / CLK_FREQUENCY) - 1U);
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	4a22      	ldr	r2, [pc, #136]	; (8000754 <MX_TIM15_Init+0xb4>)
 80006cc:	fba2 2303 	umull	r2, r3, r2, r3
 80006d0:	0b5b      	lsrs	r3, r3, #13
 80006d2:	3b01      	subs	r3, #1
 80006d4:	623b      	str	r3, [r7, #32]

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_TIM15_Init+0xb8>)
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <MX_TIM15_Init+0xbc>)
 80006da:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = prescaler;
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <MX_TIM15_Init+0xb8>)
 80006de:	6a3b      	ldr	r3, [r7, #32]
 80006e0:	6053      	str	r3, [r2, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_TIM15_Init+0xb8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = (10000U) - 1U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_TIM15_Init+0xb8>)
 80006ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80006ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_TIM15_Init+0xb8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_TIM15_Init+0xb8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_TIM15_Init+0xb8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <MX_TIM15_Init+0xb8>)
 8000704:	f001 fc0e 	bl	8001f24 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM15_Init+0x72>
  {
    Error_Handler();
 800070e:	f7ff ff6d 	bl	80005ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_TIM15_Init+0xb8>)
 8000720:	f001 fdf0 	bl	8002304 <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 800072a:	f7ff ff5f 	bl	80005ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <MX_TIM15_Init+0xb8>)
 800073c:	f002 f844 	bl	80027c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8000746:	f7ff ff51 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	d1b71759 	.word	0xd1b71759
 8000758:	2400002c 	.word	0x2400002c
 800075c:	40014000 	.word	0x40014000

08000760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <HAL_TIM_Base_MspInit+0x48>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d116      	bne.n	80007a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_TIM_Base_MspInit+0x4c>)
 8000774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <HAL_TIM_Base_MspInit+0x4c>)
 800077a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_TIM_Base_MspInit+0x4c>)
 8000784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2074      	movs	r0, #116	; 0x74
 8000796:	f000 f9ae 	bl	8000af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800079a:	2074      	movs	r0, #116	; 0x74
 800079c:	f000 f9c5 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40014000 	.word	0x40014000
 80007ac:	58024400 	.word	0x58024400

080007b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b4:	f7ff fd90 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ba:	490d      	ldr	r1, [pc, #52]	; (80007f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d0:	4c0a      	ldr	r4, [pc, #40]	; (80007fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007de:	f002 f89f 	bl	8002920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e2:	f7ff fe79 	bl	80004d8 <main>
  bx  lr
 80007e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007f0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80007f4:	080029a8 	.word	0x080029a8
  ldr r2, =_sbss
 80007f8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80007fc:	2400007c 	.word	0x2400007c

08000800 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC3_IRQHandler>
	...

08000804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080a:	2003      	movs	r0, #3
 800080c:	f000 f968 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000810:	f001 f9c8 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8000814:	4602      	mov	r2, r0
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_Init+0x68>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	f003 030f 	and.w	r3, r3, #15
 8000820:	4913      	ldr	r1, [pc, #76]	; (8000870 <HAL_Init+0x6c>)
 8000822:	5ccb      	ldrb	r3, [r1, r3]
 8000824:	f003 031f 	and.w	r3, r3, #31
 8000828:	fa22 f303 	lsr.w	r3, r2, r3
 800082c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_Init+0x68>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <HAL_Init+0x6c>)
 8000838:	5cd3      	ldrb	r3, [r2, r3]
 800083a:	f003 031f 	and.w	r3, r3, #31
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	fa22 f303 	lsr.w	r3, r2, r3
 8000844:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <HAL_Init+0x70>)
 8000846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <HAL_Init+0x74>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f814 	bl	800087c <HAL_InitTick>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e002      	b.n	8000864 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800085e:	f7ff fecb 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	58024400 	.word	0x58024400
 8000870:	08002990 	.word	0x08002990
 8000874:	24000004 	.word	0x24000004
 8000878:	24000000 	.word	0x24000000

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_InitTick+0x60>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	e021      	b.n	80008d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <HAL_InitTick+0x64>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_InitTick+0x60>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f94d 	bl	8000b46 <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00e      	b.n	80008d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d80a      	bhi.n	80008d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f000 f917 	bl	8000af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_InitTick+0x68>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2400000c 	.word	0x2400000c
 80008e0:	24000000 	.word	0x24000000
 80008e4:	24000008 	.word	0x24000008

080008e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x20>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x24>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_IncTick+0x24>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	2400000c 	.word	0x2400000c
 800090c:	24000078 	.word	0x24000078

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_GetTick+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	24000078 	.word	0x24000078

08000928 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <HAL_GetREVID+0x14>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0c1b      	lsrs	r3, r3, #16
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	5c001000 	.word	0x5c001000

08000940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <__NVIC_SetPriorityGrouping+0x40>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	4313      	orrs	r3, r2
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <__NVIC_SetPriorityGrouping+0x40>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00
 8000984:	05fa0000 	.word	0x05fa0000

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db0b      	blt.n	80009ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	f003 021f 	and.w	r2, r3, #31
 80009bc:	4907      	ldr	r1, [pc, #28]	; (80009dc <__NVIC_EnableIRQ+0x38>)
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	2001      	movs	r0, #1
 80009c6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f7ff ff8e 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff29 	bl	8000940 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff40 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff90 	bl	8000a34 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5f 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff33 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa4 	bl	8000a9c <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b6e:	4b89      	ldr	r3, [pc, #548]	; (8000d94 <HAL_GPIO_Init+0x234>)
 8000b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b72:	e194      	b.n	8000e9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 8186 	beq.w	8000e98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d005      	beq.n	8000ba4 <HAL_GPIO_Init+0x44>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d130      	bne.n	8000c06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bda:	2201      	movs	r2, #1
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	091b      	lsrs	r3, r3, #4
 8000bf0:	f003 0201 	and.w	r2, r3, #1
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d017      	beq.n	8000c42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d123      	bne.n	8000c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	220f      	movs	r2, #15
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	691a      	ldr	r2, [r3, #16]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	69b9      	ldr	r1, [r7, #24]
 8000c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0203 	and.w	r2, r3, #3
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 80e0 	beq.w	8000e98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <HAL_GPIO_Init+0x238>)
 8000cda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cde:	4a2e      	ldr	r2, [pc, #184]	; (8000d98 <HAL_GPIO_Init+0x238>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <HAL_GPIO_Init+0x238>)
 8000cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cf6:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <HAL_GPIO_Init+0x23c>)
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <HAL_GPIO_Init+0x240>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d052      	beq.n	8000dc8 <HAL_GPIO_Init+0x268>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_GPIO_Init+0x244>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d031      	beq.n	8000d8e <HAL_GPIO_Init+0x22e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <HAL_GPIO_Init+0x248>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d02b      	beq.n	8000d8a <HAL_GPIO_Init+0x22a>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <HAL_GPIO_Init+0x24c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d025      	beq.n	8000d86 <HAL_GPIO_Init+0x226>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <HAL_GPIO_Init+0x250>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d01f      	beq.n	8000d82 <HAL_GPIO_Init+0x222>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <HAL_GPIO_Init+0x254>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d019      	beq.n	8000d7e <HAL_GPIO_Init+0x21e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <HAL_GPIO_Init+0x258>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d013      	beq.n	8000d7a <HAL_GPIO_Init+0x21a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_GPIO_Init+0x25c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d00d      	beq.n	8000d76 <HAL_GPIO_Init+0x216>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <HAL_GPIO_Init+0x260>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d007      	beq.n	8000d72 <HAL_GPIO_Init+0x212>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_GPIO_Init+0x264>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_GPIO_Init+0x20e>
 8000d6a:	2309      	movs	r3, #9
 8000d6c:	e02d      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d6e:	230a      	movs	r3, #10
 8000d70:	e02b      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d72:	2308      	movs	r3, #8
 8000d74:	e029      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d76:	2307      	movs	r3, #7
 8000d78:	e027      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	e025      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d7e:	2305      	movs	r3, #5
 8000d80:	e023      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d82:	2304      	movs	r3, #4
 8000d84:	e021      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d86:	2303      	movs	r3, #3
 8000d88:	e01f      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e01d      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e01b      	b.n	8000dca <HAL_GPIO_Init+0x26a>
 8000d92:	bf00      	nop
 8000d94:	58000080 	.word	0x58000080
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58000400 	.word	0x58000400
 8000da0:	58020000 	.word	0x58020000
 8000da4:	58020400 	.word	0x58020400
 8000da8:	58020800 	.word	0x58020800
 8000dac:	58020c00 	.word	0x58020c00
 8000db0:	58021000 	.word	0x58021000
 8000db4:	58021400 	.word	0x58021400
 8000db8:	58021800 	.word	0x58021800
 8000dbc:	58021c00 	.word	0x58021c00
 8000dc0:	58022000 	.word	0x58022000
 8000dc4:	58022400 	.word	0x58022400
 8000dc8:	2300      	movs	r3, #0
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	f002 0203 	and.w	r2, r2, #3
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dda:	4938      	ldr	r1, [pc, #224]	; (8000ebc <HAL_GPIO_Init+0x35c>)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f47f ae63 	bne.w	8000b74 <HAL_GPIO_Init+0x14>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	bf00      	nop
 8000eb2:	3724      	adds	r7, #36	; 0x24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	58000400 	.word	0x58000400

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000edc:	e003      	b.n	8000ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	041a      	lsls	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	619a      	str	r2, [r3, #24]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	460b      	mov	r3, r1
 8000efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f04:	887a      	ldrh	r2, [r7, #2]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	041a      	lsls	r2, r3, #16
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	400b      	ands	r3, r1
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	619a      	str	r2, [r3, #24]
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	2b06      	cmp	r3, #6
 8000f3a:	d00a      	beq.n	8000f52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d001      	beq.n	8000f4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e040      	b.n	8000fd0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e03e      	b.n	8000fd0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000f5a:	491f      	ldr	r1, [pc, #124]	; (8000fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000f62:	f7ff fcd5 	bl	8000910 <HAL_GetTick>
 8000f66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f68:	e009      	b.n	8000f7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f6a:	f7ff fcd1 	bl	8000910 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f78:	d901      	bls.n	8000f7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e028      	b.n	8000fd0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f8a:	d1ee      	bne.n	8000f6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b1e      	cmp	r3, #30
 8000f90:	d008      	beq.n	8000fa4 <HAL_PWREx_ConfigSupply+0x7c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b2e      	cmp	r3, #46	; 0x2e
 8000f96:	d005      	beq.n	8000fa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b1d      	cmp	r3, #29
 8000f9c:	d002      	beq.n	8000fa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8000fa2:	d114      	bne.n	8000fce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000fa4:	f7ff fcb4 	bl	8000910 <HAL_GetTick>
 8000fa8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000faa:	e009      	b.n	8000fc0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fac:	f7ff fcb0 	bl	8000910 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fba:	d901      	bls.n	8000fc0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e007      	b.n	8000fd0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fcc:	d1ee      	bne.n	8000fac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58024800 	.word	0x58024800

08000fdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	f000 bc1d 	b.w	800182a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 8087 	beq.w	800110c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ffe:	4b99      	ldr	r3, [pc, #612]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001008:	4b96      	ldr	r3, [pc, #600]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	2b10      	cmp	r3, #16
 8001012:	d007      	beq.n	8001024 <HAL_RCC_OscConfig+0x48>
 8001014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001016:	2b18      	cmp	r3, #24
 8001018:	d110      	bne.n	800103c <HAL_RCC_OscConfig+0x60>
 800101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d10b      	bne.n	800103c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	4b8f      	ldr	r3, [pc, #572]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d06c      	beq.n	800110a <HAL_RCC_OscConfig+0x12e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d168      	bne.n	800110a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e3f6      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001044:	d106      	bne.n	8001054 <HAL_RCC_OscConfig+0x78>
 8001046:	4b87      	ldr	r3, [pc, #540]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a86      	ldr	r2, [pc, #536]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e02e      	b.n	80010b2 <HAL_RCC_OscConfig+0xd6>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10c      	bne.n	8001076 <HAL_RCC_OscConfig+0x9a>
 800105c:	4b81      	ldr	r3, [pc, #516]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a80      	ldr	r2, [pc, #512]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b7e      	ldr	r3, [pc, #504]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a7d      	ldr	r2, [pc, #500]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	e01d      	b.n	80010b2 <HAL_RCC_OscConfig+0xd6>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800107e:	d10c      	bne.n	800109a <HAL_RCC_OscConfig+0xbe>
 8001080:	4b78      	ldr	r3, [pc, #480]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a77      	ldr	r2, [pc, #476]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b75      	ldr	r3, [pc, #468]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a74      	ldr	r2, [pc, #464]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	e00b      	b.n	80010b2 <HAL_RCC_OscConfig+0xd6>
 800109a:	4b72      	ldr	r3, [pc, #456]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a71      	ldr	r2, [pc, #452]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80010a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b6f      	ldr	r3, [pc, #444]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a6e      	ldr	r2, [pc, #440]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80010ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d013      	beq.n	80010e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ba:	f7ff fc29 	bl	8000910 <HAL_GetTick>
 80010be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c2:	f7ff fc25 	bl	8000910 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e3aa      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010d4:	4b63      	ldr	r3, [pc, #396]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0xe6>
 80010e0:	e014      	b.n	800110c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e2:	f7ff fc15 	bl	8000910 <HAL_GetTick>
 80010e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ea:	f7ff fc11 	bl	8000910 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e396      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f0      	bne.n	80010ea <HAL_RCC_OscConfig+0x10e>
 8001108:	e000      	b.n	800110c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80cb 	beq.w	80012b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800111a:	4b52      	ldr	r3, [pc, #328]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001122:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001124:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <HAL_RCC_OscConfig+0x164>
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	2b18      	cmp	r3, #24
 8001134:	d156      	bne.n	80011e4 <HAL_RCC_OscConfig+0x208>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d151      	bne.n	80011e4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001140:	4b48      	ldr	r3, [pc, #288]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_OscConfig+0x17c>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e368      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 0219 	bic.w	r2, r3, #25
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	493f      	ldr	r1, [pc, #252]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800116a:	f7ff fbd1 	bl	8000910 <HAL_GetTick>
 800116e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001172:	f7ff fbcd 	bl	8000910 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e352      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001190:	f7ff fbca 	bl	8000928 <HAL_GetREVID>
 8001194:	4603      	mov	r3, r0
 8001196:	f241 0203 	movw	r2, #4099	; 0x1003
 800119a:	4293      	cmp	r3, r2
 800119c:	d817      	bhi.n	80011ce <HAL_RCC_OscConfig+0x1f2>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	2b40      	cmp	r3, #64	; 0x40
 80011a4:	d108      	bne.n	80011b8 <HAL_RCC_OscConfig+0x1dc>
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80011ae:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011b6:	e07b      	b.n	80012b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	031b      	lsls	r3, r3, #12
 80011c6:	4927      	ldr	r1, [pc, #156]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011cc:	e070      	b.n	80012b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	061b      	lsls	r3, r3, #24
 80011dc:	4921      	ldr	r1, [pc, #132]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011e2:	e065      	b.n	80012b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d048      	beq.n	800127e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 0219 	bic.w	r2, r3, #25
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	491a      	ldr	r1, [pc, #104]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fe:	f7ff fb87 	bl	8000910 <HAL_GetTick>
 8001202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fb83 	bl	8000910 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e308      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	f7ff fb80 	bl	8000928 <HAL_GetREVID>
 8001228:	4603      	mov	r3, r0
 800122a:	f241 0203 	movw	r2, #4099	; 0x1003
 800122e:	4293      	cmp	r3, r2
 8001230:	d81a      	bhi.n	8001268 <HAL_RCC_OscConfig+0x28c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b40      	cmp	r3, #64	; 0x40
 8001238:	d108      	bne.n	800124c <HAL_RCC_OscConfig+0x270>
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6053      	str	r3, [r2, #4]
 800124a:	e031      	b.n	80012b0 <HAL_RCC_OscConfig+0x2d4>
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	031b      	lsls	r3, r3, #12
 800125a:	4902      	ldr	r1, [pc, #8]	; (8001264 <HAL_RCC_OscConfig+0x288>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
 8001260:	e026      	b.n	80012b0 <HAL_RCC_OscConfig+0x2d4>
 8001262:	bf00      	nop
 8001264:	58024400 	.word	0x58024400
 8001268:	4b9a      	ldr	r3, [pc, #616]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	061b      	lsls	r3, r3, #24
 8001276:	4997      	ldr	r1, [pc, #604]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
 800127c:	e018      	b.n	80012b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	4b95      	ldr	r3, [pc, #596]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a94      	ldr	r2, [pc, #592]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128a:	f7ff fb41 	bl	8000910 <HAL_GetTick>
 800128e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001292:	f7ff fb3d 	bl	8000910 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e2c2      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012a4:	4b8b      	ldr	r3, [pc, #556]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a9 	beq.w	8001410 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012be:	4b85      	ldr	r3, [pc, #532]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012c8:	4b82      	ldr	r3, [pc, #520]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d007      	beq.n	80012e4 <HAL_RCC_OscConfig+0x308>
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b18      	cmp	r3, #24
 80012d8:	d13a      	bne.n	8001350 <HAL_RCC_OscConfig+0x374>
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d135      	bne.n	8001350 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012e4:	4b7b      	ldr	r3, [pc, #492]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_OscConfig+0x320>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b80      	cmp	r3, #128	; 0x80
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e296      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012fc:	f7ff fb14 	bl	8000928 <HAL_GetREVID>
 8001300:	4603      	mov	r3, r0
 8001302:	f241 0203 	movw	r2, #4099	; 0x1003
 8001306:	4293      	cmp	r3, r2
 8001308:	d817      	bhi.n	800133a <HAL_RCC_OscConfig+0x35e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	2b20      	cmp	r3, #32
 8001310:	d108      	bne.n	8001324 <HAL_RCC_OscConfig+0x348>
 8001312:	4b70      	ldr	r3, [pc, #448]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800131a:	4a6e      	ldr	r2, [pc, #440]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800131c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001320:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001322:	e075      	b.n	8001410 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001324:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	069b      	lsls	r3, r3, #26
 8001332:	4968      	ldr	r1, [pc, #416]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001338:	e06a      	b.n	8001410 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800133a:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	061b      	lsls	r3, r3, #24
 8001348:	4962      	ldr	r1, [pc, #392]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800134a:	4313      	orrs	r3, r2
 800134c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800134e:	e05f      	b.n	8001410 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d042      	beq.n	80013de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001358:	4b5e      	ldr	r3, [pc, #376]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a5d      	ldr	r2, [pc, #372]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800135e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fad4 	bl	8000910 <HAL_GetTick>
 8001368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800136c:	f7ff fad0 	bl	8000910 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e255      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800137e:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800138a:	f7ff facd 	bl	8000928 <HAL_GetREVID>
 800138e:	4603      	mov	r3, r0
 8001390:	f241 0203 	movw	r2, #4099	; 0x1003
 8001394:	4293      	cmp	r3, r2
 8001396:	d817      	bhi.n	80013c8 <HAL_RCC_OscConfig+0x3ec>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	2b20      	cmp	r3, #32
 800139e:	d108      	bne.n	80013b2 <HAL_RCC_OscConfig+0x3d6>
 80013a0:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013a8:	4a4a      	ldr	r2, [pc, #296]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80013aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013ae:	6053      	str	r3, [r2, #4]
 80013b0:	e02e      	b.n	8001410 <HAL_RCC_OscConfig+0x434>
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	069b      	lsls	r3, r3, #26
 80013c0:	4944      	ldr	r1, [pc, #272]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
 80013c6:	e023      	b.n	8001410 <HAL_RCC_OscConfig+0x434>
 80013c8:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	061b      	lsls	r3, r3, #24
 80013d6:	493f      	ldr	r1, [pc, #252]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	60cb      	str	r3, [r1, #12]
 80013dc:	e018      	b.n	8001410 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a3c      	ldr	r2, [pc, #240]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80013e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fa91 	bl	8000910 <HAL_GetTick>
 80013ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013f2:	f7ff fa8d 	bl	8000910 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e212      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f0      	bne.n	80013f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d036      	beq.n	800148a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d019      	beq.n	8001458 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	4a2a      	ldr	r2, [pc, #168]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fa6e 	bl	8000910 <HAL_GetTick>
 8001434:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fa6a 	bl	8000910 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1ef      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x45c>
 8001456:	e018      	b.n	800148a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fa54 	bl	8000910 <HAL_GetTick>
 8001468:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fa50 	bl	8000910 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e1d5      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 8001480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	2b00      	cmp	r3, #0
 8001494:	d039      	beq.n	800150a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80014a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fa31 	bl	8000910 <HAL_GetTick>
 80014ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014b2:	f7ff fa2d 	bl	8000910 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1b2      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_RCC_OscConfig+0x4f8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x4d6>
 80014d0:	e01b      	b.n	800150a <HAL_RCC_OscConfig+0x52e>
 80014d2:	bf00      	nop
 80014d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014d8:	4b9b      	ldr	r3, [pc, #620]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a9a      	ldr	r2, [pc, #616]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80014de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fa14 	bl	8000910 <HAL_GetTick>
 80014e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014ec:	f7ff fa10 	bl	8000910 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e195      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014fe:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8081 	beq.w	800161a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001518:	4b8c      	ldr	r3, [pc, #560]	; (800174c <HAL_RCC_OscConfig+0x770>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a8b      	ldr	r2, [pc, #556]	; (800174c <HAL_RCC_OscConfig+0x770>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001524:	f7ff f9f4 	bl	8000910 <HAL_GetTick>
 8001528:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800152c:	f7ff f9f0 	bl	8000910 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	; 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e175      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800153e:	4b83      	ldr	r3, [pc, #524]	; (800174c <HAL_RCC_OscConfig+0x770>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d106      	bne.n	8001560 <HAL_RCC_OscConfig+0x584>
 8001552:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a7c      	ldr	r2, [pc, #496]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	e02d      	b.n	80015bc <HAL_RCC_OscConfig+0x5e0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10c      	bne.n	8001582 <HAL_RCC_OscConfig+0x5a6>
 8001568:	4b77      	ldr	r3, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a76      	ldr	r2, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 800156e:	f023 0301 	bic.w	r3, r3, #1
 8001572:	6713      	str	r3, [r2, #112]	; 0x70
 8001574:	4b74      	ldr	r3, [pc, #464]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	4a73      	ldr	r2, [pc, #460]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 800157a:	f023 0304 	bic.w	r3, r3, #4
 800157e:	6713      	str	r3, [r2, #112]	; 0x70
 8001580:	e01c      	b.n	80015bc <HAL_RCC_OscConfig+0x5e0>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5c8>
 800158a:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a6e      	ldr	r2, [pc, #440]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
 8001596:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a6b      	ldr	r2, [pc, #428]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0x5e0>
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a67      	ldr	r2, [pc, #412]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	4b65      	ldr	r3, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a64      	ldr	r2, [pc, #400]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80015b6:	f023 0304 	bic.w	r3, r3, #4
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d015      	beq.n	80015f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff f9a4 	bl	8000910 <HAL_GetTick>
 80015c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7ff f9a0 	bl	8000910 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e123      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015e2:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0ee      	beq.n	80015cc <HAL_RCC_OscConfig+0x5f0>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff f98e 	bl	8000910 <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff f98a 	bl	8000910 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e10d      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ee      	bne.n	80015f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8102 	beq.w	8001828 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001624:	4b48      	ldr	r3, [pc, #288]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800162c:	2b18      	cmp	r3, #24
 800162e:	f000 80bd 	beq.w	80017ac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	2b02      	cmp	r3, #2
 8001638:	f040 809e 	bne.w	8001778 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163c:	4b42      	ldr	r3, [pc, #264]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a41      	ldr	r2, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff f962 	bl	8000910 <HAL_GetTick>
 800164c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff f95e 	bl	8000910 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0e3      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166e:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_RCC_OscConfig+0x774>)
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	430a      	orrs	r2, r1
 8001682:	4931      	ldr	r1, [pc, #196]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001684:	4313      	orrs	r3, r2
 8001686:	628b      	str	r3, [r1, #40]	; 0x28
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	3b01      	subs	r3, #1
 800168e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001696:	3b01      	subs	r3, #1
 8001698:	025b      	lsls	r3, r3, #9
 800169a:	b29b      	uxth	r3, r3
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a2:	3b01      	subs	r3, #1
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b0:	3b01      	subs	r3, #1
 80016b2:	061b      	lsls	r3, r3, #24
 80016b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80016b8:	4923      	ldr	r1, [pc, #140]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80016cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_RCC_OscConfig+0x778>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016d6:	00d2      	lsls	r2, r2, #3
 80016d8:	491b      	ldr	r1, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f023 020c 	bic.w	r2, r3, #12
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4917      	ldr	r1, [pc, #92]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f023 0202 	bic.w	r2, r3, #2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fc:	4912      	ldr	r1, [pc, #72]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001724:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_RCC_OscConfig+0x76c>)
 8001738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff f8e7 	bl	8000910 <HAL_GetTick>
 8001742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001744:	e011      	b.n	800176a <HAL_RCC_OscConfig+0x78e>
 8001746:	bf00      	nop
 8001748:	58024400 	.word	0x58024400
 800174c:	58024800 	.word	0x58024800
 8001750:	fffffc0c 	.word	0xfffffc0c
 8001754:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff f8da 	bl	8000910 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e05f      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_RCC_OscConfig+0x858>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x77c>
 8001776:	e057      	b.n	8001828 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_RCC_OscConfig+0x858>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <HAL_RCC_OscConfig+0x858>)
 800177e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff f8c4 	bl	8000910 <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f8c0 	bl	8000910 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e045      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_RCC_OscConfig+0x858>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x7b0>
 80017aa:	e03d      	b.n	8001828 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_RCC_OscConfig+0x858>)
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_OscConfig+0x858>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d031      	beq.n	8001824 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d12a      	bne.n	8001824 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d122      	bne.n	8001824 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d11a      	bne.n	8001824 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	0a5b      	lsrs	r3, r3, #9
 80017f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d111      	bne.n	8001824 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	0c1b      	lsrs	r3, r3, #16
 8001804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d108      	bne.n	8001824 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	0e1b      	lsrs	r3, r3, #24
 8001816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3730      	adds	r7, #48	; 0x30
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	58024400 	.word	0x58024400

08001838 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e19c      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b8a      	ldr	r3, [pc, #552]	; (8001a78 <HAL_RCC_ClockConfig+0x240>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d910      	bls.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <HAL_RCC_ClockConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 020f 	bic.w	r2, r3, #15
 8001862:	4985      	ldr	r1, [pc, #532]	; (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b83      	ldr	r3, [pc, #524]	; (8001a78 <HAL_RCC_ClockConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e184      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001894:	429a      	cmp	r2, r3
 8001896:	d908      	bls.n	80018aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001898:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	4975      	ldr	r1, [pc, #468]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d010      	beq.n	80018d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d908      	bls.n	80018d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80018c6:	4b6d      	ldr	r3, [pc, #436]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	496a      	ldr	r1, [pc, #424]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699a      	ldr	r2, [r3, #24]
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d908      	bls.n	8001906 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	495e      	ldr	r1, [pc, #376]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001902:	4313      	orrs	r3, r2
 8001904:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d010      	beq.n	8001934 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800191e:	429a      	cmp	r2, r3
 8001920:	d908      	bls.n	8001934 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001922:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4953      	ldr	r1, [pc, #332]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001930:	4313      	orrs	r3, r2
 8001932:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d010      	beq.n	8001962 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	429a      	cmp	r2, r3
 800194e:	d908      	bls.n	8001962 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001950:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f023 020f 	bic.w	r2, r3, #15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4947      	ldr	r1, [pc, #284]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800195e:	4313      	orrs	r3, r2
 8001960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d055      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800196e:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4940      	ldr	r1, [pc, #256]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800197c:	4313      	orrs	r3, r2
 800197e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d107      	bne.n	8001998 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d121      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0f6      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d115      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0ea      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0de      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c8:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0d6      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f023 0207 	bic.w	r2, r3, #7
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4925      	ldr	r1, [pc, #148]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7fe ff91 	bl	8000910 <HAL_GetTick>
 80019ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f2:	f7fe ff8d 	bl	8000910 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0be      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d1eb      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d010      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d208      	bcs.n	8001a48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f023 020f 	bic.w	r2, r3, #15
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_RCC_ClockConfig+0x244>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d214      	bcs.n	8001a80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 020f 	bic.w	r2, r3, #15
 8001a5e:	4906      	ldr	r1, [pc, #24]	; (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <HAL_RCC_ClockConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e086      	b.n	8001b86 <HAL_RCC_ClockConfig+0x34e>
 8001a78:	52002000 	.word	0x52002000
 8001a7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d208      	bcs.n	8001aae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a9c:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	4939      	ldr	r1, [pc, #228]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d010      	beq.n	8001adc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d208      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	492e      	ldr	r1, [pc, #184]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d010      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d208      	bcs.n	8001b0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4922      	ldr	r1, [pc, #136]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d010      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d208      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4917      	ldr	r1, [pc, #92]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b38:	f000 f834 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	4912      	ldr	r1, [pc, #72]	; (8001b94 <HAL_RCC_ClockConfig+0x35c>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_RCC_ClockConfig+0x358>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_RCC_ClockConfig+0x35c>)
 8001b60:	5cd3      	ldrb	r3, [r2, r3]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_RCC_ClockConfig+0x360>)
 8001b6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x364>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_RCC_ClockConfig+0x368>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fe7e 	bl	800087c <HAL_InitTick>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	58024400 	.word	0x58024400
 8001b94:	08002990 	.word	0x08002990
 8001b98:	24000004 	.word	0x24000004
 8001b9c:	24000000 	.word	0x24000000
 8001ba0:	24000008 	.word	0x24000008

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001baa:	4bb3      	ldr	r3, [pc, #716]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bb2:	2b18      	cmp	r3, #24
 8001bb4:	f200 8155 	bhi.w	8001e62 <HAL_RCC_GetSysClockFreq+0x2be>
 8001bb8:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001c25 	.word	0x08001c25
 8001bc4:	08001e63 	.word	0x08001e63
 8001bc8:	08001e63 	.word	0x08001e63
 8001bcc:	08001e63 	.word	0x08001e63
 8001bd0:	08001e63 	.word	0x08001e63
 8001bd4:	08001e63 	.word	0x08001e63
 8001bd8:	08001e63 	.word	0x08001e63
 8001bdc:	08001e63 	.word	0x08001e63
 8001be0:	08001c4b 	.word	0x08001c4b
 8001be4:	08001e63 	.word	0x08001e63
 8001be8:	08001e63 	.word	0x08001e63
 8001bec:	08001e63 	.word	0x08001e63
 8001bf0:	08001e63 	.word	0x08001e63
 8001bf4:	08001e63 	.word	0x08001e63
 8001bf8:	08001e63 	.word	0x08001e63
 8001bfc:	08001e63 	.word	0x08001e63
 8001c00:	08001c51 	.word	0x08001c51
 8001c04:	08001e63 	.word	0x08001e63
 8001c08:	08001e63 	.word	0x08001e63
 8001c0c:	08001e63 	.word	0x08001e63
 8001c10:	08001e63 	.word	0x08001e63
 8001c14:	08001e63 	.word	0x08001e63
 8001c18:	08001e63 	.word	0x08001e63
 8001c1c:	08001e63 	.word	0x08001e63
 8001c20:	08001c57 	.word	0x08001c57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c24:	4b94      	ldr	r3, [pc, #592]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c30:	4b91      	ldr	r3, [pc, #580]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	4a90      	ldr	r2, [pc, #576]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001c42:	e111      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c44:	4b8d      	ldr	r3, [pc, #564]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c46:	61bb      	str	r3, [r7, #24]
    break;
 8001c48:	e10e      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c4a:	4b8d      	ldr	r3, [pc, #564]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c4c:	61bb      	str	r3, [r7, #24]
    break;
 8001c4e:	e10b      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c50:	4b8c      	ldr	r3, [pc, #560]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001c52:	61bb      	str	r3, [r7, #24]
    break;
 8001c54:	e108      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c56:	4b88      	ldr	r3, [pc, #544]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001c60:	4b85      	ldr	r3, [pc, #532]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c6c:	4b82      	ldr	r3, [pc, #520]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001c76:	4b80      	ldr	r3, [pc, #512]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80e1 	beq.w	8001e5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	f000 8083 	beq.w	8001da8 <HAL_RCC_GetSysClockFreq+0x204>
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	f200 80a1 	bhi.w	8001dec <HAL_RCC_GetSysClockFreq+0x248>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x114>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d056      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001cb6:	e099      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cb8:	4b6f      	ldr	r3, [pc, #444]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02d      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cc4:	4b6c      	ldr	r3, [pc, #432]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	4a6b      	ldr	r2, [pc, #428]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cee:	4b62      	ldr	r3, [pc, #392]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d1e:	e087      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001e8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d32:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d62:	e065      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d76:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001da6:	e043      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001e94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dea:	e021      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	0a5b      	lsrs	r3, r3, #9
 8001e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e54:	ee17 3a90 	vmov	r3, s15
 8001e58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001e5a:	e005      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
    break;
 8001e60:	e002      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e64:	61bb      	str	r3, [r7, #24]
    break;
 8001e66:	bf00      	nop
  }

  return sysclockfreq;
 8001e68:	69bb      	ldr	r3, [r7, #24]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	03d09000 	.word	0x03d09000
 8001e80:	003d0900 	.word	0x003d0900
 8001e84:	017d7840 	.word	0x017d7840
 8001e88:	46000000 	.word	0x46000000
 8001e8c:	4c742400 	.word	0x4c742400
 8001e90:	4a742400 	.word	0x4a742400
 8001e94:	4bbebc20 	.word	0x4bbebc20

08001e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001e9e:	f7ff fe81 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x50>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	490f      	ldr	r1, [pc, #60]	; (8001eec <HAL_RCC_GetHCLKFreq+0x54>)
 8001eb0:	5ccb      	ldrb	r3, [r1, r3]
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x50>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_GetHCLKFreq+0x54>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_RCC_GetHCLKFreq+0x58>)
 8001ed4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_RCC_GetHCLKFreq+0x58>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	08002990 	.word	0x08002990
 8001ef0:	24000004 	.word	0x24000004
 8001ef4:	24000000 	.word	0x24000000

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001efc:	f7ff ffcc 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4904      	ldr	r1, [pc, #16]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	08002990 	.word	0x08002990

08001f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e049      	b.n	8001fca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fc08 	bl	8000760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f000 faf8 	bl	8002558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d001      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e054      	b.n	8002096 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002016:	d01d      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d018      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a21      	ldr	r2, [pc, #132]	; (80020ac <HAL_TIM_Base_Start_IT+0xd8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00e      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1c      	ldr	r2, [pc, #112]	; (80020b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_TIM_Base_Start_IT+0x80>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_TIM_Base_Start_IT+0xe8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d115      	bne.n	8002080 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_TIM_Base_Start_IT+0xec>)
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b06      	cmp	r3, #6
 8002064:	d015      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0xbe>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d011      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	e008      	b.n	8002092 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e000      	b.n	8002094 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002092:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40000800 	.word	0x40000800
 80020b0:	40000c00 	.word	0x40000c00
 80020b4:	40010400 	.word	0x40010400
 80020b8:	40001800 	.word	0x40001800
 80020bc:	40014000 	.word	0x40014000
 80020c0:	00010007 	.word	0x00010007

080020c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0202 	mvn.w	r2, #2
 80020f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fa08 	bl	800251c <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f9fa 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fa0b 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b04      	cmp	r3, #4
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0204 	mvn.w	r2, #4
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f9de 	bl	800251c <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f9d0 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f9e1 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b08      	cmp	r3, #8
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b08      	cmp	r3, #8
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0208 	mvn.w	r2, #8
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f9b4 	bl	800251c <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f9a6 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f9b7 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0210 	mvn.w	r2, #16
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2208      	movs	r2, #8
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f98a 	bl	800251c <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f97c 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f98d 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0201 	mvn.w	r2, #1
 8002240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f956 	bl	80024f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	2b80      	cmp	r3, #128	; 0x80
 8002254:	d10e      	bne.n	8002274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d107      	bne.n	8002274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800226c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fb42 	bl	80028f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002282:	d10e      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	2b80      	cmp	r3, #128	; 0x80
 8002290:	d107      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800229a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fb35 	bl	800290c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b40      	cmp	r3, #64	; 0x40
 80022ae:	d10e      	bne.n	80022ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d107      	bne.n	80022ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f93b 	bl	8002544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d10e      	bne.n	80022fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d107      	bne.n	80022fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f06f 0220 	mvn.w	r2, #32
 80022f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 faf5 	bl	80028e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_TIM_ConfigClockSource+0x1c>
 800231c:	2302      	movs	r3, #2
 800231e:	e0dc      	b.n	80024da <HAL_TIM_ConfigClockSource+0x1d6>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a64      	ldr	r2, [pc, #400]	; (80024e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	f000 80a9 	beq.w	80024ae <HAL_TIM_ConfigClockSource+0x1aa>
 800235c:	4a62      	ldr	r2, [pc, #392]	; (80024e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	f200 80ae 	bhi.w	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002364:	4a61      	ldr	r2, [pc, #388]	; (80024ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	f000 80a1 	beq.w	80024ae <HAL_TIM_ConfigClockSource+0x1aa>
 800236c:	4a5f      	ldr	r2, [pc, #380]	; (80024ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f200 80a6 	bhi.w	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002374:	4a5e      	ldr	r2, [pc, #376]	; (80024f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002376:	4293      	cmp	r3, r2
 8002378:	f000 8099 	beq.w	80024ae <HAL_TIM_ConfigClockSource+0x1aa>
 800237c:	4a5c      	ldr	r2, [pc, #368]	; (80024f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800237e:	4293      	cmp	r3, r2
 8002380:	f200 809e 	bhi.w	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002384:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002388:	f000 8091 	beq.w	80024ae <HAL_TIM_ConfigClockSource+0x1aa>
 800238c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002390:	f200 8096 	bhi.w	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002398:	f000 8089 	beq.w	80024ae <HAL_TIM_ConfigClockSource+0x1aa>
 800239c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a0:	f200 808e 	bhi.w	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80023a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a8:	d03e      	beq.n	8002428 <HAL_TIM_ConfigClockSource+0x124>
 80023aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ae:	f200 8087 	bhi.w	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	f000 8086 	beq.w	80024c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023be:	d87f      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80023c0:	2b70      	cmp	r3, #112	; 0x70
 80023c2:	d01a      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0xf6>
 80023c4:	2b70      	cmp	r3, #112	; 0x70
 80023c6:	d87b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80023c8:	2b60      	cmp	r3, #96	; 0x60
 80023ca:	d050      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x16a>
 80023cc:	2b60      	cmp	r3, #96	; 0x60
 80023ce:	d877      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80023d0:	2b50      	cmp	r3, #80	; 0x50
 80023d2:	d03c      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x14a>
 80023d4:	2b50      	cmp	r3, #80	; 0x50
 80023d6:	d873      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d058      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x18a>
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d86f      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80023e0:	2b30      	cmp	r3, #48	; 0x30
 80023e2:	d064      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x1aa>
 80023e4:	2b30      	cmp	r3, #48	; 0x30
 80023e6:	d86b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d060      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x1aa>
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d867      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05c      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x1aa>
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d05a      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x1aa>
 80023f8:	e062      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f000 f9bd 	bl	8002788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800241c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	609a      	str	r2, [r3, #8]
      break;
 8002426:	e04f      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f000 f9a6 	bl	8002788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800244a:	609a      	str	r2, [r3, #8]
      break;
 800244c:	e03c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	461a      	mov	r2, r3
 800245c:	f000 f916 	bl	800268c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2150      	movs	r1, #80	; 0x50
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f970 	bl	800274c <TIM_ITRx_SetConfig>
      break;
 800246c:	e02c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	461a      	mov	r2, r3
 800247c:	f000 f935 	bl	80026ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2160      	movs	r1, #96	; 0x60
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f960 	bl	800274c <TIM_ITRx_SetConfig>
      break;
 800248c:	e01c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	461a      	mov	r2, r3
 800249c:	f000 f8f6 	bl	800268c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2140      	movs	r1, #64	; 0x40
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f950 	bl	800274c <TIM_ITRx_SetConfig>
      break;
 80024ac:	e00c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f000 f947 	bl	800274c <TIM_ITRx_SetConfig>
      break;
 80024be:	e003      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e000      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80024c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	ffceff88 	.word	0xffceff88
 80024e8:	00100040 	.word	0x00100040
 80024ec:	00100030 	.word	0x00100030
 80024f0:	00100020 	.word	0x00100020

080024f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a40      	ldr	r2, [pc, #256]	; (800266c <TIM_Base_SetConfig+0x114>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002576:	d00f      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3d      	ldr	r2, [pc, #244]	; (8002670 <TIM_Base_SetConfig+0x118>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00b      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3c      	ldr	r2, [pc, #240]	; (8002674 <TIM_Base_SetConfig+0x11c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <TIM_Base_SetConfig+0x120>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3a      	ldr	r2, [pc, #232]	; (800267c <TIM_Base_SetConfig+0x124>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a2f      	ldr	r2, [pc, #188]	; (800266c <TIM_Base_SetConfig+0x114>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01f      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b8:	d01b      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <TIM_Base_SetConfig+0x118>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d017      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2b      	ldr	r2, [pc, #172]	; (8002674 <TIM_Base_SetConfig+0x11c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2a      	ldr	r2, [pc, #168]	; (8002678 <TIM_Base_SetConfig+0x120>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00f      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a29      	ldr	r2, [pc, #164]	; (800267c <TIM_Base_SetConfig+0x124>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00b      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a28      	ldr	r2, [pc, #160]	; (8002680 <TIM_Base_SetConfig+0x128>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a27      	ldr	r2, [pc, #156]	; (8002684 <TIM_Base_SetConfig+0x12c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a26      	ldr	r2, [pc, #152]	; (8002688 <TIM_Base_SetConfig+0x130>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d108      	bne.n	8002604 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a10      	ldr	r2, [pc, #64]	; (800266c <TIM_Base_SetConfig+0x114>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00f      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <TIM_Base_SetConfig+0x124>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00b      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a11      	ldr	r2, [pc, #68]	; (8002680 <TIM_Base_SetConfig+0x128>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <TIM_Base_SetConfig+0x12c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d003      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <TIM_Base_SetConfig+0x130>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d103      	bne.n	8002658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	615a      	str	r2, [r3, #20]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40010000 	.word	0x40010000
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40010400 	.word	0x40010400
 8002680:	40014000 	.word	0x40014000
 8002684:	40014400 	.word	0x40014400
 8002688:	40014800 	.word	0x40014800

0800268c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	f023 0201 	bic.w	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f023 030a 	bic.w	r3, r3, #10
 80026c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	621a      	str	r2, [r3, #32]
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b087      	sub	sp, #28
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f023 0210 	bic.w	r2, r3, #16
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002714:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	031b      	lsls	r3, r3, #12
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002726:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <TIM_ITRx_SetConfig+0x38>)
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	f043 0307 	orr.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	609a      	str	r2, [r3, #8]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	ffcfff8f 	.word	0xffcfff8f

08002788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	021a      	lsls	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027dc:	2302      	movs	r3, #2
 80027de:	e06d      	b.n	80028bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a30      	ldr	r2, [pc, #192]	; (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2f      	ldr	r2, [pc, #188]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d108      	bne.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800281a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d022      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002852:	d01d      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d018      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1c      	ldr	r2, [pc, #112]	; (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d013      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00e      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a15      	ldr	r2, [pc, #84]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d009      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a16      	ldr	r2, [pc, #88]	; (80028dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d10c      	bne.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40010400 	.word	0x40010400
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800
 80028d8:	40000c00 	.word	0x40000c00
 80028dc:	40001800 	.word	0x40001800
 80028e0:	40014000 	.word	0x40014000

080028e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <__libc_init_array>:
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	4d0d      	ldr	r5, [pc, #52]	; (8002958 <__libc_init_array+0x38>)
 8002924:	4c0d      	ldr	r4, [pc, #52]	; (800295c <__libc_init_array+0x3c>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	2600      	movs	r6, #0
 800292c:	42a6      	cmp	r6, r4
 800292e:	d109      	bne.n	8002944 <__libc_init_array+0x24>
 8002930:	4d0b      	ldr	r5, [pc, #44]	; (8002960 <__libc_init_array+0x40>)
 8002932:	4c0c      	ldr	r4, [pc, #48]	; (8002964 <__libc_init_array+0x44>)
 8002934:	f000 f820 	bl	8002978 <_init>
 8002938:	1b64      	subs	r4, r4, r5
 800293a:	10a4      	asrs	r4, r4, #2
 800293c:	2600      	movs	r6, #0
 800293e:	42a6      	cmp	r6, r4
 8002940:	d105      	bne.n	800294e <__libc_init_array+0x2e>
 8002942:	bd70      	pop	{r4, r5, r6, pc}
 8002944:	f855 3b04 	ldr.w	r3, [r5], #4
 8002948:	4798      	blx	r3
 800294a:	3601      	adds	r6, #1
 800294c:	e7ee      	b.n	800292c <__libc_init_array+0xc>
 800294e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002952:	4798      	blx	r3
 8002954:	3601      	adds	r6, #1
 8002956:	e7f2      	b.n	800293e <__libc_init_array+0x1e>
 8002958:	080029a0 	.word	0x080029a0
 800295c:	080029a0 	.word	0x080029a0
 8002960:	080029a0 	.word	0x080029a0
 8002964:	080029a4 	.word	0x080029a4

08002968 <memset>:
 8002968:	4402      	add	r2, r0
 800296a:	4603      	mov	r3, r0
 800296c:	4293      	cmp	r3, r2
 800296e:	d100      	bne.n	8002972 <memset+0xa>
 8002970:	4770      	bx	lr
 8002972:	f803 1b01 	strb.w	r1, [r3], #1
 8002976:	e7f9      	b.n	800296c <memset+0x4>

08002978 <_init>:
 8002978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297a:	bf00      	nop
 800297c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297e:	bc08      	pop	{r3}
 8002980:	469e      	mov	lr, r3
 8002982:	4770      	bx	lr

08002984 <_fini>:
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	bf00      	nop
 8002988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298a:	bc08      	pop	{r3}
 800298c:	469e      	mov	lr, r3
 800298e:	4770      	bx	lr
