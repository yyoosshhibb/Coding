
CAN_Loopback_Tutorial_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008154  08008154  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008154  08008154  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008154  08008154  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008158  08008158  00018158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800815c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b90  24000078  080081d4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004c08  080081d4  00024c08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002052f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003932  00000000  00000000  000405d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  00043f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001758  00000000  00000000  000457e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c98f  00000000  00000000  00046f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bef0  00000000  00000000  000838cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00190e40  00000000  00000000  0009f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002305ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca4  00000000  00000000  00230650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008028 	.word	0x08008028

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08008028 	.word	0x08008028

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <SystemInit+0xfc>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <SystemInit+0xfc>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b39      	ldr	r3, [pc, #228]	; (80003dc <SystemInit+0xfc>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a38      	ldr	r2, [pc, #224]	; (80003dc <SystemInit+0xfc>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <SystemInit+0x100>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <SystemInit+0x100>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a32      	ldr	r2, [pc, #200]	; (80003e0 <SystemInit+0x100>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b31      	ldr	r3, [pc, #196]	; (80003e4 <SystemInit+0x104>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a30      	ldr	r2, [pc, #192]	; (80003e4 <SystemInit+0x104>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <SystemInit+0x104>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <SystemInit+0x104>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492c      	ldr	r1, [pc, #176]	; (80003e4 <SystemInit+0x104>)
 8000334:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <SystemInit+0x108>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <SystemInit+0x100>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <SystemInit+0x100>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a24      	ldr	r2, [pc, #144]	; (80003e0 <SystemInit+0x100>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x104>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <SystemInit+0x104>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x104>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <SystemInit+0x104>)
 800036a:	4a20      	ldr	r2, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x104>)
 8000370:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <SystemInit+0x110>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <SystemInit+0x104>)
 8000376:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <SystemInit+0x114>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x104>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <SystemInit+0x104>)
 8000382:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <SystemInit+0x114>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x104>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <SystemInit+0x104>)
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <SystemInit+0x114>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x104>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <SystemInit+0x104>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <SystemInit+0x104>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <SystemInit+0x104>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <SystemInit+0x118>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <SystemInit+0x118>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <SystemInit+0x11c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <SystemInit+0x120>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <SystemInit+0x124>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <SystemInit+0x128>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08c      	sub	sp, #48	; 0x30
 8000410:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000412:	4b54      	ldr	r3, [pc, #336]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000414:	4a54      	ldr	r2, [pc, #336]	; (8000568 <MX_FDCAN1_Init+0x15c>)
 8000416:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000418:	4b52      	ldr	r3, [pc, #328]	; (8000564 <MX_FDCAN1_Init+0x158>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800041e:	4b51      	ldr	r3, [pc, #324]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000420:	2200      	movs	r2, #0
 8000422:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000424:	4b4f      	ldr	r3, [pc, #316]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000426:	2201      	movs	r2, #1
 8000428:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800042a:	4b4e      	ldr	r3, [pc, #312]	; (8000564 <MX_FDCAN1_Init+0x158>)
 800042c:	2200      	movs	r2, #0
 800042e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000430:	4b4c      	ldr	r3, [pc, #304]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000432:	2200      	movs	r2, #0
 8000434:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000436:	4b4b      	ldr	r3, [pc, #300]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000438:	2202      	movs	r2, #2
 800043a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 800043c:	4b49      	ldr	r3, [pc, #292]	; (8000564 <MX_FDCAN1_Init+0x158>)
 800043e:	2207      	movs	r2, #7
 8000440:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 18;
 8000442:	4b48      	ldr	r3, [pc, #288]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000444:	2212      	movs	r2, #18
 8000446:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 8000448:	4b46      	ldr	r3, [pc, #280]	; (8000564 <MX_FDCAN1_Init+0x158>)
 800044a:	2206      	movs	r2, #6
 800044c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 800044e:	4b45      	ldr	r3, [pc, #276]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000450:	2202      	movs	r2, #2
 8000452:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 6;
 8000454:	4b43      	ldr	r3, [pc, #268]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000456:	2206      	movs	r2, #6
 8000458:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 800045a:	4b42      	ldr	r3, [pc, #264]	; (8000564 <MX_FDCAN1_Init+0x158>)
 800045c:	2212      	movs	r2, #18
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 6;
 8000460:	4b40      	ldr	r3, [pc, #256]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000462:	2206      	movs	r2, #6
 8000464:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000466:	4b3f      	ldr	r3, [pc, #252]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000468:	2200      	movs	r2, #0
 800046a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = FDCAN_RX_MSG;
 800046c:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <MX_FDCAN1_Init+0x158>)
 800046e:	2202      	movs	r2, #2
 8000470:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000472:	4b3c      	ldr	r3, [pc, #240]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000474:	2200      	movs	r2, #0
 8000476:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000478:	4b3a      	ldr	r3, [pc, #232]	; (8000564 <MX_FDCAN1_Init+0x158>)
 800047a:	2200      	movs	r2, #0
 800047c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800047e:	4b39      	ldr	r3, [pc, #228]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000480:	2204      	movs	r2, #4
 8000482:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000484:	4b37      	ldr	r3, [pc, #220]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000486:	2200      	movs	r2, #0
 8000488:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800048a:	4b36      	ldr	r3, [pc, #216]	; (8000564 <MX_FDCAN1_Init+0x158>)
 800048c:	2204      	movs	r2, #4
 800048e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = FDCAN_RX_MSG;
 8000490:	4b34      	ldr	r3, [pc, #208]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000492:	2202      	movs	r2, #2
 8000494:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000496:	4b33      	ldr	r3, [pc, #204]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000498:	2204      	movs	r2, #4
 800049a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800049c:	4b31      	ldr	r3, [pc, #196]	; (8000564 <MX_FDCAN1_Init+0x158>)
 800049e:	2200      	movs	r2, #0
 80004a0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80004a2:	4b30      	ldr	r3, [pc, #192]	; (8000564 <MX_FDCAN1_Init+0x158>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 5;
 80004a8:	4b2e      	ldr	r3, [pc, #184]	; (8000564 <MX_FDCAN1_Init+0x158>)
 80004aa:	2205      	movs	r2, #5
 80004ac:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004ae:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <MX_FDCAN1_Init+0x158>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80004b4:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <MX_FDCAN1_Init+0x158>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004ba:	482a      	ldr	r0, [pc, #168]	; (8000564 <MX_FDCAN1_Init+0x158>)
 80004bc:	f000 fc66 	bl	8000d8c <HAL_FDCAN_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80004c6:	f000 fa3d 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 80004ca:	2301      	movs	r3, #1
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2301      	movs	r3, #1
 80004d0:	2202      	movs	r2, #2
 80004d2:	2102      	movs	r1, #2
 80004d4:	4823      	ldr	r0, [pc, #140]	; (8000564 <MX_FDCAN1_Init+0x158>)
 80004d6:	f000 fead 	bl	8001234 <HAL_FDCAN_ConfigGlobalFilter>

  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80004da:	4822      	ldr	r0, [pc, #136]	; (8000564 <MX_FDCAN1_Init+0x158>)
 80004dc:	f000 fed7 	bl	800128e <HAL_FDCAN_Start>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_FDCAN1_Init+0xde>
  {
	  Error_Handler();
 80004e6:	f000 fa2d 	bl	8000944 <Error_Handler>
  }

for (int i = 0; i < FDCAN_RX_MSG; ++i) {
 80004ea:	2300      	movs	r3, #0
 80004ec:	627b      	str	r3, [r7, #36]	; 0x24
 80004ee:	e00e      	b.n	800050e <MX_FDCAN1_Init+0x102>

	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_BUFFER_NEW_MESSAGE, i) != HAL_OK)
 80004f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f2:	461a      	mov	r2, r3
 80004f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80004f8:	481a      	ldr	r0, [pc, #104]	; (8000564 <MX_FDCAN1_Init+0x158>)
 80004fa:	f001 f8bd 	bl	8001678 <HAL_FDCAN_ActivateNotification>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_FDCAN1_Init+0xfc>
	{
		Error_Handler();
 8000504:	f000 fa1e 	bl	8000944 <Error_Handler>
for (int i = 0; i < FDCAN_RX_MSG; ++i) {
 8000508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050a:	3301      	adds	r3, #1
 800050c:	627b      	str	r3, [r7, #36]	; 0x24
 800050e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000510:	2b01      	cmp	r3, #1
 8000512:	dded      	ble.n	80004f0 <MX_FDCAN1_Init+0xe4>



  FDCAN_FilterTypeDef sFilterConfig;

for (int i = 0; i < 2; ++i)
 8000514:	2300      	movs	r3, #0
 8000516:	623b      	str	r3, [r7, #32]
 8000518:	e01c      	b.n	8000554 <MX_FDCAN1_Init+0x148>
{
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex =i;
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 8000526:	2307      	movs	r3, #7
 8000528:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x10+i;
 800052a:	6a3b      	ldr	r3, [r7, #32]
 800052c:	3310      	adds	r3, #16
 800052e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x10+i;
 8000530:	6a3b      	ldr	r3, [r7, #32]
 8000532:	3310      	adds	r3, #16
 8000534:	617b      	str	r3, [r7, #20]
	sFilterConfig.RxBufferIndex = i;
 8000536:	6a3b      	ldr	r3, [r7, #32]
 8000538:	61bb      	str	r3, [r7, #24]
	if( HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	4619      	mov	r1, r3
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <MX_FDCAN1_Init+0x158>)
 8000540:	f000 fe02 	bl	8001148 <HAL_FDCAN_ConfigFilter>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_FDCAN1_Init+0x142>
	{
		Error_Handler();
 800054a:	f000 f9fb 	bl	8000944 <Error_Handler>
for (int i = 0; i < 2; ++i)
 800054e:	6a3b      	ldr	r3, [r7, #32]
 8000550:	3301      	adds	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
 8000554:	6a3b      	ldr	r3, [r7, #32]
 8000556:	2b01      	cmp	r3, #1
 8000558:	dddf      	ble.n	800051a <MX_FDCAN1_Init+0x10e>
	}
}

  /* USER CODE END FDCAN1_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	3728      	adds	r7, #40	; 0x28
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	240000fc 	.word	0x240000fc
 8000568:	4000a000 	.word	0x4000a000

0800056c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b0ba      	sub	sp, #232	; 0xe8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	22c0      	movs	r2, #192	; 0xc0
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f007 fc81 	bl	8007e94 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a33      	ldr	r2, [pc, #204]	; (8000664 <HAL_FDCAN_MspInit+0xf8>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d15f      	bne.n	800065c <HAL_FDCAN_MspInit+0xf0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800059c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005a0:	f04f 0300 	mov.w	r3, #0
 80005a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 80005a8:	2305      	movs	r3, #5
 80005aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 80005ac:	2350      	movs	r3, #80	; 0x50
 80005ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 80;
 80005b0:	2350      	movs	r3, #80	; 0x50
 80005b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80005c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 f81f 	bl	8003618 <HAL_RCCEx_PeriphCLKConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80005e0:	f000 f9b0 	bl	8000944 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <HAL_FDCAN_MspInit+0xfc>)
 80005e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <HAL_FDCAN_MspInit+0xfc>)
 80005ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <HAL_FDCAN_MspInit+0xfc>)
 80005f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80005fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <HAL_FDCAN_MspInit+0xfc>)
 8000604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <HAL_FDCAN_MspInit+0xfc>)
 800060a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_FDCAN_MspInit+0xfc>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8000620:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800063a:	2309      	movs	r3, #9
 800063c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000640:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000644:	4619      	mov	r1, r3
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <HAL_FDCAN_MspInit+0x100>)
 8000648:	f001 fd9e 	bl	8002188 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2105      	movs	r1, #5
 8000650:	2013      	movs	r0, #19
 8000652:	f000 fb73 	bl	8000d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000656:	2013      	movs	r0, #19
 8000658:	f000 fb8a 	bl	8000d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800065c:	bf00      	nop
 800065e:	37e8      	adds	r7, #232	; 0xe8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	4000a000 	.word	0x4000a000
 8000668:	58024400 	.word	0x58024400
 800066c:	58021c00 	.word	0x58021c00

08000670 <FDCAN_Transmit>:
}

/* USER CODE BEGIN 1 */

void FDCAN_Transmit(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	  TxHeader.Identifier = 0x11;
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <FDCAN_Transmit+0x88>)
 8000678:	2211      	movs	r2, #17
 800067a:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <FDCAN_Transmit+0x88>)
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <FDCAN_Transmit+0x88>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <FDCAN_Transmit+0x88>)
 800068a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800068e:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <FDCAN_Transmit+0x88>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <FDCAN_Transmit+0x88>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_FD_CAN;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <FDCAN_Transmit+0x88>)
 800069e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006a2:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <FDCAN_Transmit+0x88>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <FDCAN_Transmit+0x88>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]


  for (int i=0; i<8; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	e00d      	b.n	80006d2 <FDCAN_Transmit+0x62>
  {
	  TxData[i] = indx++;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <FDCAN_Transmit+0x8c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	490f      	ldr	r1, [pc, #60]	; (80006fc <FDCAN_Transmit+0x8c>)
 80006be:	600a      	str	r2, [r1, #0]
 80006c0:	b2d9      	uxtb	r1, r3
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <FDCAN_Transmit+0x90>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4413      	add	r3, r2
 80006c8:	460a      	mov	r2, r1
 80006ca:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<8; i++)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3301      	adds	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	ddee      	ble.n	80006b6 <FDCAN_Transmit+0x46>
  }

  while (1)
	{
		if ( HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <FDCAN_Transmit+0x90>)
 80006da:	4907      	ldr	r1, [pc, #28]	; (80006f8 <FDCAN_Transmit+0x88>)
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <FDCAN_Transmit+0x94>)
 80006de:	f000 fe01 	bl	80012e4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <FDCAN_Transmit+0x7c>
		{
			Error_Handler();
 80006e8:	f000 f92c 	bl	8000944 <Error_Handler>
		}
		osDelay(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f0:	f004 fefa 	bl	80054e8 <osDelay>
	{
 80006f4:	e7f0      	b.n	80006d8 <FDCAN_Transmit+0x68>
 80006f6:	bf00      	nop
 80006f8:	24000094 	.word	0x24000094
 80006fc:	240000f8 	.word	0x240000f8
 8000700:	240000e0 	.word	0x240000e0
 8000704:	240000fc 	.word	0x240000fc

08000708 <HAL_FDCAN_RxBufferNewMessageCallback>:
//		}
//	}
//}

void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_BUFFER0, &RxHeader, RxData0x10) != HAL_OK)
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_FDCAN_RxBufferNewMessageCallback+0x6c>)
 8000712:	4a19      	ldr	r2, [pc, #100]	; (8000778 <HAL_FDCAN_RxBufferNewMessageCallback+0x70>)
 8000714:	2100      	movs	r1, #0
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 fe40 	bl	800139c <HAL_FDCAN_GetRxMessage>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <HAL_FDCAN_RxBufferNewMessageCallback+0x20>
	{
		//Reception Error
		Error_Handler();
 8000722:	f000 f90f 	bl	8000944 <Error_Handler>
 8000726:	e00a      	b.n	800073e <HAL_FDCAN_RxBufferNewMessageCallback+0x36>
	}
	else if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_BUFFER1, &RxHeader, RxData0x11) != HAL_OK)
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_FDCAN_RxBufferNewMessageCallback+0x74>)
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <HAL_FDCAN_RxBufferNewMessageCallback+0x70>)
 800072c:	2101      	movs	r1, #1
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 fe34 	bl	800139c <HAL_FDCAN_GetRxMessage>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_FDCAN_RxBufferNewMessageCallback+0x36>
	{
		//Reception Error
		Error_Handler();
 800073a:	f000 f903 	bl	8000944 <Error_Handler>
	}

	for (int i = 0; i < FDCAN_RX_MSG; ++i) {
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	e00e      	b.n	8000762 <HAL_FDCAN_RxBufferNewMessageCallback+0x5a>

		if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_BUFFER_NEW_MESSAGE, i) != HAL_OK)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	461a      	mov	r2, r3
 8000748:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <HAL_FDCAN_RxBufferNewMessageCallback+0x78>)
 800074e:	f000 ff93 	bl	8001678 <HAL_FDCAN_ActivateNotification>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_FDCAN_RxBufferNewMessageCallback+0x54>
		{
			Error_Handler();
 8000758:	f000 f8f4 	bl	8000944 <Error_Handler>
	for (int i = 0; i < FDCAN_RX_MSG; ++i) {
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b01      	cmp	r3, #1
 8000766:	dded      	ble.n	8000744 <HAL_FDCAN_RxBufferNewMessageCallback+0x3c>
		}
	}
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	240000e8 	.word	0x240000e8
 8000778:	240000b8 	.word	0x240000b8
 800077c:	240000f0 	.word	0x240000f0
 8000780:	240000fc 	.word	0x240000fc

08000784 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <MX_FREERTOS_Init+0x18>)
 800078a:	2100      	movs	r1, #0
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_FREERTOS_Init+0x1c>)
 800078e:	f004 fe19 	bl	80053c4 <osThreadNew>
 8000792:	4603      	mov	r3, r0
 8000794:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <MX_FREERTOS_Init+0x20>)
 8000796:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	080080c0 	.word	0x080080c0
 80007a0:	080007a9 	.word	0x080007a9
 80007a4:	2400019c 	.word	0x2400019c

080007a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

	FDCAN_Transmit();
 80007b0:	f7ff ff5e 	bl	8000670 <FDCAN_Transmit>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f004 fe97 	bl	80054e8 <osDelay>
 80007ba:	e7fb      	b.n	80007b4 <StartDefaultTask+0xc>

080007bc <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_GPIO_Init+0x30>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c8:	4a08      	ldr	r2, [pc, #32]	; (80007ec <MX_GPIO_Init+0x30>)
 80007ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_GPIO_Init+0x30>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	58024400 	.word	0x58024400

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f000 f982 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f80c 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f7ff ffde 	bl	80007bc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000800:	f7ff fe04 	bl	800040c <MX_FDCAN1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000804:	f004 fd94 	bl	8005330 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000808:	f7ff ffbc 	bl	8000784 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800080c:	f004 fdb4 	bl	8005378 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000810:	e7fe      	b.n	8000810 <main+0x20>
	...

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	; 0x70
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	224c      	movs	r2, #76	; 0x4c
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f007 fb36 	bl	8007e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2220      	movs	r2, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f007 fb30 	bl	8007e94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000834:	2004      	movs	r0, #4
 8000836:	f001 fe57 	bl	80024e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <SystemClock_Config+0x100>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	4a34      	ldr	r2, [pc, #208]	; (8000914 <SystemClock_Config+0x100>)
 8000844:	f023 0301 	bic.w	r3, r3, #1
 8000848:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <SystemClock_Config+0x100>)
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b30      	ldr	r3, [pc, #192]	; (8000918 <SystemClock_Config+0x104>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <SystemClock_Config+0x104>)
 800085a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <SystemClock_Config+0x104>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <SystemClock_Config+0x104>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087a:	d1f8      	bne.n	800086e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <SystemClock_Config+0x108>)
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	f023 0303 	bic.w	r3, r3, #3
 8000884:	4a25      	ldr	r2, [pc, #148]	; (800091c <SystemClock_Config+0x108>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	2302      	movs	r3, #2
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800089e:	2305      	movs	r3, #5
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008aa:	2304      	movs	r3, #4
 80008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008b2:	2308      	movs	r3, #8
 80008b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fe6a 	bl	800259c <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008ce:	f000 f839 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008de:	2308      	movs	r3, #8
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2102      	movs	r1, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 faa9 	bl	8002e50 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000904:	f000 f81e 	bl	8000944 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000908:	f002 fc58 	bl	80031bc <HAL_RCC_EnableCSS>
}
 800090c:	bf00      	nop
 800090e:	3770      	adds	r7, #112	; 0x70
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58000400 	.word	0x58000400
 8000918:	58024800 	.word	0x58024800
 800091c:	58024400 	.word	0x58024400

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 f91f 	bl	8000b74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40010000 	.word	0x40010000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_MspInit+0x38>)
 8000958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_MspInit+0x38>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_MspInit+0x38>)
 8000968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	210f      	movs	r1, #15
 8000978:	f06f 0001 	mvn.w	r0, #1
 800097c:	f000 f9de 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	58024400 	.word	0x58024400

0800098c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b0f      	cmp	r3, #15
 8000998:	d844      	bhi.n	8000a24 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800099a:	2200      	movs	r2, #0
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	2019      	movs	r0, #25
 80009a0:	f000 f9cc 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009a4:	2019      	movs	r0, #25
 80009a6:	f000 f9e3 	bl	8000d70 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <HAL_InitTick+0xb0>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <HAL_InitTick+0xb4>)
 80009b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009b6:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <HAL_InitTick+0xb4>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <HAL_InitTick+0xb4>)
 80009c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ce:	f107 020c 	add.w	r2, r7, #12
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 fdbf 	bl	800355c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009de:	f002 fda7 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 80009e2:	4603      	mov	r3, r0
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <HAL_InitTick+0xb8>)
 80009ec:	fba2 2303 	umull	r2, r3, r2, r3
 80009f0:	0c9b      	lsrs	r3, r3, #18
 80009f2:	3b01      	subs	r3, #1
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_InitTick+0xbc>)
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <HAL_InitTick+0xc0>)
 80009fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0xbc>)
 80009fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a02:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_InitTick+0xbc>)
 8000a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a08:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_InitTick+0xbc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_InitTick+0xbc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <HAL_InitTick+0xbc>)
 8000a18:	f004 f96c 	bl	8004cf4 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d107      	bne.n	8000a32 <HAL_InitTick+0xa6>
 8000a22:	e001      	b.n	8000a28 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e005      	b.n	8000a34 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <HAL_InitTick+0xbc>)
 8000a2a:	f004 f9c5 	bl	8004db8 <HAL_TIM_Base_Start_IT>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3738      	adds	r7, #56	; 0x38
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	24000008 	.word	0x24000008
 8000a40:	58024400 	.word	0x58024400
 8000a44:	431bde83 	.word	0x431bde83
 8000a48:	240001a0 	.word	0x240001a0
 8000a4c:	40010000 	.word	0x40010000

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a54:	f002 fdc4 	bl	80035e0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x8>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <FDCAN1_IT0_IRQHandler+0x10>)
 8000a86:	f000 fe71 	bl	800176c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	240000fc 	.word	0x240000fc

08000a94 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM1_UP_IRQHandler+0x10>)
 8000a9a:	f004 fa05 	bl	8004ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	240001a0 	.word	0x240001a0

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aac:	f7ff fc18 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	; (8000af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f007 f9a9 	bl	8007e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fe89 	bl	80007f0 <main>
  bx  lr
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ae4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ae8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000aec:	0800815c 	.word	0x0800815c
  ldr r2, =_sbss
 8000af0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000af4:	24004c08 	.word	0x24004c08

08000af8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC3_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b02:	2003      	movs	r0, #3
 8000b04:	f000 f90f 	bl	8000d26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b08:	f002 fb68 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_Init+0x68>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	f003 030f 	and.w	r3, r3, #15
 8000b18:	4913      	ldr	r1, [pc, #76]	; (8000b68 <HAL_Init+0x6c>)
 8000b1a:	5ccb      	ldrb	r3, [r1, r3]
 8000b1c:	f003 031f 	and.w	r3, r3, #31
 8000b20:	fa22 f303 	lsr.w	r3, r2, r3
 8000b24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_Init+0x68>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_Init+0x6c>)
 8000b30:	5cd3      	ldrb	r3, [r2, r3]
 8000b32:	f003 031f 	and.w	r3, r3, #31
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <HAL_Init+0x70>)
 8000b3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b40:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <HAL_Init+0x74>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b46:	200f      	movs	r0, #15
 8000b48:	f7ff ff20 	bl	800098c <HAL_InitTick>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e002      	b.n	8000b5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b56:	f7ff fefb 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58024400 	.word	0x58024400
 8000b68:	080080b0 	.word	0x080080b0
 8000b6c:	24000004 	.word	0x24000004
 8000b70:	24000000 	.word	0x24000000

08000b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x20>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x24>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_IncTick+0x24>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2400000c 	.word	0x2400000c
 8000b98:	240001ec 	.word	0x240001ec

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_GetTick+0x14>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	240001ec 	.word	0x240001ec

08000bb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetREVID+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	0c1b      	lsrs	r3, r3, #16
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	5c001000 	.word	0x5c001000

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <__NVIC_SetPriorityGrouping+0x40>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x40>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	05fa0000 	.word	0x05fa0000

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff4c 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4a:	f7ff ff63 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	6978      	ldr	r0, [r7, #20]
 8000d56:	f7ff ffb3 	bl	8000cc0 <NVIC_EncodePriority>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff82 	bl	8000c6c <__NVIC_SetPriority>
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff56 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b098      	sub	sp, #96	; 0x60
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000d94:	4a84      	ldr	r2, [pc, #528]	; (8000fa8 <HAL_FDCAN_Init+0x21c>)
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	224c      	movs	r2, #76	; 0x4c
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f007 f86a 	bl	8007e78 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e1c6      	b.n	800113c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a7e      	ldr	r2, [pc, #504]	; (8000fac <HAL_FDCAN_Init+0x220>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d106      	bne.n	8000dc6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d106      	bne.n	8000de0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff fbc6 	bl	800056c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	699a      	ldr	r2, [r3, #24]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0210 	bic.w	r2, r2, #16
 8000dee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df0:	f7ff fed4 	bl	8000b9c <HAL_GetTick>
 8000df4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000df6:	e014      	b.n	8000e22 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000df8:	f7ff fed0 	bl	8000b9c <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d90d      	bls.n	8000e22 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e0c:	f043 0201 	orr.w	r2, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e18c      	b.n	800113c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d0e3      	beq.n	8000df8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	699a      	ldr	r2, [r3, #24]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e40:	f7ff feac 	bl	8000b9c <HAL_GetTick>
 8000e44:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e46:	e014      	b.n	8000e72 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e48:	f7ff fea8 	bl	8000b9c <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b0a      	cmp	r3, #10
 8000e54:	d90d      	bls.n	8000e72 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e5c:	f043 0201 	orr.w	r2, r3, #1
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e164      	b.n	800113c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0e3      	beq.n	8000e48 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0202 	orr.w	r2, r2, #2
 8000e8e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7c1b      	ldrb	r3, [r3, #16]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d108      	bne.n	8000eaa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ea6:	619a      	str	r2, [r3, #24]
 8000ea8:	e007      	b.n	8000eba <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	699a      	ldr	r2, [r3, #24]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eb8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7c5b      	ldrb	r3, [r3, #17]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	699a      	ldr	r2, [r3, #24]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ed0:	619a      	str	r2, [r3, #24]
 8000ed2:	e007      	b.n	8000ee4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ee2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7c9b      	ldrb	r3, [r3, #18]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d108      	bne.n	8000efe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	699a      	ldr	r2, [r3, #24]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000efa:	619a      	str	r2, [r3, #24]
 8000efc:	e007      	b.n	8000f0e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	699a      	ldr	r2, [r3, #24]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f0c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	699a      	ldr	r2, [r3, #24]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f32:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0210 	bic.w	r2, r2, #16
 8000f42:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d108      	bne.n	8000f5e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0204 	orr.w	r2, r2, #4
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	e030      	b.n	8000fc0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d02c      	beq.n	8000fc0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d020      	beq.n	8000fb0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	699a      	ldr	r2, [r3, #24]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f7c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0210 	orr.w	r2, r2, #16
 8000f8c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d114      	bne.n	8000fc0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	699a      	ldr	r2, [r3, #24]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0220 	orr.w	r2, r2, #32
 8000fa4:	619a      	str	r2, [r3, #24]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_FDCAN_Init+0x234>
 8000fa8:	0800804c 	.word	0x0800804c
 8000fac:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	699a      	ldr	r2, [r3, #24]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0220 	orr.w	r2, r2, #32
 8000fbe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fd0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fd8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fe8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ff4:	d115      	bne.n	8001022 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001000:	3b01      	subs	r3, #1
 8001002:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001004:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	3b01      	subs	r3, #1
 800100c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800100e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	3b01      	subs	r3, #1
 8001018:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800101e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001020:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00a      	beq.n	8001040 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	430a      	orrs	r2, r1
 800103c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001048:	4413      	add	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d011      	beq.n	8001072 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001056:	f023 0107 	bic.w	r1, r3, #7
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	3360      	adds	r3, #96	; 0x60
 8001062:	443b      	add	r3, r7
 8001064:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	2b00      	cmp	r3, #0
 8001078:	d011      	beq.n	800109e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001082:	f023 0107 	bic.w	r1, r3, #7
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	3360      	adds	r3, #96	; 0x60
 800108e:	443b      	add	r3, r7
 8001090:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d012      	beq.n	80010cc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010ae:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	3360      	adds	r3, #96	; 0x60
 80010ba:	443b      	add	r3, r7
 80010bc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010c0:	011a      	lsls	r2, r3, #4
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d012      	beq.n	80010fa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010dc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	3360      	adds	r3, #96	; 0x60
 80010e8:	443b      	add	r3, r7
 80010ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010ee:	021a      	lsls	r2, r3, #8
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <HAL_FDCAN_Init+0x3b8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d107      	bne.n	8001114 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f022 0203 	bic.w	r2, r2, #3
 8001112:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 fe27 	bl	8001d80 <FDCAN_CalcultateRamBlockAddresses>
 8001132:	4603      	mov	r3, r0
 8001134:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001138:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800113c:	4618      	mov	r0, r3
 800113e:	3760      	adds	r7, #96	; 0x60
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	4000a000 	.word	0x4000a000

08001148 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001158:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d002      	beq.n	8001166 <HAL_FDCAN_ConfigFilter+0x1e>
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d157      	bne.n	8001216 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d12b      	bne.n	80011c6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b07      	cmp	r3, #7
 8001174:	d10d      	bne.n	8001192 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001182:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001188:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800118a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e00e      	b.n	80011b0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800119e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80011a6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80011ac:	4313      	orrs	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e025      	b.n	8001212 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	075a      	lsls	r2, r3, #29
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b07      	cmp	r3, #7
 80011da:	d103      	bne.n	80011e4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	e006      	b.n	80011f2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	079a      	lsls	r2, r3, #30
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	3304      	adds	r3, #4
 800120a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e008      	b.n	8001228 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800121c:	f043 0202 	orr.w	r2, r3, #2
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
  }
}
 8001228:	4618      	mov	r0, r3
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d110      	bne.n	8001270 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001256:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800125c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	e008      	b.n	8001282 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001276:	f043 0204 	orr.w	r2, r3, #4
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
  }
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d111      	bne.n	80012c6 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2202      	movs	r2, #2
 80012a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699a      	ldr	r2, [r3, #24]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e008      	b.n	80012d8 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012cc:	f043 0204 	orr.w	r2, r3, #4
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
  }
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d141      	bne.n	8001380 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001304:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d109      	bne.n	8001320 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001312:	f043 0220 	orr.w	r2, r3, #32
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e038      	b.n	8001392 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d009      	beq.n	8001344 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001336:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e026      	b.n	8001392 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800134c:	0c1b      	lsrs	r3, r3, #16
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 fe96 	bl	800208c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001370:	2201      	movs	r2, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	e008      	b.n	8001392 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001386:	f043 0208 	orr.w	r2, r3, #8
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
  }
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800139c:	b480      	push	{r7}
 800139e:	b08b      	sub	sp, #44	; 0x2c
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013b4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80013b6:	7efb      	ldrb	r3, [r7, #27]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	f040 814b 	bne.w	8001654 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b40      	cmp	r3, #64	; 0x40
 80013c2:	d14d      	bne.n	8001460 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80013cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013da:	f043 0220 	orr.w	r2, r3, #32
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e13e      	b.n	8001666 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e12c      	b.n	8001666 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001414:	0e1b      	lsrs	r3, r3, #24
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10b      	bne.n	8001436 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001426:	0fdb      	lsrs	r3, r3, #31
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001430:	d101      	bne.n	8001436 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	4413      	add	r3, r2
 8001448:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	69f9      	ldr	r1, [r7, #28]
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	e069      	b.n	8001534 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b41      	cmp	r3, #65	; 0x41
 8001464:	d14d      	bne.n	8001502 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800146e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800147c:	f043 0220 	orr.w	r2, r3, #32
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0ed      	b.n	8001666 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0db      	b.n	8001666 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80014b6:	0e1b      	lsrs	r3, r3, #24
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d10b      	bne.n	80014d8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80014c8:	0fdb      	lsrs	r3, r3, #31
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014d2:	d101      	bne.n	80014d8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	69f9      	ldr	r1, [r7, #28]
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001500:	e018      	b.n	8001534 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	429a      	cmp	r2, r3
 800150a:	d309      	bcc.n	8001520 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001512:	f043 0220 	orr.w	r2, r3, #32
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0a2      	b.n	8001666 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d107      	bne.n	8001558 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0c9b      	lsrs	r3, r3, #18
 800154e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e005      	b.n	8001564 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	3304      	adds	r3, #4
 8001580:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29a      	uxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	0e1b      	lsrs	r3, r3, #24
 80015b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0fda      	lsrs	r2, r3, #31
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	3304      	adds	r3, #4
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	e00a      	b.n	80015ee <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	441a      	add	r2, r3
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	440b      	add	r3, r1
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	3301      	adds	r3, #1
 80015ec:	623b      	str	r3, [r7, #32]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	461a      	mov	r2, r3
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d3eb      	bcc.n	80015d8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b40      	cmp	r3, #64	; 0x40
 8001604:	d105      	bne.n	8001612 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001610:	e01e      	b.n	8001650 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b41      	cmp	r3, #65	; 0x41
 8001616:	d105      	bne.n	8001624 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001622:	e015      	b.n	8001650 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b1f      	cmp	r3, #31
 8001628:	d808      	bhi.n	800163c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2101      	movs	r1, #1
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800163a:	e009      	b.n	8001650 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 021f 	and.w	r2, r3, #31
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e008      	b.n	8001666 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800165a:	f043 0208 	orr.w	r2, r3, #8
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
  }
}
 8001666:	4618      	mov	r0, r3
 8001668:	372c      	adds	r7, #44	; 0x2c
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	080080e4 	.word	0x080080e4

08001678 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800168a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d002      	beq.n	8001698 <HAL_FDCAN_ActivateNotification+0x20>
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d155      	bne.n	8001744 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d108      	bne.n	80016b8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0201 	orr.w	r2, r2, #1
 80016b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b6:	e014      	b.n	80016e2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	4013      	ands	r3, r2
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d108      	bne.n	80016da <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0202 	orr.w	r2, r2, #2
 80016d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016d8:	e003      	b.n	80016e2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2203      	movs	r2, #3
 80016e0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	430a      	orrs	r2, r1
 800171a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_FDCAN_ActivateNotification+0xec>)
 8001728:	4013      	ands	r3, r2
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	430b      	orrs	r3, r1
 8001730:	6553      	str	r3, [r2, #84]	; 0x54
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	0f9b      	lsrs	r3, r3, #30
 800173a:	490b      	ldr	r1, [pc, #44]	; (8001768 <HAL_FDCAN_ActivateNotification+0xf0>)
 800173c:	4313      	orrs	r3, r2
 800173e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e008      	b.n	8001756 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800174a:	f043 0202 	orr.w	r2, r3, #2
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
  }
}
 8001756:	4618      	mov	r0, r3
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	3fcfffff 	.word	0x3fcfffff
 8001768:	4000a800 	.word	0x4000a800

0800176c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b096      	sub	sp, #88	; 0x58
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001774:	4b9a      	ldr	r3, [pc, #616]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	079b      	lsls	r3, r3, #30
 800177a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800177c:	4b98      	ldr	r3, [pc, #608]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	079b      	lsls	r3, r3, #30
 8001782:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001784:	4013      	ands	r3, r2
 8001786:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001792:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800179c:	4013      	ands	r3, r2
 800179e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017b4:	4013      	ands	r3, r2
 80017b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017cc:	4013      	ands	r3, r2
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017e4:	4013      	ands	r3, r2
 80017e6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ee:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017fc:	4013      	ands	r3, r2
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d010      	beq.n	800183e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001830:	651a      	str	r2, [r3, #80]	; 0x50
 8001832:	4b6b      	ldr	r3, [pc, #428]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fa55 	bl	8001ce8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800183e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001840:	0a9b      	lsrs	r3, r3, #10
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d01d      	beq.n	8001886 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184c:	0a9b      	lsrs	r3, r3, #10
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d017      	beq.n	8001886 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800186a:	4013      	ands	r3, r2
 800186c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001876:	651a      	str	r2, [r3, #80]	; 0x50
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800187e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fa12 	bl	8001caa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00d      	beq.n	80018a8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001892:	4b54      	ldr	r3, [pc, #336]	; (80019e4 <HAL_FDCAN_IRQHandler+0x278>)
 8001894:	400b      	ands	r3, r1
 8001896:	6513      	str	r3, [r2, #80]	; 0x50
 8001898:	4a51      	ldr	r2, [pc, #324]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 800189a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189c:	0f9b      	lsrs	r3, r3, #30
 800189e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80018a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f9c0 	bl	8001c28 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80018a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00d      	beq.n	80018ca <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_FDCAN_IRQHandler+0x278>)
 80018b6:	400b      	ands	r3, r1
 80018b8:	6513      	str	r3, [r2, #80]	; 0x50
 80018ba:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 80018bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018be:	0f9b      	lsrs	r3, r3, #30
 80018c0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80018c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f9ba 	bl	8001c3e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80018ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00d      	beq.n	80018ec <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018d6:	4b43      	ldr	r3, [pc, #268]	; (80019e4 <HAL_FDCAN_IRQHandler+0x278>)
 80018d8:	400b      	ands	r3, r1
 80018da:	6513      	str	r3, [r2, #80]	; 0x50
 80018dc:	4a40      	ldr	r2, [pc, #256]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 80018de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e0:	0f9b      	lsrs	r3, r3, #30
 80018e2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80018e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f9b4 	bl	8001c54 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80018ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00d      	beq.n	800190e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018f8:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_FDCAN_IRQHandler+0x278>)
 80018fa:	400b      	ands	r3, r1
 80018fc:	6513      	str	r3, [r2, #80]	; 0x50
 80018fe:	4a38      	ldr	r2, [pc, #224]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 8001900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001902:	0f9b      	lsrs	r3, r3, #30
 8001904:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001906:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f9ae 	bl	8001c6a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800190e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001910:	0adb      	lsrs	r3, r3, #11
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d010      	beq.n	800193c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800191a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191c:	0adb      	lsrs	r3, r3, #11
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00a      	beq.n	800193c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800192e:	651a      	str	r2, [r3, #80]	; 0x50
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f9a2 	bl	8001c80 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800193c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800193e:	0a5b      	lsrs	r3, r3, #9
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01d      	beq.n	8001984 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194a:	0a5b      	lsrs	r3, r3, #9
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d017      	beq.n	8001984 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001968:	4013      	ands	r3, r2
 800196a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001974:	651a      	str	r2, [r3, #80]	; 0x50
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800197c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f988 	bl	8001c94 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001986:	0cdb      	lsrs	r3, r3, #19
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d010      	beq.n	80019b2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001992:	0cdb      	lsrs	r3, r3, #19
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00a      	beq.n	80019b2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019a4:	651a      	str	r2, [r3, #80]	; 0x50
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7fe feab 	bl	8000708 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80019b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d016      	beq.n	80019ec <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80019be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d010      	beq.n	80019ec <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019d2:	651a      	str	r2, [r3, #80]	; 0x50
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_FDCAN_IRQHandler+0x274>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	e004      	b.n	80019e8 <HAL_FDCAN_IRQHandler+0x27c>
 80019de:	bf00      	nop
 80019e0:	4000a800 	.word	0x4000a800
 80019e4:	3fcfffff 	.word	0x3fcfffff
 80019e8:	f000 f96a 	bl	8001cc0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80019ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ee:	0c9b      	lsrs	r3, r3, #18
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d010      	beq.n	8001a1a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80019f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fa:	0c9b      	lsrs	r3, r3, #18
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a0c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a0e:	4b83      	ldr	r3, [pc, #524]	; (8001c1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f95d 	bl	8001cd4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a1c:	0c5b      	lsrs	r3, r3, #17
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d015      	beq.n	8001a52 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a28:	0c5b      	lsrs	r3, r3, #17
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00f      	beq.n	8001a52 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a3a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a3c:	4b77      	ldr	r3, [pc, #476]	; (8001c1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a5e:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a60:	400b      	ands	r3, r1
 8001a62:	6513      	str	r3, [r2, #80]	; 0x50
 8001a64:	4a6d      	ldr	r2, [pc, #436]	; (8001c1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a68:	0f9b      	lsrs	r3, r3, #30
 8001a6a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f94e 	bl	8001d10 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d011      	beq.n	8001a9e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a80:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a82:	400b      	ands	r3, r1
 8001a84:	6513      	str	r3, [r2, #80]	; 0x50
 8001a86:	4a65      	ldr	r2, [pc, #404]	; (8001c1c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8a:	0f9b      	lsrs	r3, r3, #30
 8001a8c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	f040 80ac 	bne.w	8001c02 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a4 	beq.w	8001c02 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ace:	4013      	ands	r3, r2
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afe:	4013      	ands	r3, r2
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001b0c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	6a3a      	ldr	r2, [r7, #32]
 8001b16:	4013      	ands	r3, r2
 8001b18:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001b24:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f8e7 	bl	8001d26 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b64:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8e7 	bl	8001d3c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d01a      	beq.n	8001bb0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d014      	beq.n	8001bb0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b9c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2240      	movs	r2, #64	; 0x40
 8001ba4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	6939      	ldr	r1, [r7, #16]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8d1 	bl	8001d52 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8d2 	bl	8001d6a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f875 	bl	8001cfc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c12:	bf00      	nop
 8001c14:	3758      	adds	r7, #88	; 0x58
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	4000a800 	.word	0x4000a800
 8001c20:	3fcfffff 	.word	0x3fcfffff
 8001c24:	4000a000 	.word	0x4000a000

08001c28 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d96:	4ba7      	ldr	r3, [pc, #668]	; (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	0091      	lsls	r1, r2, #2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001dd6:	4b97      	ldr	r3, [pc, #604]	; (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	0091      	lsls	r1, r2, #2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	430b      	orrs	r3, r1
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001e18:	4b86      	ldr	r3, [pc, #536]	; (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	0091      	lsls	r1, r2, #2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001e32:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	041a      	lsls	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4413      	add	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e60:	4b74      	ldr	r3, [pc, #464]	; (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	0091      	lsls	r1, r2, #2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e7a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e82:	041a      	lsls	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001ea8:	4b62      	ldr	r3, [pc, #392]	; (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	0091      	lsls	r1, r2, #2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	4413      	add	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ed4:	4b57      	ldr	r3, [pc, #348]	; (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	0091      	lsls	r1, r2, #2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eee:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	0091      	lsls	r1, r2, #2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	430b      	orrs	r3, r1
 8001f24:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f30:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f4c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f54:	061a      	lsls	r2, r3, #24
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f64:	4b34      	ldr	r3, [pc, #208]	; (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f66:	4413      	add	r3, r2
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	441a      	add	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	441a      	add	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	441a      	add	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	441a      	add	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d915      	bls.n	800205c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002030:	e006      	b.n	8002040 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002032:	bf00      	nop
 8002034:	ffff0003 	.word	0xffff0003
 8002038:	10002b00 	.word	0x10002b00
 800203c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002046:	f043 0220 	orr.w	r2, r3, #32
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2203      	movs	r2, #3
 8002054:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e010      	b.n	800207e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e005      	b.n	8002070 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3304      	adds	r3, #4
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d3f3      	bcc.n	8002064 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop

0800208c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80020aa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	e00a      	b.n	80020ce <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80020c0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80020c6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020cc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020d8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80020de:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80020e4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	69fa      	ldr	r2, [r7, #28]
 8002108:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	3304      	adds	r3, #4
 800210e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	3304      	adds	r3, #4
 800211a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e020      	b.n	8002164 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3303      	adds	r3, #3
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3302      	adds	r3, #2
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	440b      	add	r3, r1
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800213a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3301      	adds	r3, #1
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	440b      	add	r3, r1
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002148:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	440a      	add	r2, r1
 8002150:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002152:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	3304      	adds	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3304      	adds	r3, #4
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	4a06      	ldr	r2, [pc, #24]	; (8002184 <FDCAN_CopyMessageToRAM+0xf8>)
 800216c:	5cd3      	ldrb	r3, [r2, r3]
 800216e:	461a      	mov	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4293      	cmp	r3, r2
 8002174:	d3d5      	bcc.n	8002122 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	3724      	adds	r7, #36	; 0x24
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	080080e4 	.word	0x080080e4

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002196:	4b89      	ldr	r3, [pc, #548]	; (80023bc <HAL_GPIO_Init+0x234>)
 8002198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800219a:	e194      	b.n	80024c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8186 	beq.w	80024c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d005      	beq.n	80021cc <HAL_GPIO_Init+0x44>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d130      	bne.n	800222e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002202:	2201      	movs	r2, #1
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 0201 	and.w	r2, r3, #1
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b03      	cmp	r3, #3
 8002238:	d017      	beq.n	800226a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d123      	bne.n	80022be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	69b9      	ldr	r1, [r7, #24]
 80022ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0203 	and.w	r2, r3, #3
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80e0 	beq.w	80024c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_GPIO_Init+0x238>)
 8002302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002306:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <HAL_GPIO_Init+0x238>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002310:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HAL_GPIO_Init+0x238>)
 8002312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231e:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <HAL_GPIO_Init+0x23c>)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <HAL_GPIO_Init+0x240>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d052      	beq.n	80023f0 <HAL_GPIO_Init+0x268>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_GPIO_Init+0x244>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_GPIO_Init+0x22e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <HAL_GPIO_Init+0x248>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02b      	beq.n	80023b2 <HAL_GPIO_Init+0x22a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_GPIO_Init+0x24c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x226>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_GPIO_Init+0x250>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x222>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <HAL_GPIO_Init+0x254>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x21e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1a      	ldr	r2, [pc, #104]	; (80023e0 <HAL_GPIO_Init+0x258>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x21a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <HAL_GPIO_Init+0x25c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x216>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a18      	ldr	r2, [pc, #96]	; (80023e8 <HAL_GPIO_Init+0x260>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x212>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a17      	ldr	r2, [pc, #92]	; (80023ec <HAL_GPIO_Init+0x264>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x20e>
 8002392:	2309      	movs	r3, #9
 8002394:	e02d      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 8002396:	230a      	movs	r3, #10
 8002398:	e02b      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 800239a:	2308      	movs	r3, #8
 800239c:	e029      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 800239e:	2307      	movs	r3, #7
 80023a0:	e027      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023a2:	2306      	movs	r3, #6
 80023a4:	e025      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023a6:	2305      	movs	r3, #5
 80023a8:	e023      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e021      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e01f      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e01d      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e01b      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023ba:	bf00      	nop
 80023bc:	58000080 	.word	0x58000080
 80023c0:	58024400 	.word	0x58024400
 80023c4:	58000400 	.word	0x58000400
 80023c8:	58020000 	.word	0x58020000
 80023cc:	58020400 	.word	0x58020400
 80023d0:	58020800 	.word	0x58020800
 80023d4:	58020c00 	.word	0x58020c00
 80023d8:	58021000 	.word	0x58021000
 80023dc:	58021400 	.word	0x58021400
 80023e0:	58021800 	.word	0x58021800
 80023e4:	58021c00 	.word	0x58021c00
 80023e8:	58022000 	.word	0x58022000
 80023ec:	58022400 	.word	0x58022400
 80023f0:	2300      	movs	r3, #0
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	f002 0203 	and.w	r2, r2, #3
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	4093      	lsls	r3, r2
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002402:	4938      	ldr	r1, [pc, #224]	; (80024e4 <HAL_GPIO_Init+0x35c>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f47f ae63 	bne.w	800219c <HAL_GPIO_Init+0x14>
  }
}
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	3724      	adds	r7, #36	; 0x24
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	58000400 	.word	0x58000400

080024e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024f0:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_PWREx_ConfigSupply+0xb0>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	2b06      	cmp	r3, #6
 80024fa:	d00a      	beq.n	8002512 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024fc:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_PWREx_ConfigSupply+0xb0>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e040      	b.n	8002590 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e03e      	b.n	8002590 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_PWREx_ConfigSupply+0xb0>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800251a:	491f      	ldr	r1, [pc, #124]	; (8002598 <HAL_PWREx_ConfigSupply+0xb0>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4313      	orrs	r3, r2
 8002520:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002522:	f7fe fb3b 	bl	8000b9c <HAL_GetTick>
 8002526:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002528:	e009      	b.n	800253e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800252a:	f7fe fb37 	bl	8000b9c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002538:	d901      	bls.n	800253e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e028      	b.n	8002590 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_PWREx_ConfigSupply+0xb0>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254a:	d1ee      	bne.n	800252a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b1e      	cmp	r3, #30
 8002550:	d008      	beq.n	8002564 <HAL_PWREx_ConfigSupply+0x7c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b2e      	cmp	r3, #46	; 0x2e
 8002556:	d005      	beq.n	8002564 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b1d      	cmp	r3, #29
 800255c:	d002      	beq.n	8002564 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b2d      	cmp	r3, #45	; 0x2d
 8002562:	d114      	bne.n	800258e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002564:	f7fe fb1a 	bl	8000b9c <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800256a:	e009      	b.n	8002580 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800256c:	f7fe fb16 	bl	8000b9c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800257a:	d901      	bls.n	8002580 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e007      	b.n	8002590 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_PWREx_ConfigSupply+0xb0>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d1ee      	bne.n	800256c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	58024800 	.word	0x58024800

0800259c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f000 bc48 	b.w	8002e40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8088 	beq.w	80026ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025be:	4b99      	ldr	r3, [pc, #612]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025c8:	4b96      	ldr	r3, [pc, #600]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d007      	beq.n	80025e4 <HAL_RCC_OscConfig+0x48>
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	2b18      	cmp	r3, #24
 80025d8:	d111      	bne.n	80025fe <HAL_RCC_OscConfig+0x62>
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d10c      	bne.n	80025fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	4b8f      	ldr	r3, [pc, #572]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d06d      	beq.n	80026cc <HAL_RCC_OscConfig+0x130>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d169      	bne.n	80026cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	f000 bc21 	b.w	8002e40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x7a>
 8002608:	4b86      	ldr	r3, [pc, #536]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a85      	ldr	r2, [pc, #532]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0xd8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x9c>
 800261e:	4b81      	ldr	r3, [pc, #516]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a80      	ldr	r2, [pc, #512]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b7e      	ldr	r3, [pc, #504]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a7d      	ldr	r2, [pc, #500]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xd8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0xc0>
 8002642:	4b78      	ldr	r3, [pc, #480]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a77      	ldr	r2, [pc, #476]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b75      	ldr	r3, [pc, #468]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a74      	ldr	r2, [pc, #464]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xd8>
 800265c:	4b71      	ldr	r3, [pc, #452]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a70      	ldr	r2, [pc, #448]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b6e      	ldr	r3, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a6d      	ldr	r2, [pc, #436]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fa8e 	bl	8000b9c <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fa8a 	bl	8000b9c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e3d4      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fa7a 	bl	8000b9c <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe fa76 	bl	8000b9c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e3c0      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026be:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x110>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80ca 	beq.w	8002870 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026dc:	4b51      	ldr	r3, [pc, #324]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026e6:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_RCC_OscConfig+0x166>
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b18      	cmp	r3, #24
 80026f6:	d156      	bne.n	80027a6 <HAL_RCC_OscConfig+0x20a>
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d151      	bne.n	80027a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002702:	4b48      	ldr	r3, [pc, #288]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x17e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e392      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800271a:	4b42      	ldr	r3, [pc, #264]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0219 	bic.w	r2, r3, #25
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	493f      	ldr	r1, [pc, #252]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fa36 	bl	8000b9c <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002734:	f7fe fa32 	bl	8000b9c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e37c      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	f7fe fa2f 	bl	8000bb4 <HAL_GetREVID>
 8002756:	4603      	mov	r3, r0
 8002758:	f241 0203 	movw	r2, #4099	; 0x1003
 800275c:	4293      	cmp	r3, r2
 800275e:	d817      	bhi.n	8002790 <HAL_RCC_OscConfig+0x1f4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d108      	bne.n	800277a <HAL_RCC_OscConfig+0x1de>
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002776:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	e07a      	b.n	8002870 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	031b      	lsls	r3, r3, #12
 8002788:	4926      	ldr	r1, [pc, #152]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278e:	e06f      	b.n	8002870 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4921      	ldr	r1, [pc, #132]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a4:	e064      	b.n	8002870 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d047      	beq.n	800283e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0219 	bic.w	r2, r3, #25
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	491a      	ldr	r1, [pc, #104]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe f9ec 	bl	8000b9c <HAL_GetTick>
 80027c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c8:	f7fe f9e8 	bl	8000b9c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e332      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e6:	f7fe f9e5 	bl	8000bb4 <HAL_GetREVID>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d819      	bhi.n	8002828 <HAL_RCC_OscConfig+0x28c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d108      	bne.n	800280e <HAL_RCC_OscConfig+0x272>
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002804:	4a07      	ldr	r2, [pc, #28]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280a:	6053      	str	r3, [r2, #4]
 800280c:	e030      	b.n	8002870 <HAL_RCC_OscConfig+0x2d4>
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	031b      	lsls	r3, r3, #12
 800281c:	4901      	ldr	r1, [pc, #4]	; (8002824 <HAL_RCC_OscConfig+0x288>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
 8002822:	e025      	b.n	8002870 <HAL_RCC_OscConfig+0x2d4>
 8002824:	58024400 	.word	0x58024400
 8002828:	4b9a      	ldr	r3, [pc, #616]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	4997      	ldr	r1, [pc, #604]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
 800283c:	e018      	b.n	8002870 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b95      	ldr	r3, [pc, #596]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a94      	ldr	r2, [pc, #592]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe f9a7 	bl	8000b9c <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002852:	f7fe f9a3 	bl	8000b9c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e2ed      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002864:	4b8b      	ldr	r3, [pc, #556]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a9 	beq.w	80029d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800287e:	4b85      	ldr	r3, [pc, #532]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002886:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002888:	4b82      	ldr	r3, [pc, #520]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d007      	beq.n	80028a4 <HAL_RCC_OscConfig+0x308>
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2b18      	cmp	r3, #24
 8002898:	d13a      	bne.n	8002910 <HAL_RCC_OscConfig+0x374>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d135      	bne.n	8002910 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028a4:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_OscConfig+0x320>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b80      	cmp	r3, #128	; 0x80
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e2c1      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028bc:	f7fe f97a 	bl	8000bb4 <HAL_GetREVID>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d817      	bhi.n	80028fa <HAL_RCC_OscConfig+0x35e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d108      	bne.n	80028e4 <HAL_RCC_OscConfig+0x348>
 80028d2:	4b70      	ldr	r3, [pc, #448]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028da:	4a6e      	ldr	r2, [pc, #440]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e2:	e075      	b.n	80029d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028e4:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	069b      	lsls	r3, r3, #26
 80028f2:	4968      	ldr	r1, [pc, #416]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028f8:	e06a      	b.n	80029d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028fa:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	061b      	lsls	r3, r3, #24
 8002908:	4962      	ldr	r1, [pc, #392]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800290a:	4313      	orrs	r3, r2
 800290c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800290e:	e05f      	b.n	80029d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d042      	beq.n	800299e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002918:	4b5e      	ldr	r3, [pc, #376]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a5d      	ldr	r2, [pc, #372]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800291e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe f93a 	bl	8000b9c <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800292c:	f7fe f936 	bl	8000b9c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e280      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800293e:	4b55      	ldr	r3, [pc, #340]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800294a:	f7fe f933 	bl	8000bb4 <HAL_GetREVID>
 800294e:	4603      	mov	r3, r0
 8002950:	f241 0203 	movw	r2, #4099	; 0x1003
 8002954:	4293      	cmp	r3, r2
 8002956:	d817      	bhi.n	8002988 <HAL_RCC_OscConfig+0x3ec>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	2b20      	cmp	r3, #32
 800295e:	d108      	bne.n	8002972 <HAL_RCC_OscConfig+0x3d6>
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002968:	4a4a      	ldr	r2, [pc, #296]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800296e:	6053      	str	r3, [r2, #4]
 8002970:	e02e      	b.n	80029d0 <HAL_RCC_OscConfig+0x434>
 8002972:	4b48      	ldr	r3, [pc, #288]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	069b      	lsls	r3, r3, #26
 8002980:	4944      	ldr	r1, [pc, #272]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
 8002986:	e023      	b.n	80029d0 <HAL_RCC_OscConfig+0x434>
 8002988:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	493f      	ldr	r1, [pc, #252]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002998:	4313      	orrs	r3, r2
 800299a:	60cb      	str	r3, [r1, #12]
 800299c:	e018      	b.n	80029d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe f8f7 	bl	8000b9c <HAL_GetTick>
 80029ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029b2:	f7fe f8f3 	bl	8000b9c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e23d      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029c4:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d036      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d019      	beq.n	8002a18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e8:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe f8d4 	bl	8000b9c <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7fe f8d0 	bl	8000b9c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e21a      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x45c>
 8002a16:	e018      	b.n	8002a4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe f8ba 	bl	8000b9c <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7fe f8b6 	bl	8000b9c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e200      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d039      	beq.n	8002aca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe f897 	bl	8000b9c <HAL_GetTick>
 8002a6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a72:	f7fe f893 	bl	8000b9c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1dd      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_OscConfig+0x4f8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x4d6>
 8002a90:	e01b      	b.n	8002aca <HAL_RCC_OscConfig+0x52e>
 8002a92:	bf00      	nop
 8002a94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a98:	4b9b      	ldr	r3, [pc, #620]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a9a      	ldr	r2, [pc, #616]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aa4:	f7fe f87a 	bl	8000b9c <HAL_GetTick>
 8002aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aac:	f7fe f876 	bl	8000b9c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1c0      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002abe:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8081 	beq.w	8002bda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ad8:	4b8c      	ldr	r3, [pc, #560]	; (8002d0c <HAL_RCC_OscConfig+0x770>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a8b      	ldr	r2, [pc, #556]	; (8002d0c <HAL_RCC_OscConfig+0x770>)
 8002ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe f85a 	bl	8000b9c <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aec:	f7fe f856 	bl	8000b9c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1a0      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afe:	4b83      	ldr	r3, [pc, #524]	; (8002d0c <HAL_RCC_OscConfig+0x770>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x584>
 8002b12:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	e02d      	b.n	8002b7c <HAL_RCC_OscConfig+0x5e0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCC_OscConfig+0x5a6>
 8002b28:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	4a76      	ldr	r2, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	6713      	str	r3, [r2, #112]	; 0x70
 8002b34:	4b74      	ldr	r3, [pc, #464]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	4a73      	ldr	r2, [pc, #460]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b3a:	f023 0304 	bic.w	r3, r3, #4
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b40:	e01c      	b.n	8002b7c <HAL_RCC_OscConfig+0x5e0>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x5c8>
 8002b4a:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a6e      	ldr	r2, [pc, #440]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70
 8002b56:	4b6c      	ldr	r3, [pc, #432]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a6b      	ldr	r2, [pc, #428]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0x5e0>
 8002b64:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	4a67      	ldr	r2, [pc, #412]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b70:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a64      	ldr	r2, [pc, #400]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002b76:	f023 0304 	bic.w	r3, r3, #4
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d015      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7fe f80a 	bl	8000b9c <HAL_GetTick>
 8002b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f806 	bl	8000b9c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e14e      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba2:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ee      	beq.n	8002b8c <HAL_RCC_OscConfig+0x5f0>
 8002bae:	e014      	b.n	8002bda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fd fff4 	bl	8000b9c <HAL_GetTick>
 8002bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb8:	f7fd fff0 	bl	8000b9c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e138      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ee      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 812d 	beq.w	8002e3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002be4:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bec:	2b18      	cmp	r3, #24
 8002bee:	f000 80bd 	beq.w	8002d6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	f040 809e 	bne.w	8002d38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfc:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fd ffc8 	bl	8000b9c <HAL_GetTick>
 8002c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fd ffc4 	bl	8000b9c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e10e      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c22:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2e:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCC_OscConfig+0x774>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	430a      	orrs	r2, r1
 8002c42:	4931      	ldr	r1, [pc, #196]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	628b      	str	r3, [r1, #40]	; 0x28
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c56:	3b01      	subs	r3, #1
 8002c58:	025b      	lsls	r3, r3, #9
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	3b01      	subs	r3, #1
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	3b01      	subs	r3, #1
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c78:	4923      	ldr	r1, [pc, #140]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c7e:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8e:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_RCC_OscConfig+0x778>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c96:	00d2      	lsls	r2, r2, #3
 8002c98:	491b      	ldr	r1, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	f023 020c 	bic.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4917      	ldr	r1, [pc, #92]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f023 0202 	bic.w	r2, r3, #2
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	4912      	ldr	r1, [pc, #72]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fd ff4d 	bl	8000b9c <HAL_GetTick>
 8002d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d04:	e011      	b.n	8002d2a <HAL_RCC_OscConfig+0x78e>
 8002d06:	bf00      	nop
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	58024800 	.word	0x58024800
 8002d10:	fffffc0c 	.word	0xfffffc0c
 8002d14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fd ff40 	bl	8000b9c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e08a      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x77c>
 8002d36:	e082      	b.n	8002e3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d38:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a42      	ldr	r2, [pc, #264]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fd ff2a 	bl	8000b9c <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fd ff26 	bl	8000b9c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e070      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d5e:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x7b0>
 8002d6a:	e068      	b.n	8002e3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d6c:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d72:	4b35      	ldr	r3, [pc, #212]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d031      	beq.n	8002de4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0203 	and.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d12a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d122      	bne.n	8002de4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	0a5b      	lsrs	r3, r3, #9
 8002db2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d108      	bne.n	8002de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	0e1b      	lsrs	r3, r3, #24
 8002dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e02b      	b.n	8002e40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002de8:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	08db      	lsrs	r3, r3, #3
 8002dee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002df2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d01f      	beq.n	8002e3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e0a:	f7fd fec7 	bl	8000b9c <HAL_GetTick>
 8002e0e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e10:	bf00      	nop
 8002e12:	f7fd fec3 	bl	8000b9c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d0f9      	beq.n	8002e12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_RCC_OscConfig+0x8b0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e2a:	00d2      	lsls	r2, r2, #3
 8002e2c:	4906      	ldr	r1, [pc, #24]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_RCC_OscConfig+0x8ac>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3730      	adds	r7, #48	; 0x30
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	ffff0007 	.word	0xffff0007

08002e50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e19c      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b8a      	ldr	r3, [pc, #552]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d910      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b87      	ldr	r3, [pc, #540]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 020f 	bic.w	r2, r3, #15
 8002e7a:	4985      	ldr	r1, [pc, #532]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b83      	ldr	r3, [pc, #524]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e184      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d908      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb0:	4b78      	ldr	r3, [pc, #480]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4975      	ldr	r1, [pc, #468]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d908      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	496a      	ldr	r1, [pc, #424]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d010      	beq.n	8002f1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	4b64      	ldr	r3, [pc, #400]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d908      	bls.n	8002f1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	495e      	ldr	r1, [pc, #376]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d010      	beq.n	8002f4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d908      	bls.n	8002f4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f3a:	4b56      	ldr	r3, [pc, #344]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4953      	ldr	r1, [pc, #332]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d908      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f023 020f 	bic.w	r2, r3, #15
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4947      	ldr	r1, [pc, #284]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d055      	beq.n	8003032 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f86:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	4940      	ldr	r1, [pc, #256]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa0:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d121      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0f6      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d115      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0ea      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0de      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0d6      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f023 0207 	bic.w	r2, r3, #7
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4925      	ldr	r1, [pc, #148]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003002:	f7fd fdcb 	bl	8000b9c <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003008:	e00a      	b.n	8003020 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300a:	f7fd fdc7 	bl	8000b9c <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0be      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	429a      	cmp	r2, r3
 8003030:	d1eb      	bne.n	800300a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	429a      	cmp	r2, r3
 800304c:	d208      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f023 020f 	bic.w	r2, r3, #15
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_RCC_ClockConfig+0x244>)
 800305c:	4313      	orrs	r3, r2
 800305e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d214      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 020f 	bic.w	r2, r3, #15
 8003076:	4906      	ldr	r1, [pc, #24]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_RCC_ClockConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e086      	b.n	800319e <HAL_RCC_ClockConfig+0x34e>
 8003090:	52002000 	.word	0x52002000
 8003094:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d010      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d208      	bcs.n	80030c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030b4:	4b3c      	ldr	r3, [pc, #240]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	4939      	ldr	r1, [pc, #228]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030de:	429a      	cmp	r2, r3
 80030e0:	d208      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	492e      	ldr	r1, [pc, #184]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d010      	beq.n	8003122 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699a      	ldr	r2, [r3, #24]
 8003104:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800310c:	429a      	cmp	r2, r3
 800310e:	d208      	bcs.n	8003122 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003110:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	4922      	ldr	r1, [pc, #136]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 800311e:	4313      	orrs	r3, r2
 8003120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800313a:	429a      	cmp	r2, r3
 800313c:	d208      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800313e:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4917      	ldr	r1, [pc, #92]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 800314c:	4313      	orrs	r3, r2
 800314e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003150:	f000 f844 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	4912      	ldr	r1, [pc, #72]	; (80031ac <HAL_RCC_ClockConfig+0x35c>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <HAL_RCC_ClockConfig+0x358>)
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_RCC_ClockConfig+0x35c>)
 8003178:	5cd3      	ldrb	r3, [r2, r3]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
 8003184:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <HAL_RCC_ClockConfig+0x360>)
 8003186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x364>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_RCC_ClockConfig+0x368>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fbfa 	bl	800098c <HAL_InitTick>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	58024400 	.word	0x58024400
 80031ac:	080080b0 	.word	0x080080b0
 80031b0:	24000004 	.word	0x24000004
 80031b4:	24000000 	.word	0x24000000
 80031b8:	24000008 	.word	0x24000008

080031bc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_EnableCSS+0x1c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_RCC_EnableCSS+0x1c>)
 80031c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	58024400 	.word	0x58024400

080031dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e2:	4bb3      	ldr	r3, [pc, #716]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ea:	2b18      	cmp	r3, #24
 80031ec:	f200 8155 	bhi.w	800349a <HAL_RCC_GetSysClockFreq+0x2be>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800325d 	.word	0x0800325d
 80031fc:	0800349b 	.word	0x0800349b
 8003200:	0800349b 	.word	0x0800349b
 8003204:	0800349b 	.word	0x0800349b
 8003208:	0800349b 	.word	0x0800349b
 800320c:	0800349b 	.word	0x0800349b
 8003210:	0800349b 	.word	0x0800349b
 8003214:	0800349b 	.word	0x0800349b
 8003218:	08003283 	.word	0x08003283
 800321c:	0800349b 	.word	0x0800349b
 8003220:	0800349b 	.word	0x0800349b
 8003224:	0800349b 	.word	0x0800349b
 8003228:	0800349b 	.word	0x0800349b
 800322c:	0800349b 	.word	0x0800349b
 8003230:	0800349b 	.word	0x0800349b
 8003234:	0800349b 	.word	0x0800349b
 8003238:	08003289 	.word	0x08003289
 800323c:	0800349b 	.word	0x0800349b
 8003240:	0800349b 	.word	0x0800349b
 8003244:	0800349b 	.word	0x0800349b
 8003248:	0800349b 	.word	0x0800349b
 800324c:	0800349b 	.word	0x0800349b
 8003250:	0800349b 	.word	0x0800349b
 8003254:	0800349b 	.word	0x0800349b
 8003258:	0800328f 	.word	0x0800328f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800325c:	4b94      	ldr	r3, [pc, #592]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003268:	4b91      	ldr	r3, [pc, #580]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	08db      	lsrs	r3, r3, #3
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	4a90      	ldr	r2, [pc, #576]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
 8003278:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800327a:	e111      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800327c:	4b8d      	ldr	r3, [pc, #564]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800327e:	61bb      	str	r3, [r7, #24]
      break;
 8003280:	e10e      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003282:	4b8d      	ldr	r3, [pc, #564]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003284:	61bb      	str	r3, [r7, #24]
      break;
 8003286:	e10b      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003288:	4b8c      	ldr	r3, [pc, #560]	; (80034bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800328a:	61bb      	str	r3, [r7, #24]
      break;
 800328c:	e108      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800328e:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003298:	4b85      	ldr	r3, [pc, #532]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032a4:	4b82      	ldr	r3, [pc, #520]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032ae:	4b80      	ldr	r3, [pc, #512]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	08db      	lsrs	r3, r3, #3
 80032b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80e1 	beq.w	8003494 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	f000 8083 	beq.w	80033e0 <HAL_RCC_GetSysClockFreq+0x204>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	f200 80a1 	bhi.w	8003424 <HAL_RCC_GetSysClockFreq+0x248>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x114>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d056      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x1c0>
 80032ee:	e099      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032f0:	4b6f      	ldr	r3, [pc, #444]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d02d      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032fc:	4b6c      	ldr	r3, [pc, #432]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	08db      	lsrs	r3, r3, #3
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	4a6b      	ldr	r2, [pc, #428]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003326:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003336:	ed97 6a02 	vldr	s12, [r7, #8]
 800333a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800333e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003352:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003356:	e087      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003362:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336a:	4b51      	ldr	r3, [pc, #324]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337a:	ed97 6a02 	vldr	s12, [r7, #8]
 800337e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800338e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003396:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800339a:	e065      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ae:	4b40      	ldr	r3, [pc, #256]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033be:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033de:	e043      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80033ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f2:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003402:	ed97 6a02 	vldr	s12, [r7, #8]
 8003406:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003422:	e021      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003436:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003446:	ed97 6a02 	vldr	s12, [r7, #8]
 800344a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800344e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800345a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003466:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	0a5b      	lsrs	r3, r3, #9
 800346e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003472:	3301      	adds	r3, #1
 8003474:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003480:	edd7 6a07 	vldr	s13, [r7, #28]
 8003484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800348c:	ee17 3a90 	vmov	r3, s15
 8003490:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003492:	e005      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
      break;
 8003498:	e002      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800349c:	61bb      	str	r3, [r7, #24]
      break;
 800349e:	bf00      	nop
  }

  return sysclockfreq;
 80034a0:	69bb      	ldr	r3, [r7, #24]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	58024400 	.word	0x58024400
 80034b4:	03d09000 	.word	0x03d09000
 80034b8:	003d0900 	.word	0x003d0900
 80034bc:	017d7840 	.word	0x017d7840
 80034c0:	46000000 	.word	0x46000000
 80034c4:	4c742400 	.word	0x4c742400
 80034c8:	4a742400 	.word	0x4a742400
 80034cc:	4bbebc20 	.word	0x4bbebc20

080034d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034d6:	f7ff fe81 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_GetHCLKFreq+0x50>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	490f      	ldr	r1, [pc, #60]	; (8003524 <HAL_RCC_GetHCLKFreq+0x54>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <HAL_RCC_GetHCLKFreq+0x50>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	4a09      	ldr	r2, [pc, #36]	; (8003524 <HAL_RCC_GetHCLKFreq+0x54>)
 80034fe:	5cd3      	ldrb	r3, [r2, r3]
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <HAL_RCC_GetHCLKFreq+0x58>)
 800350c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <HAL_RCC_GetHCLKFreq+0x58>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	58024400 	.word	0x58024400
 8003524:	080080b0 	.word	0x080080b0
 8003528:	24000004 	.word	0x24000004
 800352c:	24000000 	.word	0x24000000

08003530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003534:	f7ff ffcc 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4904      	ldr	r1, [pc, #16]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	58024400 	.word	0x58024400
 8003558:	080080b0 	.word	0x080080b0

0800355c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	223f      	movs	r2, #63	; 0x3f
 800356a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <HAL_RCC_GetClockConfig+0x7c>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f003 0207 	and.w	r2, r3, #7
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003578:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <HAL_RCC_GetClockConfig+0x7c>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <HAL_RCC_GetClockConfig+0x7c>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 020f 	and.w	r2, r3, #15
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_RCC_GetClockConfig+0x7c>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <HAL_RCC_GetClockConfig+0x7c>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_GetClockConfig+0x7c>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_RCC_GetClockConfig+0x7c>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_RCC_GetClockConfig+0x80>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	58024400 	.word	0x58024400
 80035dc:	52002000 	.word	0x52002000

080035e0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_RCC_NMI_IRQHandler+0x24>)
 80035e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80035f2:	f000 f809 	bl	8003608 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80035f6:	4b03      	ldr	r3, [pc, #12]	; (8003604 <HAL_RCC_NMI_IRQHandler+0x24>)
 80035f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fc:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	58024400 	.word	0x58024400

08003608 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800361c:	b0ca      	sub	sp, #296	; 0x128
 800361e:	af00      	add	r7, sp, #0
 8003620:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800362a:	2300      	movs	r3, #0
 800362c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800363c:	2500      	movs	r5, #0
 800363e:	ea54 0305 	orrs.w	r3, r4, r5
 8003642:	d049      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800364a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800364e:	d02f      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003650:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003654:	d828      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800365a:	d01a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800365c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003660:	d822      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366a:	d007      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800366c:	e01c      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800366e:	4bb8      	ldr	r3, [pc, #736]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	4ab7      	ldr	r2, [pc, #732]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003678:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800367a:	e01a      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800367c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003680:	3308      	adds	r3, #8
 8003682:	2102      	movs	r1, #2
 8003684:	4618      	mov	r0, r3
 8003686:	f001 f9d1 	bl	8004a2c <RCCEx_PLL2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003690:	e00f      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003696:	3328      	adds	r3, #40	; 0x28
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fa78 	bl	8004b90 <RCCEx_PLL3_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036a6:	e004      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036ba:	4ba5      	ldr	r3, [pc, #660]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c8:	4aa1      	ldr	r2, [pc, #644]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	6513      	str	r3, [r2, #80]	; 0x50
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80036e4:	f04f 0900 	mov.w	r9, #0
 80036e8:	ea58 0309 	orrs.w	r3, r8, r9
 80036ec:	d047      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d82a      	bhi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003715 	.word	0x08003715
 8003704:	08003723 	.word	0x08003723
 8003708:	08003739 	.word	0x08003739
 800370c:	08003757 	.word	0x08003757
 8003710:	08003757 	.word	0x08003757
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003714:	4b8e      	ldr	r3, [pc, #568]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	4a8d      	ldr	r2, [pc, #564]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003720:	e01a      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	3308      	adds	r3, #8
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f97e 	bl	8004a2c <RCCEx_PLL2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003736:	e00f      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373c:	3328      	adds	r3, #40	; 0x28
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fa25 	bl	8004b90 <RCCEx_PLL3_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800374c:	e004      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003760:	4b7b      	ldr	r3, [pc, #492]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	f023 0107 	bic.w	r1, r3, #7
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4a78      	ldr	r2, [pc, #480]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6513      	str	r3, [r2, #80]	; 0x50
 8003774:	e003      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800377a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800378a:	f04f 0b00 	mov.w	fp, #0
 800378e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003792:	d04c      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379e:	d030      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a4:	d829      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037a6:	2bc0      	cmp	r3, #192	; 0xc0
 80037a8:	d02d      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037aa:	2bc0      	cmp	r3, #192	; 0xc0
 80037ac:	d825      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d018      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037b2:	2b80      	cmp	r3, #128	; 0x80
 80037b4:	d821      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d007      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80037be:	e01c      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4b63      	ldr	r3, [pc, #396]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4a62      	ldr	r2, [pc, #392]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037cc:	e01c      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d2:	3308      	adds	r3, #8
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 f928 	bl	8004a2c <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037e2:	e011      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e8:	3328      	adds	r3, #40	; 0x28
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 f9cf 	bl	8004b90 <RCCEx_PLL3_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037f8:	e006      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003800:	e002      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003810:	4b4f      	ldr	r3, [pc, #316]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	4a4c      	ldr	r2, [pc, #304]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003820:	430b      	orrs	r3, r1
 8003822:	6513      	str	r3, [r2, #80]	; 0x50
 8003824:	e003      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800382a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800383a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003844:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003848:	460b      	mov	r3, r1
 800384a:	4313      	orrs	r3, r2
 800384c:	d053      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003852:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800385a:	d035      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800385c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003860:	d82e      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003862:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003866:	d031      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003868:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800386c:	d828      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800386e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003872:	d01a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003878:	d822      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800387e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003882:	d007      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003884:	e01c      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003886:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	4a31      	ldr	r2, [pc, #196]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800388c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003892:	e01c      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003898:	3308      	adds	r3, #8
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f001 f8c5 	bl	8004a2c <RCCEx_PLL2_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038a8:	e011      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ae:	3328      	adds	r3, #40	; 0x28
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f96c 	bl	8004b90 <RCCEx_PLL3_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038be:	e006      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038c6:	e002      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038c8:	bf00      	nop
 80038ca:	e000      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038d6:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038e6:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6593      	str	r3, [r2, #88]	; 0x58
 80038ec:	e003      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003902:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003906:	2300      	movs	r3, #0
 8003908:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800390c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003910:	460b      	mov	r3, r1
 8003912:	4313      	orrs	r3, r2
 8003914:	d056      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800391e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003922:	d038      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003928:	d831      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800392a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800392e:	d034      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003930:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003934:	d82b      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800393a:	d01d      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800393c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003940:	d825      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d006      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800394c:	e01f      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800394e:	bf00      	nop
 8003950:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003954:	4ba2      	ldr	r3, [pc, #648]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4aa1      	ldr	r2, [pc, #644]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003960:	e01c      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003966:	3308      	adds	r3, #8
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f001 f85e 	bl	8004a2c <RCCEx_PLL2_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003976:	e011      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397c:	3328      	adds	r3, #40	; 0x28
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f905 	bl	8004b90 <RCCEx_PLL3_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800398c:	e006      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003994:	e002      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800399a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039a4:	4b8e      	ldr	r3, [pc, #568]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039b4:	4a8a      	ldr	r2, [pc, #552]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b6:	430b      	orrs	r3, r1
 80039b8:	6593      	str	r3, [r2, #88]	; 0x58
 80039ba:	e003      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80039d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80039da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80039de:	460b      	mov	r3, r1
 80039e0:	4313      	orrs	r3, r2
 80039e2:	d03a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	2b30      	cmp	r3, #48	; 0x30
 80039ec:	d01f      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039ee:	2b30      	cmp	r3, #48	; 0x30
 80039f0:	d819      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d00c      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d815      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d019      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d111      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a02:	4b77      	ldr	r3, [pc, #476]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	4a76      	ldr	r2, [pc, #472]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a0e:	e011      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a14:	3308      	adds	r3, #8
 8003a16:	2102      	movs	r1, #2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 f807 	bl	8004a2c <RCCEx_PLL2_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a24:	e006      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a2c:	e002      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a50:	e003      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003a66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4313      	orrs	r3, r2
 8003a78:	d051      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a84:	d035      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a8a:	d82e      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a90:	d031      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a96:	d828      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9c:	d01a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa2:	d822      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aac:	d007      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003aae:	e01c      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab0:	4b4b      	ldr	r3, [pc, #300]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	4a4a      	ldr	r2, [pc, #296]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003abc:	e01c      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 ffb0 	bl	8004a2c <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ad2:	e011      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad8:	3328      	adds	r3, #40	; 0x28
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 f857 	bl	8004b90 <RCCEx_PLL3_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ae8:	e006      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003af0:	e002      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b00:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6513      	str	r3, [r2, #80]	; 0x50
 8003b14:	e003      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	d056      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b48:	d033      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4e:	d82c      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b54:	d02f      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b5a:	d826      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b60:	d02b      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b66:	d820      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b6c:	d012      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b72:	d81a      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d022      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d115      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b82:	3308      	adds	r3, #8
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 ff50 	bl	8004a2c <RCCEx_PLL2_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b92:	e015      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b98:	3328      	adds	r3, #40	; 0x28
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fff7 	bl	8004b90 <RCCEx_PLL3_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bb0:	e006      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10d      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bcc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd6:	4a02      	ldr	r2, [pc, #8]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6513      	str	r3, [r2, #80]	; 0x50
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bde:	bf00      	nop
 8003be0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003be8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	d055      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c18:	d033      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c1e:	d82c      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c24:	d02f      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2a:	d826      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c30:	d02b      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c36:	d820      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c3c:	d012      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c42:	d81a      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d022      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c4c:	d115      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c52:	3308      	adds	r3, #8
 8003c54:	2101      	movs	r1, #1
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fee8 	bl	8004a2c <RCCEx_PLL2_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c62:	e015      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c68:	3328      	adds	r3, #40	; 0x28
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 ff8f 	bl	8004b90 <RCCEx_PLL3_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c78:	e00a      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c80:	e006      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c82:	bf00      	nop
 8003c84:	e004      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c86:	bf00      	nop
 8003c88:	e002      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c8a:	bf00      	nop
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c98:	4ba3      	ldr	r3, [pc, #652]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ca8:	4a9f      	ldr	r2, [pc, #636]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003caa:	430b      	orrs	r3, r1
 8003cac:	6593      	str	r3, [r2, #88]	; 0x58
 8003cae:	e003      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	d037      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce2:	d00e      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce8:	d816      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf2:	d111      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf4:	4b8c      	ldr	r3, [pc, #560]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4a8b      	ldr	r2, [pc, #556]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d00:	e00f      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d06:	3308      	adds	r3, #8
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fe8e 	bl	8004a2c <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d16:	e004      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d1e:	e000      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a7b      	ldr	r2, [pc, #492]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	6513      	str	r3, [r2, #80]	; 0x50
 8003d3e:	e003      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4313      	orrs	r3, r2
 8003d66:	d039      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d81c      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003db5 	.word	0x08003db5
 8003d7c:	08003d89 	.word	0x08003d89
 8003d80:	08003d97 	.word	0x08003d97
 8003d84:	08003db5 	.word	0x08003db5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d88:	4b67      	ldr	r3, [pc, #412]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a66      	ldr	r2, [pc, #408]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d94:	e00f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fe44 	bl	8004a2c <RCCEx_PLL2_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003daa:	e004      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dbe:	4b5a      	ldr	r3, [pc, #360]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	f023 0103 	bic.w	r1, r3, #3
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dcc:	4a56      	ldr	r2, [pc, #344]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003df2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f000 809f 	beq.w	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfe:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e0a:	f7fc fec7 	bl	8000b9c <HAL_GetTick>
 8003e0e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e12:	e00b      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e14:	f7fc fec2 	bl	8000b9c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b64      	cmp	r3, #100	; 0x64
 8003e22:	d903      	bls.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e2a:	e005      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ed      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d179      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e40:	4b39      	ldr	r3, [pc, #228]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e4c:	4053      	eors	r3, r2
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d015      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e56:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	4a30      	ldr	r2, [pc, #192]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6e:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a2d      	ldr	r2, [pc, #180]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e7a:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8e:	d118      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fc fe84 	bl	8000b9c <HAL_GetTick>
 8003e94:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e98:	e00d      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fc fe7f 	bl	8000b9c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ea4:	1ad2      	subs	r2, r2, r3
 8003ea6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d903      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003eb4:	e005      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0eb      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d129      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ece:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eda:	d10e      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eec:	091a      	lsrs	r2, r3, #4
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6113      	str	r3, [r2, #16]
 8003ef8:	e005      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f04:	6113      	str	r3, [r2, #16]
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f16:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	e00e      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003f26:	e009      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	58024800 	.word	0x58024800
 8003f30:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f002 0301 	and.w	r3, r2, #1
 8003f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f000 8089 	beq.w	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f64:	2b28      	cmp	r3, #40	; 0x28
 8003f66:	d86b      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08004049 	.word	0x08004049
 8003f74:	08004041 	.word	0x08004041
 8003f78:	08004041 	.word	0x08004041
 8003f7c:	08004041 	.word	0x08004041
 8003f80:	08004041 	.word	0x08004041
 8003f84:	08004041 	.word	0x08004041
 8003f88:	08004041 	.word	0x08004041
 8003f8c:	08004041 	.word	0x08004041
 8003f90:	08004015 	.word	0x08004015
 8003f94:	08004041 	.word	0x08004041
 8003f98:	08004041 	.word	0x08004041
 8003f9c:	08004041 	.word	0x08004041
 8003fa0:	08004041 	.word	0x08004041
 8003fa4:	08004041 	.word	0x08004041
 8003fa8:	08004041 	.word	0x08004041
 8003fac:	08004041 	.word	0x08004041
 8003fb0:	0800402b 	.word	0x0800402b
 8003fb4:	08004041 	.word	0x08004041
 8003fb8:	08004041 	.word	0x08004041
 8003fbc:	08004041 	.word	0x08004041
 8003fc0:	08004041 	.word	0x08004041
 8003fc4:	08004041 	.word	0x08004041
 8003fc8:	08004041 	.word	0x08004041
 8003fcc:	08004041 	.word	0x08004041
 8003fd0:	08004049 	.word	0x08004049
 8003fd4:	08004041 	.word	0x08004041
 8003fd8:	08004041 	.word	0x08004041
 8003fdc:	08004041 	.word	0x08004041
 8003fe0:	08004041 	.word	0x08004041
 8003fe4:	08004041 	.word	0x08004041
 8003fe8:	08004041 	.word	0x08004041
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	08004049 	.word	0x08004049
 8003ff4:	08004041 	.word	0x08004041
 8003ff8:	08004041 	.word	0x08004041
 8003ffc:	08004041 	.word	0x08004041
 8004000:	08004041 	.word	0x08004041
 8004004:	08004041 	.word	0x08004041
 8004008:	08004041 	.word	0x08004041
 800400c:	08004041 	.word	0x08004041
 8004010:	08004049 	.word	0x08004049
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004018:	3308      	adds	r3, #8
 800401a:	2101      	movs	r1, #1
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fd05 	bl	8004a2c <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004028:	e00f      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402e:	3328      	adds	r3, #40	; 0x28
 8004030:	2101      	movs	r1, #1
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fdac 	bl	8004b90 <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800403e:	e004      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004046:	e000      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004052:	4bbf      	ldr	r3, [pc, #764]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004060:	4abb      	ldr	r2, [pc, #748]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004062:	430b      	orrs	r3, r1
 8004064:	6553      	str	r3, [r2, #84]	; 0x54
 8004066:	e003      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800406c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f002 0302 	and.w	r3, r2, #2
 800407c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004086:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d041      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004096:	2b05      	cmp	r3, #5
 8004098:	d824      	bhi.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040ed 	.word	0x080040ed
 80040a4:	080040b9 	.word	0x080040b9
 80040a8:	080040cf 	.word	0x080040cf
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	080040ed 	.word	0x080040ed
 80040b4:	080040ed 	.word	0x080040ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040bc:	3308      	adds	r3, #8
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fcb3 	bl	8004a2c <RCCEx_PLL2_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040cc:	e00f      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d2:	3328      	adds	r3, #40	; 0x28
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fd5a 	bl	8004b90 <RCCEx_PLL3_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040e2:	e004      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040ea:	e000      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80040ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040f6:	4b96      	ldr	r3, [pc, #600]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f023 0107 	bic.w	r1, r3, #7
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004104:	4a92      	ldr	r2, [pc, #584]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004106:	430b      	orrs	r3, r1
 8004108:	6553      	str	r3, [r2, #84]	; 0x54
 800410a:	e003      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f002 0304 	and.w	r3, r2, #4
 8004120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800412a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d044      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	2b05      	cmp	r3, #5
 800413e:	d825      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	08004195 	.word	0x08004195
 800414c:	08004161 	.word	0x08004161
 8004150:	08004177 	.word	0x08004177
 8004154:	08004195 	.word	0x08004195
 8004158:	08004195 	.word	0x08004195
 800415c:	08004195 	.word	0x08004195
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004164:	3308      	adds	r3, #8
 8004166:	2101      	movs	r1, #1
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fc5f 	bl	8004a2c <RCCEx_PLL2_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004174:	e00f      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417a:	3328      	adds	r3, #40	; 0x28
 800417c:	2101      	movs	r1, #1
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fd06 	bl	8004b90 <RCCEx_PLL3_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800418a:	e004      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800419e:	4b6c      	ldr	r3, [pc, #432]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	f023 0107 	bic.w	r1, r3, #7
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ae:	4a68      	ldr	r2, [pc, #416]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6593      	str	r3, [r2, #88]	; 0x58
 80041b4:	e003      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f002 0320 	and.w	r3, r2, #32
 80041ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041d8:	460b      	mov	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	d055      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ea:	d033      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80041ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041f0:	d82c      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f6:	d02f      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fc:	d826      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004202:	d02b      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004204:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004208:	d820      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800420a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800420e:	d012      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004214:	d81a      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d022      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800421a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800421e:	d115      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004224:	3308      	adds	r3, #8
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fbff 	bl	8004a2c <RCCEx_PLL2_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004234:	e015      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800423a:	3328      	adds	r3, #40	; 0x28
 800423c:	2102      	movs	r1, #2
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fca6 	bl	8004b90 <RCCEx_PLL3_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800424a:	e00a      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004252:	e006      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004254:	bf00      	nop
 8004256:	e004      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004258:	bf00      	nop
 800425a:	e002      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800425c:	bf00      	nop
 800425e:	e000      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800426a:	4b39      	ldr	r3, [pc, #228]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	4a35      	ldr	r2, [pc, #212]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800427c:	430b      	orrs	r3, r1
 800427e:	6553      	str	r3, [r2, #84]	; 0x54
 8004280:	e003      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004286:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800429a:	2300      	movs	r3, #0
 800429c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80042a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4313      	orrs	r3, r2
 80042a8:	d058      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042b6:	d033      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042bc:	d82c      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c2:	d02f      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c8:	d826      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ce:	d02b      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042d4:	d820      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042da:	d012      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e0:	d81a      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d022      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ea:	d115      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f0:	3308      	adds	r3, #8
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fb99 	bl	8004a2c <RCCEx_PLL2_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004300:	e015      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004306:	3328      	adds	r3, #40	; 0x28
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fc40 	bl	8004b90 <RCCEx_PLL3_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004316:	e00a      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800431e:	e006      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004320:	bf00      	nop
 8004322:	e004      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004324:	bf00      	nop
 8004326:	e002      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800432c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10e      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004346:	4a02      	ldr	r2, [pc, #8]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004348:	430b      	orrs	r3, r1
 800434a:	6593      	str	r3, [r2, #88]	; 0x58
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004372:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d055      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004380:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004384:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004388:	d033      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800438a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800438e:	d82c      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004394:	d02f      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439a:	d826      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800439c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043a0:	d02b      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80043a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043a6:	d820      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ac:	d012      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80043ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b2:	d81a      	bhi.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d022      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80043b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043bc:	d115      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c2:	3308      	adds	r3, #8
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fb30 	bl	8004a2c <RCCEx_PLL2_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043d2:	e015      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	3328      	adds	r3, #40	; 0x28
 80043da:	2102      	movs	r1, #2
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fbd7 	bl	8004b90 <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043e8:	e00a      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043f2:	bf00      	nop
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004400:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004408:	4ba1      	ldr	r3, [pc, #644]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004418:	4a9d      	ldr	r2, [pc, #628]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441a:	430b      	orrs	r3, r1
 800441c:	6593      	str	r3, [r2, #88]	; 0x58
 800441e:	e003      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004424:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f002 0308 	and.w	r3, r2, #8
 8004434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004438:	2300      	movs	r3, #0
 800443a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800443e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004442:	460b      	mov	r3, r1
 8004444:	4313      	orrs	r3, r2
 8004446:	d01e      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800444c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004454:	d10c      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445a:	3328      	adds	r3, #40	; 0x28
 800445c:	2102      	movs	r1, #2
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fb96 	bl	8004b90 <RCCEx_PLL3_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004470:	4b87      	ldr	r3, [pc, #540]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004480:	4a83      	ldr	r2, [pc, #524]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004482:	430b      	orrs	r3, r1
 8004484:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f002 0310 	and.w	r3, r2, #16
 8004492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004496:	2300      	movs	r3, #0
 8004498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800449c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80044a0:	460b      	mov	r3, r1
 80044a2:	4313      	orrs	r3, r2
 80044a4:	d01e      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b2:	d10c      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b8:	3328      	adds	r3, #40	; 0x28
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fb67 	bl	8004b90 <RCCEx_PLL3_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ce:	4b70      	ldr	r3, [pc, #448]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044de:	4a6c      	ldr	r2, [pc, #432]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80044f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80044fe:	460b      	mov	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	d03e      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800450c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004510:	d022      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004516:	d81b      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d00b      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004522:	e015      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004528:	3308      	adds	r3, #8
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fa7d 	bl	8004a2c <RCCEx_PLL2_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004538:	e00f      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453e:	3328      	adds	r3, #40	; 0x28
 8004540:	2102      	movs	r1, #2
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fb24 	bl	8004b90 <RCCEx_PLL3_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800454e:	e004      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004562:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004572:	4a47      	ldr	r2, [pc, #284]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004574:	430b      	orrs	r3, r1
 8004576:	6593      	str	r3, [r2, #88]	; 0x58
 8004578:	e003      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800457e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800458e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004590:	2300      	movs	r3, #0
 8004592:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004594:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004598:	460b      	mov	r3, r1
 800459a:	4313      	orrs	r3, r2
 800459c:	d03b      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045aa:	d01f      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80045ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045b0:	d818      	bhi.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80045b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b6:	d003      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80045b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045bc:	d007      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80045be:	e011      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c0:	4b33      	ldr	r3, [pc, #204]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a32      	ldr	r2, [pc, #200]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045cc:	e00f      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d2:	3328      	adds	r3, #40	; 0x28
 80045d4:	2101      	movs	r1, #1
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fada 	bl	8004b90 <RCCEx_PLL3_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045e2:	e004      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045ea:	e000      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80045ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	4a22      	ldr	r2, [pc, #136]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004608:	430b      	orrs	r3, r1
 800460a:	6553      	str	r3, [r2, #84]	; 0x54
 800460c:	e003      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004622:	673b      	str	r3, [r7, #112]	; 0x70
 8004624:	2300      	movs	r3, #0
 8004626:	677b      	str	r3, [r7, #116]	; 0x74
 8004628:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800462c:	460b      	mov	r3, r1
 800462e:	4313      	orrs	r3, r2
 8004630:	d034      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004640:	d007      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004642:	e011      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a11      	ldr	r2, [pc, #68]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800464a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800464e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004650:	e00e      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004656:	3308      	adds	r3, #8
 8004658:	2102      	movs	r1, #2
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f9e6 	bl	8004a2c <RCCEx_PLL2_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800466e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10d      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800467a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004686:	4a02      	ldr	r2, [pc, #8]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004688:	430b      	orrs	r3, r1
 800468a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800468c:	e006      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004698:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80046a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046aa:	2300      	movs	r3, #0
 80046ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80046b2:	460b      	mov	r3, r1
 80046b4:	4313      	orrs	r3, r2
 80046b6:	d00c      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046bc:	3328      	adds	r3, #40	; 0x28
 80046be:	2102      	movs	r1, #2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fa65 	bl	8004b90 <RCCEx_PLL3_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80046de:	663b      	str	r3, [r7, #96]	; 0x60
 80046e0:	2300      	movs	r3, #0
 80046e2:	667b      	str	r3, [r7, #100]	; 0x64
 80046e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80046e8:	460b      	mov	r3, r1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	d038      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fa:	d018      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80046fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004700:	d811      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004706:	d014      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470c:	d80b      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d011      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004716:	d106      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004718:	4bc3      	ldr	r3, [pc, #780]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	4ac2      	ldr	r2, [pc, #776]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004724:	e008      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800472c:	e004      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10b      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004740:	4bb9      	ldr	r3, [pc, #740]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004750:	4ab5      	ldr	r2, [pc, #724]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004752:	430b      	orrs	r3, r1
 8004754:	6553      	str	r3, [r2, #84]	; 0x54
 8004756:	e003      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800475c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800476c:	65bb      	str	r3, [r7, #88]	; 0x58
 800476e:	2300      	movs	r3, #0
 8004770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004772:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004776:	460b      	mov	r3, r1
 8004778:	4313      	orrs	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800477c:	4baa      	ldr	r3, [pc, #680]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800477e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004780:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478a:	4aa7      	ldr	r2, [pc, #668]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478c:	430b      	orrs	r3, r1
 800478e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800479c:	653b      	str	r3, [r7, #80]	; 0x50
 800479e:	2300      	movs	r3, #0
 80047a0:	657b      	str	r3, [r7, #84]	; 0x54
 80047a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80047a6:	460b      	mov	r3, r1
 80047a8:	4313      	orrs	r3, r2
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047ac:	4b9e      	ldr	r3, [pc, #632]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047bc:	4a9a      	ldr	r2, [pc, #616]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047be:	430b      	orrs	r3, r1
 80047c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80047ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d0:	2300      	movs	r3, #0
 80047d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80047d8:	460b      	mov	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047de:	4b92      	ldr	r3, [pc, #584]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ec:	4a8e      	ldr	r2, [pc, #568]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ee:	430b      	orrs	r3, r1
 80047f0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80047fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004800:	2300      	movs	r3, #0
 8004802:	647b      	str	r3, [r7, #68]	; 0x44
 8004804:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004808:	460b      	mov	r3, r1
 800480a:	4313      	orrs	r3, r2
 800480c:	d00e      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800480e:	4b86      	ldr	r3, [pc, #536]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	4a85      	ldr	r2, [pc, #532]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004814:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004818:	6113      	str	r3, [r2, #16]
 800481a:	4b83      	ldr	r3, [pc, #524]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800481c:	6919      	ldr	r1, [r3, #16]
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004822:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004826:	4a80      	ldr	r2, [pc, #512]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004828:	430b      	orrs	r3, r1
 800482a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
 800483a:	2300      	movs	r3, #0
 800483c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004842:	460b      	mov	r3, r1
 8004844:	4313      	orrs	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004848:	4b77      	ldr	r3, [pc, #476]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800484a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	4a74      	ldr	r2, [pc, #464]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004858:	430b      	orrs	r3, r1
 800485a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800485c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004868:	633b      	str	r3, [r7, #48]	; 0x30
 800486a:	2300      	movs	r3, #0
 800486c:	637b      	str	r3, [r7, #52]	; 0x34
 800486e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004872:	460b      	mov	r3, r1
 8004874:	4313      	orrs	r3, r2
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004878:	4b6b      	ldr	r3, [pc, #428]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004888:	4a67      	ldr	r2, [pc, #412]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800488a:	430b      	orrs	r3, r1
 800488c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	2100      	movs	r1, #0
 8004898:	62b9      	str	r1, [r7, #40]	; 0x28
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80048a4:	460b      	mov	r3, r1
 80048a6:	4313      	orrs	r3, r2
 80048a8:	d011      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ae:	3308      	adds	r3, #8
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f8ba 	bl	8004a2c <RCCEx_PLL2_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	2100      	movs	r1, #0
 80048d8:	6239      	str	r1, [r7, #32]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
 80048e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048e4:	460b      	mov	r3, r1
 80048e6:	4313      	orrs	r3, r2
 80048e8:	d011      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ee:	3308      	adds	r3, #8
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f89a 	bl	8004a2c <RCCEx_PLL2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800490a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	2100      	movs	r1, #0
 8004918:	61b9      	str	r1, [r7, #24]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004924:	460b      	mov	r3, r1
 8004926:	4313      	orrs	r3, r2
 8004928:	d011      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492e:	3308      	adds	r3, #8
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f87a 	bl	8004a2c <RCCEx_PLL2_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800493e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800494a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800494e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	2100      	movs	r1, #0
 8004958:	6139      	str	r1, [r7, #16]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004964:	460b      	mov	r3, r1
 8004966:	4313      	orrs	r3, r2
 8004968:	d011      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496e:	3328      	adds	r3, #40	; 0x28
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f90c 	bl	8004b90 <RCCEx_PLL3_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800497e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800498a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800498e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	2100      	movs	r1, #0
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049a4:	460b      	mov	r3, r1
 80049a6:	4313      	orrs	r3, r2
 80049a8:	d011      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ae:	3328      	adds	r3, #40	; 0x28
 80049b0:	2101      	movs	r1, #1
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f8ec 	bl	8004b90 <RCCEx_PLL3_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	2100      	movs	r1, #0
 80049d8:	6039      	str	r1, [r7, #0]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049e4:	460b      	mov	r3, r1
 80049e6:	4313      	orrs	r3, r2
 80049e8:	d011      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ee:	3328      	adds	r3, #40	; 0x28
 80049f0:	2102      	movs	r1, #2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f8cc 	bl	8004b90 <RCCEx_PLL3_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004a0e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004a22:	46bd      	mov	sp, r7
 8004a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a28:	58024400 	.word	0x58024400

08004a2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a3a:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d101      	bne.n	8004a4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e099      	b.n	8004b7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a4a:	4b4f      	ldr	r3, [pc, #316]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4e      	ldr	r2, [pc, #312]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a56:	f7fc f8a1 	bl	8000b9c <HAL_GetTick>
 8004a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a5c:	e008      	b.n	8004a70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a5e:	f7fc f89d 	bl	8000b9c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e086      	b.n	8004b7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a70:	4b45      	ldr	r3, [pc, #276]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a7c:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	031b      	lsls	r3, r3, #12
 8004a8a:	493f      	ldr	r1, [pc, #252]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	025b      	lsls	r3, r3, #9
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	061b      	lsls	r3, r3, #24
 8004abc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ac0:	4931      	ldr	r1, [pc, #196]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ac6:	4b30      	ldr	r3, [pc, #192]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	492d      	ldr	r1, [pc, #180]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f023 0220 	bic.w	r2, r3, #32
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	4928      	ldr	r1, [pc, #160]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004af0:	f023 0310 	bic.w	r3, r3, #16
 8004af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004af8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <RCCEx_PLL2_Config+0x160>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	69d2      	ldr	r2, [r2, #28]
 8004b02:	00d2      	lsls	r2, r2, #3
 8004b04:	4920      	ldr	r1, [pc, #128]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b0a:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b10:	f043 0310 	orr.w	r3, r3, #16
 8004b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b28:	e00f      	b.n	8004b4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b30:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b3c:	e005      	b.n	8004b4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b4a:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b56:	f7fc f821 	bl	8000b9c <HAL_GetTick>
 8004b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b5c:	e008      	b.n	8004b70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b5e:	f7fc f81d 	bl	8000b9c <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e006      	b.n	8004b7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	ffff0007 	.word	0xffff0007

08004b90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b9e:	4b53      	ldr	r3, [pc, #332]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d101      	bne.n	8004bae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e099      	b.n	8004ce2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bae:	4b4f      	ldr	r3, [pc, #316]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a4e      	ldr	r2, [pc, #312]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bba:	f7fb ffef 	bl	8000b9c <HAL_GetTick>
 8004bbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bc0:	e008      	b.n	8004bd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bc2:	f7fb ffeb 	bl	8000b9c <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e086      	b.n	8004ce2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bd4:	4b45      	ldr	r3, [pc, #276]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004be0:	4b42      	ldr	r3, [pc, #264]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	051b      	lsls	r3, r3, #20
 8004bee:	493f      	ldr	r1, [pc, #252]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	628b      	str	r3, [r1, #40]	; 0x28
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	025b      	lsls	r3, r3, #9
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c24:	4931      	ldr	r1, [pc, #196]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c2a:	4b30      	ldr	r3, [pc, #192]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	492d      	ldr	r1, [pc, #180]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c3c:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	4928      	ldr	r1, [pc, #160]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c4e:	4b27      	ldr	r3, [pc, #156]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	4a26      	ldr	r2, [pc, #152]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c5e:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <RCCEx_PLL3_Config+0x160>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	69d2      	ldr	r2, [r2, #28]
 8004c66:	00d2      	lsls	r2, r2, #3
 8004c68:	4920      	ldr	r1, [pc, #128]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c8c:	e00f      	b.n	8004cae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d106      	bne.n	8004ca2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c94:	4b15      	ldr	r3, [pc, #84]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ca0:	e005      	b.n	8004cae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	4a11      	ldr	r2, [pc, #68]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cba:	f7fb ff6f 	bl	8000b9c <HAL_GetTick>
 8004cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cc0:	e008      	b.n	8004cd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cc2:	f7fb ff6b 	bl	8000b9c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e006      	b.n	8004ce2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	ffff0007 	.word	0xffff0007

08004cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e049      	b.n	8004d9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f841 	bl	8004da2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 fa00 	bl	8005138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d001      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e054      	b.n	8004e7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d022      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfa:	d01d      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a22      	ldr	r2, [pc, #136]	; (8004e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a21      	ldr	r2, [pc, #132]	; (8004e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1c      	ldr	r2, [pc, #112]	; (8004e9c <HAL_TIM_Base_Start_IT+0xe4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIM_Base_Start_IT+0x80>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d115      	bne.n	8004e64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xec>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d015      	beq.n	8004e76 <HAL_TIM_Base_Start_IT+0xbe>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d011      	beq.n	8004e76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e62:	e008      	b.n	8004e76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e000      	b.n	8004e78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40010400 	.word	0x40010400
 8004e9c:	40001800 	.word	0x40001800
 8004ea0:	40014000 	.word	0x40014000
 8004ea4:	00010007 	.word	0x00010007

08004ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d122      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d11b      	bne.n	8004f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0202 	mvn.w	r2, #2
 8004ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f905 	bl	80050fa <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8f7 	bl	80050e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f908 	bl	800510e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d122      	bne.n	8004f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d11b      	bne.n	8004f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0204 	mvn.w	r2, #4
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f8db 	bl	80050fa <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f8cd 	bl	80050e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f8de 	bl	800510e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d122      	bne.n	8004fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d11b      	bne.n	8004fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0208 	mvn.w	r2, #8
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2204      	movs	r2, #4
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f8b1 	bl	80050fa <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f8a3 	bl	80050e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f8b4 	bl	800510e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0210 	mvn.w	r2, #16
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f887 	bl	80050fa <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f879 	bl	80050e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f88a 	bl	800510e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d10e      	bne.n	800502c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d107      	bne.n	800502c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0201 	mvn.w	r2, #1
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fb fc7a 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b80      	cmp	r3, #128	; 0x80
 8005038:	d10e      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005044:	2b80      	cmp	r3, #128	; 0x80
 8005046:	d107      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f914 	bl	8005280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d10e      	bne.n	8005086 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d107      	bne.n	8005086 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f907 	bl	8005294 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d10e      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d107      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f838 	bl	8005122 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d10e      	bne.n	80050de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d107      	bne.n	80050de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f06f 0220 	mvn.w	r2, #32
 80050d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f8c7 	bl	800526c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a40      	ldr	r2, [pc, #256]	; (800524c <TIM_Base_SetConfig+0x114>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d00f      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a3d      	ldr	r2, [pc, #244]	; (8005250 <TIM_Base_SetConfig+0x118>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00b      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a3c      	ldr	r2, [pc, #240]	; (8005254 <TIM_Base_SetConfig+0x11c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3b      	ldr	r2, [pc, #236]	; (8005258 <TIM_Base_SetConfig+0x120>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3a      	ldr	r2, [pc, #232]	; (800525c <TIM_Base_SetConfig+0x124>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d108      	bne.n	800518a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2f      	ldr	r2, [pc, #188]	; (800524c <TIM_Base_SetConfig+0x114>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01f      	beq.n	80051d2 <TIM_Base_SetConfig+0x9a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005198:	d01b      	beq.n	80051d2 <TIM_Base_SetConfig+0x9a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2c      	ldr	r2, [pc, #176]	; (8005250 <TIM_Base_SetConfig+0x118>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d017      	beq.n	80051d2 <TIM_Base_SetConfig+0x9a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2b      	ldr	r2, [pc, #172]	; (8005254 <TIM_Base_SetConfig+0x11c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <TIM_Base_SetConfig+0x9a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <TIM_Base_SetConfig+0x120>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00f      	beq.n	80051d2 <TIM_Base_SetConfig+0x9a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a29      	ldr	r2, [pc, #164]	; (800525c <TIM_Base_SetConfig+0x124>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00b      	beq.n	80051d2 <TIM_Base_SetConfig+0x9a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a28      	ldr	r2, [pc, #160]	; (8005260 <TIM_Base_SetConfig+0x128>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d007      	beq.n	80051d2 <TIM_Base_SetConfig+0x9a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a27      	ldr	r2, [pc, #156]	; (8005264 <TIM_Base_SetConfig+0x12c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_Base_SetConfig+0x9a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a26      	ldr	r2, [pc, #152]	; (8005268 <TIM_Base_SetConfig+0x130>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d108      	bne.n	80051e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a10      	ldr	r2, [pc, #64]	; (800524c <TIM_Base_SetConfig+0x114>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00f      	beq.n	8005230 <TIM_Base_SetConfig+0xf8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a12      	ldr	r2, [pc, #72]	; (800525c <TIM_Base_SetConfig+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_Base_SetConfig+0xf8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a11      	ldr	r2, [pc, #68]	; (8005260 <TIM_Base_SetConfig+0x128>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_Base_SetConfig+0xf8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a10      	ldr	r2, [pc, #64]	; (8005264 <TIM_Base_SetConfig+0x12c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0xf8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a0f      	ldr	r2, [pc, #60]	; (8005268 <TIM_Base_SetConfig+0x130>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d103      	bne.n	8005238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	615a      	str	r2, [r3, #20]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40010000 	.word	0x40010000
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40010400 	.word	0x40010400
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <__NVIC_SetPriority>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	6039      	str	r1, [r7, #0]
 80052b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	db0a      	blt.n	80052d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	490c      	ldr	r1, [pc, #48]	; (80052f4 <__NVIC_SetPriority+0x4c>)
 80052c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c6:	0112      	lsls	r2, r2, #4
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	440b      	add	r3, r1
 80052cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80052d0:	e00a      	b.n	80052e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4908      	ldr	r1, [pc, #32]	; (80052f8 <__NVIC_SetPriority+0x50>)
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	3b04      	subs	r3, #4
 80052e0:	0112      	lsls	r2, r2, #4
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	440b      	add	r3, r1
 80052e6:	761a      	strb	r2, [r3, #24]
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	e000e100 	.word	0xe000e100
 80052f8:	e000ed00 	.word	0xe000ed00

080052fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <SysTick_Handler+0x1c>)
 8005302:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005304:	f002 f964 	bl	80075d0 <xTaskGetSchedulerState>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800530e:	f000 fd9b 	bl	8005e48 <xPortSysTickHandler>
  }
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	e000e010 	.word	0xe000e010

0800531c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005320:	2100      	movs	r1, #0
 8005322:	f06f 0004 	mvn.w	r0, #4
 8005326:	f7ff ffbf 	bl	80052a8 <__NVIC_SetPriority>
#endif
}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005336:	f3ef 8305 	mrs	r3, IPSR
 800533a:	603b      	str	r3, [r7, #0]
  return(result);
 800533c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005342:	f06f 0305 	mvn.w	r3, #5
 8005346:	607b      	str	r3, [r7, #4]
 8005348:	e00c      	b.n	8005364 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <osKernelInitialize+0x44>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005352:	4b08      	ldr	r3, [pc, #32]	; (8005374 <osKernelInitialize+0x44>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005358:	2300      	movs	r3, #0
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	e002      	b.n	8005364 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295
 8005362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005364:	687b      	ldr	r3, [r7, #4]
}
 8005366:	4618      	mov	r0, r3
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	240001f0 	.word	0x240001f0

08005378 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800537e:	f3ef 8305 	mrs	r3, IPSR
 8005382:	603b      	str	r3, [r7, #0]
  return(result);
 8005384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <osKernelStart+0x1a>
    stat = osErrorISR;
 800538a:	f06f 0305 	mvn.w	r3, #5
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	e010      	b.n	80053b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <osKernelStart+0x48>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d109      	bne.n	80053ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800539a:	f7ff ffbf 	bl	800531c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <osKernelStart+0x48>)
 80053a0:	2202      	movs	r2, #2
 80053a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053a4:	f001 fcb8 	bl	8006d18 <vTaskStartScheduler>
      stat = osOK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	e002      	b.n	80053b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053b4:	687b      	ldr	r3, [r7, #4]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	240001f0 	.word	0x240001f0

080053c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08e      	sub	sp, #56	; 0x38
 80053c8:	af04      	add	r7, sp, #16
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d4:	f3ef 8305 	mrs	r3, IPSR
 80053d8:	617b      	str	r3, [r7, #20]
  return(result);
 80053da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d17e      	bne.n	80054de <osThreadNew+0x11a>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d07b      	beq.n	80054de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053ea:	2318      	movs	r3, #24
 80053ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80053f2:	f04f 33ff 	mov.w	r3, #4294967295
 80053f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d045      	beq.n	800548a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <osThreadNew+0x48>
        name = attr->name;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <osThreadNew+0x6e>
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b38      	cmp	r3, #56	; 0x38
 8005424:	d805      	bhi.n	8005432 <osThreadNew+0x6e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <osThreadNew+0x72>
        return (NULL);
 8005432:	2300      	movs	r3, #0
 8005434:	e054      	b.n	80054e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	089b      	lsrs	r3, r3, #2
 8005444:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <osThreadNew+0xa8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2bbb      	cmp	r3, #187	; 0xbb
 8005454:	d90a      	bls.n	800546c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <osThreadNew+0xa8>
        mem = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	e010      	b.n	800548e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10c      	bne.n	800548e <osThreadNew+0xca>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d108      	bne.n	800548e <osThreadNew+0xca>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <osThreadNew+0xca>
          mem = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	e001      	b.n	800548e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d110      	bne.n	80054b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800549c:	9202      	str	r2, [sp, #8]
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6a3a      	ldr	r2, [r7, #32]
 80054a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f001 fa48 	bl	8006940 <xTaskCreateStatic>
 80054b0:	4603      	mov	r3, r0
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	e013      	b.n	80054de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d110      	bne.n	80054de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	b29a      	uxth	r2, r3
 80054c0:	f107 0310 	add.w	r3, r7, #16
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f001 fa93 	bl	80069fa <xTaskCreate>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d001      	beq.n	80054de <osThreadNew+0x11a>
            hTask = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054de:	693b      	ldr	r3, [r7, #16]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3728      	adds	r7, #40	; 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f0:	f3ef 8305 	mrs	r3, IPSR
 80054f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80054f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <osDelay+0x1c>
    stat = osErrorISR;
 80054fc:	f06f 0305 	mvn.w	r3, #5
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e007      	b.n	8005514 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <osDelay+0x2c>
      vTaskDelay(ticks);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fbce 	bl	8006cb0 <vTaskDelay>
    }
  }

  return (stat);
 8005514:	68fb      	ldr	r3, [r7, #12]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4a07      	ldr	r2, [pc, #28]	; (800554c <vApplicationGetIdleTaskMemory+0x2c>)
 8005530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4a06      	ldr	r2, [pc, #24]	; (8005550 <vApplicationGetIdleTaskMemory+0x30>)
 8005536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2280      	movs	r2, #128	; 0x80
 800553c:	601a      	str	r2, [r3, #0]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	240001f4 	.word	0x240001f4
 8005550:	240002b0 	.word	0x240002b0

08005554 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a07      	ldr	r2, [pc, #28]	; (8005580 <vApplicationGetTimerTaskMemory+0x2c>)
 8005564:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4a06      	ldr	r2, [pc, #24]	; (8005584 <vApplicationGetTimerTaskMemory+0x30>)
 800556a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	240004b0 	.word	0x240004b0
 8005584:	2400056c 	.word	0x2400056c

08005588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005594:	f001 fc30 	bl	8006df8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005598:	4b5b      	ldr	r3, [pc, #364]	; (8005708 <pvPortMalloc+0x180>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055a0:	f000 f920 	bl	80057e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055a4:	4b59      	ldr	r3, [pc, #356]	; (800570c <pvPortMalloc+0x184>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f040 8093 	bne.w	80056d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01d      	beq.n	80055f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80055b8:	2208      	movs	r2, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4413      	add	r3, r2
 80055be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d014      	beq.n	80055f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f023 0307 	bic.w	r3, r3, #7
 80055d0:	3308      	adds	r3, #8
 80055d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055f0:	bf00      	nop
 80055f2:	e7fe      	b.n	80055f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d06e      	beq.n	80056d8 <pvPortMalloc+0x150>
 80055fa:	4b45      	ldr	r3, [pc, #276]	; (8005710 <pvPortMalloc+0x188>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d869      	bhi.n	80056d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005604:	4b43      	ldr	r3, [pc, #268]	; (8005714 <pvPortMalloc+0x18c>)
 8005606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005608:	4b42      	ldr	r3, [pc, #264]	; (8005714 <pvPortMalloc+0x18c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800560e:	e004      	b.n	800561a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d903      	bls.n	800562c <pvPortMalloc+0xa4>
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f1      	bne.n	8005610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800562c:	4b36      	ldr	r3, [pc, #216]	; (8005708 <pvPortMalloc+0x180>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005632:	429a      	cmp	r2, r3
 8005634:	d050      	beq.n	80056d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2208      	movs	r2, #8
 800563c:	4413      	add	r3, r2
 800563e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	1ad2      	subs	r2, r2, r3
 8005650:	2308      	movs	r3, #8
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	429a      	cmp	r2, r3
 8005656:	d91f      	bls.n	8005698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <pvPortMalloc+0xf8>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	613b      	str	r3, [r7, #16]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	1ad2      	subs	r2, r2, r3
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005692:	69b8      	ldr	r0, [r7, #24]
 8005694:	f000 f908 	bl	80058a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005698:	4b1d      	ldr	r3, [pc, #116]	; (8005710 <pvPortMalloc+0x188>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <pvPortMalloc+0x188>)
 80056a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056a6:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <pvPortMalloc+0x188>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <pvPortMalloc+0x190>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d203      	bcs.n	80056ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056b2:	4b17      	ldr	r3, [pc, #92]	; (8005710 <pvPortMalloc+0x188>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a18      	ldr	r2, [pc, #96]	; (8005718 <pvPortMalloc+0x190>)
 80056b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	4b13      	ldr	r3, [pc, #76]	; (800570c <pvPortMalloc+0x184>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056ce:	4b13      	ldr	r3, [pc, #76]	; (800571c <pvPortMalloc+0x194>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3301      	adds	r3, #1
 80056d4:	4a11      	ldr	r2, [pc, #68]	; (800571c <pvPortMalloc+0x194>)
 80056d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056d8:	f001 fb9c 	bl	8006e14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <pvPortMalloc+0x174>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	60fb      	str	r3, [r7, #12]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <pvPortMalloc+0x172>
	return pvReturn;
 80056fc:	69fb      	ldr	r3, [r7, #28]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3728      	adds	r7, #40	; 0x28
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	24004574 	.word	0x24004574
 800570c:	24004588 	.word	0x24004588
 8005710:	24004578 	.word	0x24004578
 8005714:	2400456c 	.word	0x2400456c
 8005718:	2400457c 	.word	0x2400457c
 800571c:	24004580 	.word	0x24004580

08005720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04d      	beq.n	80057ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005732:	2308      	movs	r3, #8
 8005734:	425b      	negs	r3, r3
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4413      	add	r3, r2
 800573a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	4b24      	ldr	r3, [pc, #144]	; (80057d8 <vPortFree+0xb8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4013      	ands	r3, r2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <vPortFree+0x44>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	60fb      	str	r3, [r7, #12]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <vPortFree+0x62>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	60bb      	str	r3, [r7, #8]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <vPortFree+0xb8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01e      	beq.n	80057ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d11a      	bne.n	80057ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <vPortFree+0xb8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057a8:	f001 fb26 	bl	8006df8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <vPortFree+0xbc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4413      	add	r3, r2
 80057b6:	4a09      	ldr	r2, [pc, #36]	; (80057dc <vPortFree+0xbc>)
 80057b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ba:	6938      	ldr	r0, [r7, #16]
 80057bc:	f000 f874 	bl	80058a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <vPortFree+0xc0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	4a06      	ldr	r2, [pc, #24]	; (80057e0 <vPortFree+0xc0>)
 80057c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057ca:	f001 fb23 	bl	8006e14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057ce:	bf00      	nop
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	24004588 	.word	0x24004588
 80057dc:	24004578 	.word	0x24004578
 80057e0:	24004584 	.word	0x24004584

080057e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80057ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057f0:	4b27      	ldr	r3, [pc, #156]	; (8005890 <prvHeapInit+0xac>)
 80057f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00c      	beq.n	8005818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3307      	adds	r3, #7
 8005802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0307 	bic.w	r3, r3, #7
 800580a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <prvHeapInit+0xac>)
 8005814:	4413      	add	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800581c:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <prvHeapInit+0xb0>)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005822:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <prvHeapInit+0xb0>)
 8005824:	2200      	movs	r2, #0
 8005826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	4413      	add	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005830:	2208      	movs	r2, #8
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0307 	bic.w	r3, r3, #7
 800583e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a15      	ldr	r2, [pc, #84]	; (8005898 <prvHeapInit+0xb4>)
 8005844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005846:	4b14      	ldr	r3, [pc, #80]	; (8005898 <prvHeapInit+0xb4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800584e:	4b12      	ldr	r3, [pc, #72]	; (8005898 <prvHeapInit+0xb4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	1ad2      	subs	r2, r2, r3
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005864:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <prvHeapInit+0xb4>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4a0a      	ldr	r2, [pc, #40]	; (800589c <prvHeapInit+0xb8>)
 8005872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <prvHeapInit+0xbc>)
 800587a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800587c:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <prvHeapInit+0xc0>)
 800587e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005882:	601a      	str	r2, [r3, #0]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	2400096c 	.word	0x2400096c
 8005894:	2400456c 	.word	0x2400456c
 8005898:	24004574 	.word	0x24004574
 800589c:	2400457c 	.word	0x2400457c
 80058a0:	24004578 	.word	0x24004578
 80058a4:	24004588 	.word	0x24004588

080058a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058b0:	4b28      	ldr	r3, [pc, #160]	; (8005954 <prvInsertBlockIntoFreeList+0xac>)
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	e002      	b.n	80058bc <prvInsertBlockIntoFreeList+0x14>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d8f7      	bhi.n	80058b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4413      	add	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d108      	bne.n	80058ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	441a      	add	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	441a      	add	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d118      	bne.n	8005930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b15      	ldr	r3, [pc, #84]	; (8005958 <prvInsertBlockIntoFreeList+0xb0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d00d      	beq.n	8005926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	441a      	add	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e008      	b.n	8005938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005926:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <prvInsertBlockIntoFreeList+0xb0>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	e003      	b.n	8005938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	d002      	beq.n	8005946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	2400456c 	.word	0x2400456c
 8005958:	24004574 	.word	0x24004574

0800595c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f103 0208 	add.w	r2, r3, #8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f04f 32ff 	mov.w	r2, #4294967295
 8005974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f103 0208 	add.w	r2, r3, #8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f103 0208 	add.w	r2, r3, #8
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]
}
 80059f2:	bf00      	nop
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d103      	bne.n	8005a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e00c      	b.n	8005a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3308      	adds	r3, #8
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e002      	b.n	8005a2c <vListInsert+0x2e>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d2f6      	bcs.n	8005a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	bf00      	nop
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6892      	ldr	r2, [r2, #8]
 8005a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6852      	ldr	r2, [r2, #4]
 8005a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d103      	bne.n	8005aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	1e5a      	subs	r2, r3, #1
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3b04      	subs	r3, #4
 8005ad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3b04      	subs	r3, #4
 8005ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f023 0201 	bic.w	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3b04      	subs	r3, #4
 8005af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005af4:	4a0c      	ldr	r2, [pc, #48]	; (8005b28 <pxPortInitialiseStack+0x64>)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b14      	subs	r3, #20
 8005afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3b04      	subs	r3, #4
 8005b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f06f 0202 	mvn.w	r2, #2
 8005b12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3b20      	subs	r3, #32
 8005b18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	08005b2d 	.word	0x08005b2d

08005b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <prvTaskExitError+0x54>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3e:	d00a      	beq.n	8005b56 <prvTaskExitError+0x2a>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <prvTaskExitError+0x28>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	60bb      	str	r3, [r7, #8]
}
 8005b68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b6a:	bf00      	nop
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0fc      	beq.n	8005b6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	24000010 	.word	0x24000010
	...

08005b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <pxCurrentTCBConst2>)
 8005b92:	6819      	ldr	r1, [r3, #0]
 8005b94:	6808      	ldr	r0, [r1, #0]
 8005b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	f380 8809 	msr	PSP, r0
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f04f 0000 	mov.w	r0, #0
 8005ba6:	f380 8811 	msr	BASEPRI, r0
 8005baa:	4770      	bx	lr
 8005bac:	f3af 8000 	nop.w

08005bb0 <pxCurrentTCBConst2>:
 8005bb0:	240045d4 	.word	0x240045d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop

08005bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bb8:	4808      	ldr	r0, [pc, #32]	; (8005bdc <prvPortStartFirstTask+0x24>)
 8005bba:	6800      	ldr	r0, [r0, #0]
 8005bbc:	6800      	ldr	r0, [r0, #0]
 8005bbe:	f380 8808 	msr	MSP, r0
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f380 8814 	msr	CONTROL, r0
 8005bca:	b662      	cpsie	i
 8005bcc:	b661      	cpsie	f
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	df00      	svc	0
 8005bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bda:	bf00      	nop
 8005bdc:	e000ed08 	.word	0xe000ed08

08005be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005be6:	4b46      	ldr	r3, [pc, #280]	; (8005d00 <xPortStartScheduler+0x120>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a46      	ldr	r2, [pc, #280]	; (8005d04 <xPortStartScheduler+0x124>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10a      	bne.n	8005c06 <xPortStartScheduler+0x26>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	613b      	str	r3, [r7, #16]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c06:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <xPortStartScheduler+0x120>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3f      	ldr	r2, [pc, #252]	; (8005d08 <xPortStartScheduler+0x128>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10a      	bne.n	8005c26 <xPortStartScheduler+0x46>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c26:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <xPortStartScheduler+0x12c>)
 8005c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <xPortStartScheduler+0x130>)
 8005c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c50:	2207      	movs	r2, #7
 8005c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c54:	e009      	b.n	8005c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c56:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d0ef      	beq.n	8005c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c76:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1c3 0307 	rsb	r3, r3, #7
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d00a      	beq.n	8005c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60bb      	str	r3, [r7, #8]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <xPortStartScheduler+0x134>)
 8005ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <xPortStartScheduler+0x134>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005caa:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <xPortStartScheduler+0x134>)
 8005cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cce:	f000 f8dd 	bl	8005e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <xPortStartScheduler+0x13c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cd8:	f000 f8fc 	bl	8005ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cdc:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <xPortStartScheduler+0x140>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <xPortStartScheduler+0x140>)
 8005ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ce8:	f7ff ff66 	bl	8005bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cec:	f001 f9fa 	bl	80070e4 <vTaskSwitchContext>
	prvTaskExitError();
 8005cf0:	f7ff ff1c 	bl	8005b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	e000ed00 	.word	0xe000ed00
 8005d04:	410fc271 	.word	0x410fc271
 8005d08:	410fc270 	.word	0x410fc270
 8005d0c:	e000e400 	.word	0xe000e400
 8005d10:	2400458c 	.word	0x2400458c
 8005d14:	24004590 	.word	0x24004590
 8005d18:	e000ed20 	.word	0xe000ed20
 8005d1c:	24000010 	.word	0x24000010
 8005d20:	e000ef34 	.word	0xe000ef34

08005d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	607b      	str	r3, [r7, #4]
}
 8005d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10f      	bne.n	8005d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <vPortEnterCritical+0x5c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	603b      	str	r3, [r7, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <vPortEnterCritical+0x4a>
	}
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	24000010 	.word	0x24000010
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <vPortExitCritical+0x50>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <vPortExitCritical+0x24>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	607b      	str	r3, [r7, #4]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <vPortExitCritical+0x50>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <vPortExitCritical+0x50>)
 8005db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <vPortExitCritical+0x50>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <vPortExitCritical+0x42>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	24000010 	.word	0x24000010
	...

08005de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005de0:	f3ef 8009 	mrs	r0, PSP
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <pxCurrentTCBConst>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	f01e 0f10 	tst.w	lr, #16
 8005df0:	bf08      	it	eq
 8005df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	6010      	str	r0, [r2, #0]
 8005dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e04:	f380 8811 	msr	BASEPRI, r0
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f001 f968 	bl	80070e4 <vTaskSwitchContext>
 8005e14:	f04f 0000 	mov.w	r0, #0
 8005e18:	f380 8811 	msr	BASEPRI, r0
 8005e1c:	bc09      	pop	{r0, r3}
 8005e1e:	6819      	ldr	r1, [r3, #0]
 8005e20:	6808      	ldr	r0, [r1, #0]
 8005e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e26:	f01e 0f10 	tst.w	lr, #16
 8005e2a:	bf08      	it	eq
 8005e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e30:	f380 8809 	msr	PSP, r0
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst>:
 8005e40:	240045d4 	.word	0x240045d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e62:	f001 f885 	bl	8006f70 <xTaskIncrementTick>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <xPortSysTickHandler+0x40>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f383 8811 	msr	BASEPRI, r3
}
 8005e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <vPortSetupTimerInterrupt+0x34>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <vPortSetupTimerInterrupt+0x38>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <vPortSetupTimerInterrupt+0x3c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <vPortSetupTimerInterrupt+0x40>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	099b      	lsrs	r3, r3, #6
 8005ea8:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <vPortSetupTimerInterrupt+0x44>)
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eae:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <vPortSetupTimerInterrupt+0x34>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	601a      	str	r2, [r3, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	e000e010 	.word	0xe000e010
 8005ec4:	e000e018 	.word	0xe000e018
 8005ec8:	24000000 	.word	0x24000000
 8005ecc:	10624dd3 	.word	0x10624dd3
 8005ed0:	e000e014 	.word	0xe000e014

08005ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ee4 <vPortEnableVFP+0x10>
 8005ed8:	6801      	ldr	r1, [r0, #0]
 8005eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ede:	6001      	str	r1, [r0, #0]
 8005ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ee2:	bf00      	nop
 8005ee4:	e000ed88 	.word	0xe000ed88

08005ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005eee:	f3ef 8305 	mrs	r3, IPSR
 8005ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b0f      	cmp	r3, #15
 8005ef8:	d914      	bls.n	8005f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <vPortValidateInterruptPriority+0x70>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <vPortValidateInterruptPriority+0x74>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	7afa      	ldrb	r2, [r7, #11]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d20a      	bcs.n	8005f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <vPortValidateInterruptPriority+0x78>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <vPortValidateInterruptPriority+0x7c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d90a      	bls.n	8005f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	603b      	str	r3, [r7, #0]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <vPortValidateInterruptPriority+0x60>
	}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	e000e3f0 	.word	0xe000e3f0
 8005f5c:	2400458c 	.word	0x2400458c
 8005f60:	e000ed0c 	.word	0xe000ed0c
 8005f64:	24004590 	.word	0x24004590

08005f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <xQueueGenericReset+0x2a>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	60bb      	str	r3, [r7, #8]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f92:	f7ff fec7 	bl	8005d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	441a      	add	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	22ff      	movs	r2, #255	; 0xff
 8005fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d114      	bne.n	8006012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01a      	beq.n	8006026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3310      	adds	r3, #16
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f929 	bl	800724c <xTaskRemoveFromEventList>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006000:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <xQueueGenericReset+0xcc>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	e009      	b.n	8006026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3310      	adds	r3, #16
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fca0 	bl	800595c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3324      	adds	r3, #36	; 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fc9b 	bl	800595c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006026:	f7ff fead 	bl	8005d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800602a:	2301      	movs	r3, #1
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08e      	sub	sp, #56	; 0x38
 800603c:	af02      	add	r7, sp, #8
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <xQueueGenericCreateStatic+0x52>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <xQueueGenericCreateStatic+0x56>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <xQueueGenericCreateStatic+0x58>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	623b      	str	r3, [r7, #32]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <xQueueGenericCreateStatic+0x7e>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <xQueueGenericCreateStatic+0x82>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericCreateStatic+0x84>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61fb      	str	r3, [r7, #28]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060d6:	2350      	movs	r3, #80	; 0x50
 80060d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b50      	cmp	r3, #80	; 0x50
 80060de:	d00a      	beq.n	80060f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	61bb      	str	r3, [r7, #24]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800610a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	4613      	mov	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f805 	bl	8006128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006120:	4618      	mov	r0, r3
 8006122:	3730      	adds	r7, #48	; 0x30
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e002      	b.n	800614a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006156:	2101      	movs	r1, #1
 8006158:	69b8      	ldr	r0, [r7, #24]
 800615a:	f7ff ff05 	bl	8005f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800617e:	2300      	movs	r3, #0
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <xQueueGenericSend+0x32>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <xQueueGenericSend+0x40>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <xQueueGenericSend+0x44>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <xQueueGenericSend+0x46>
 80061b4:	2300      	movs	r3, #0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <xQueueGenericSend+0x60>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d103      	bne.n	80061de <xQueueGenericSend+0x6e>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <xQueueGenericSend+0x72>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xQueueGenericSend+0x74>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericSend+0x8e>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	623b      	str	r3, [r7, #32]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061fe:	f001 f9e7 	bl	80075d0 <xTaskGetSchedulerState>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <xQueueGenericSend+0x9e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <xQueueGenericSend+0xa2>
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <xQueueGenericSend+0xa4>
 8006212:	2300      	movs	r3, #0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <xQueueGenericSend+0xbe>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	61fb      	str	r3, [r7, #28]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800622e:	f7ff fd79 	bl	8005d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	429a      	cmp	r2, r3
 800623c:	d302      	bcc.n	8006244 <xQueueGenericSend+0xd4>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d129      	bne.n	8006298 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800624a:	f000 fa0b 	bl	8006664 <prvCopyDataToQueue>
 800624e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d010      	beq.n	800627a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	3324      	adds	r3, #36	; 0x24
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fff5 	bl	800724c <xTaskRemoveFromEventList>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d013      	beq.n	8006290 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006268:	4b3f      	ldr	r3, [pc, #252]	; (8006368 <xQueueGenericSend+0x1f8>)
 800626a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	e00a      	b.n	8006290 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006280:	4b39      	ldr	r3, [pc, #228]	; (8006368 <xQueueGenericSend+0x1f8>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006290:	f7ff fd78 	bl	8005d84 <vPortExitCritical>
				return pdPASS;
 8006294:	2301      	movs	r3, #1
 8006296:	e063      	b.n	8006360 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800629e:	f7ff fd71 	bl	8005d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e05c      	b.n	8006360 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062ac:	f107 0314 	add.w	r3, r7, #20
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f82f 	bl	8007314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062b6:	2301      	movs	r3, #1
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ba:	f7ff fd63 	bl	8005d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062be:	f000 fd9b 	bl	8006df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062c2:	f7ff fd2f 	bl	8005d24 <vPortEnterCritical>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d103      	bne.n	80062dc <xQueueGenericSend+0x16c>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d103      	bne.n	80062f2 <xQueueGenericSend+0x182>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f2:	f7ff fd47 	bl	8005d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062f6:	1d3a      	adds	r2, r7, #4
 80062f8:	f107 0314 	add.w	r3, r7, #20
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 f81e 	bl	8007340 <xTaskCheckForTimeOut>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d124      	bne.n	8006354 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800630a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800630c:	f000 faa2 	bl	8006854 <prvIsQueueFull>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d018      	beq.n	8006348 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	3310      	adds	r3, #16
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f000 ff44 	bl	80071ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006326:	f000 fa2d 	bl	8006784 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800632a:	f000 fd73 	bl	8006e14 <xTaskResumeAll>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	f47f af7c 	bne.w	800622e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <xQueueGenericSend+0x1f8>)
 8006338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	e772      	b.n	800622e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634a:	f000 fa1b 	bl	8006784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800634e:	f000 fd61 	bl	8006e14 <xTaskResumeAll>
 8006352:	e76c      	b.n	800622e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006356:	f000 fa15 	bl	8006784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800635a:	f000 fd5b 	bl	8006e14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800635e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006360:	4618      	mov	r0, r3
 8006362:	3738      	adds	r7, #56	; 0x38
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b090      	sub	sp, #64	; 0x40
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d103      	bne.n	80063a8 <xQueueGenericSendFromISR+0x3c>
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <xQueueGenericSendFromISR+0x40>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <xQueueGenericSendFromISR+0x42>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d103      	bne.n	80063d6 <xQueueGenericSendFromISR+0x6a>
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <xQueueGenericSendFromISR+0x6e>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <xQueueGenericSendFromISR+0x70>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	623b      	str	r3, [r7, #32]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063f6:	f7ff fd77 	bl	8005ee8 <vPortValidateInterruptPriority>
	__asm volatile
 80063fa:	f3ef 8211 	mrs	r2, BASEPRI
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	61fa      	str	r2, [r7, #28]
 8006410:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006412:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641e:	429a      	cmp	r2, r3
 8006420:	d302      	bcc.n	8006428 <xQueueGenericSendFromISR+0xbc>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d12f      	bne.n	8006488 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800642e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800643e:	f000 f911 	bl	8006664 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006442:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d112      	bne.n	8006472 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	d016      	beq.n	8006482 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	3324      	adds	r3, #36	; 0x24
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fef7 	bl	800724c <xTaskRemoveFromEventList>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00e      	beq.n	8006482 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e007      	b.n	8006482 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006476:	3301      	adds	r3, #1
 8006478:	b2db      	uxtb	r3, r3
 800647a:	b25a      	sxtb	r2, r3
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006482:	2301      	movs	r3, #1
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006486:	e001      	b.n	800648c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006488:	2300      	movs	r3, #0
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f383 8811 	msr	BASEPRI, r3
}
 8006496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800649a:	4618      	mov	r0, r3
 800649c:	3740      	adds	r7, #64	; 0x40
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08c      	sub	sp, #48	; 0x30
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064b0:	2300      	movs	r3, #0
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <xQueueReceive+0x30>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	623b      	str	r3, [r7, #32]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d103      	bne.n	80064e2 <xQueueReceive+0x3e>
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <xQueueReceive+0x42>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <xQueueReceive+0x44>
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xQueueReceive+0x5e>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	61fb      	str	r3, [r7, #28]
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006502:	f001 f865 	bl	80075d0 <xTaskGetSchedulerState>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <xQueueReceive+0x6e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <xQueueReceive+0x72>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <xQueueReceive+0x74>
 8006516:	2300      	movs	r3, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xQueueReceive+0x8e>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	61bb      	str	r3, [r7, #24]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006532:	f7ff fbf7 	bl	8005d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01f      	beq.n	8006582 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006546:	f000 f8f7 	bl	8006738 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	1e5a      	subs	r2, r3, #1
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	3310      	adds	r3, #16
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fe74 	bl	800724c <xTaskRemoveFromEventList>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800656a:	4b3d      	ldr	r3, [pc, #244]	; (8006660 <xQueueReceive+0x1bc>)
 800656c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800657a:	f7ff fc03 	bl	8005d84 <vPortExitCritical>
				return pdPASS;
 800657e:	2301      	movs	r3, #1
 8006580:	e069      	b.n	8006656 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006588:	f7ff fbfc 	bl	8005d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800658c:	2300      	movs	r3, #0
 800658e:	e062      	b.n	8006656 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006596:	f107 0310 	add.w	r3, r7, #16
 800659a:	4618      	mov	r0, r3
 800659c:	f000 feba 	bl	8007314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065a0:	2301      	movs	r3, #1
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065a4:	f7ff fbee 	bl	8005d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065a8:	f000 fc26 	bl	8006df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ac:	f7ff fbba 	bl	8005d24 <vPortEnterCritical>
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b6:	b25b      	sxtb	r3, r3
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d103      	bne.n	80065c6 <xQueueReceive+0x122>
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065cc:	b25b      	sxtb	r3, r3
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	d103      	bne.n	80065dc <xQueueReceive+0x138>
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065dc:	f7ff fbd2 	bl	8005d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065e0:	1d3a      	adds	r2, r7, #4
 80065e2:	f107 0310 	add.w	r3, r7, #16
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fea9 	bl	8007340 <xTaskCheckForTimeOut>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d123      	bne.n	800663c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f6:	f000 f917 	bl	8006828 <prvIsQueueEmpty>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d017      	beq.n	8006630 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	3324      	adds	r3, #36	; 0x24
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	4611      	mov	r1, r2
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fdcf 	bl	80071ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800660e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006610:	f000 f8b8 	bl	8006784 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006614:	f000 fbfe 	bl	8006e14 <xTaskResumeAll>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d189      	bne.n	8006532 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <xQueueReceive+0x1bc>)
 8006620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	e780      	b.n	8006532 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006632:	f000 f8a7 	bl	8006784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006636:	f000 fbed 	bl	8006e14 <xTaskResumeAll>
 800663a:	e77a      	b.n	8006532 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800663c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663e:	f000 f8a1 	bl	8006784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006642:	f000 fbe7 	bl	8006e14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006648:	f000 f8ee 	bl	8006828 <prvIsQueueEmpty>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	f43f af6f 	beq.w	8006532 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006656:	4618      	mov	r0, r3
 8006658:	3730      	adds	r7, #48	; 0x30
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10d      	bne.n	800669e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d14d      	bne.n	8006726 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 ffbc 	bl	800760c <xTaskPriorityDisinherit>
 8006694:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	e043      	b.n	8006726 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d119      	bne.n	80066d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6858      	ldr	r0, [r3, #4]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	461a      	mov	r2, r3
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	f001 fbe2 	bl	8007e78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	441a      	add	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d32b      	bcc.n	8006726 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	e026      	b.n	8006726 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68d8      	ldr	r0, [r3, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	461a      	mov	r2, r3
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	f001 fbc8 	bl	8007e78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	425b      	negs	r3, r3
 80066f2:	441a      	add	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d207      	bcs.n	8006714 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	425b      	negs	r3, r3
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d105      	bne.n	8006726 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	3b01      	subs	r3, #1
 8006724:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800672e:	697b      	ldr	r3, [r7, #20]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d018      	beq.n	800677c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	441a      	add	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	429a      	cmp	r2, r3
 8006762:	d303      	bcc.n	800676c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68d9      	ldr	r1, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	461a      	mov	r2, r3
 8006776:	6838      	ldr	r0, [r7, #0]
 8006778:	f001 fb7e 	bl	8007e78 <memcpy>
	}
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800678c:	f7ff faca 	bl	8005d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006796:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006798:	e011      	b.n	80067be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d012      	beq.n	80067c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3324      	adds	r3, #36	; 0x24
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fd50 	bl	800724c <xTaskRemoveFromEventList>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067b2:	f000 fe27 	bl	8007404 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dce9      	bgt.n	800679a <prvUnlockQueue+0x16>
 80067c6:	e000      	b.n	80067ca <prvUnlockQueue+0x46>
					break;
 80067c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	22ff      	movs	r2, #255	; 0xff
 80067ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067d2:	f7ff fad7 	bl	8005d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067d6:	f7ff faa5 	bl	8005d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067e2:	e011      	b.n	8006808 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d012      	beq.n	8006812 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3310      	adds	r3, #16
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fd2b 	bl	800724c <xTaskRemoveFromEventList>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067fc:	f000 fe02 	bl	8007404 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	3b01      	subs	r3, #1
 8006804:	b2db      	uxtb	r3, r3
 8006806:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800680c:	2b00      	cmp	r3, #0
 800680e:	dce9      	bgt.n	80067e4 <prvUnlockQueue+0x60>
 8006810:	e000      	b.n	8006814 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006812:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	22ff      	movs	r2, #255	; 0xff
 8006818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800681c:	f7ff fab2 	bl	8005d84 <vPortExitCritical>
}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006830:	f7ff fa78 	bl	8005d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	2b00      	cmp	r3, #0
 800683a:	d102      	bne.n	8006842 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e001      	b.n	8006846 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006846:	f7ff fa9d 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800685c:	f7ff fa62 	bl	8005d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006868:	429a      	cmp	r2, r3
 800686a:	d102      	bne.n	8006872 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e001      	b.n	8006876 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006876:	f7ff fa85 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 800687a:	68fb      	ldr	r3, [r7, #12]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e014      	b.n	80068be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006894:	4a0f      	ldr	r2, [pc, #60]	; (80068d4 <vQueueAddToRegistry+0x50>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10b      	bne.n	80068b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068a0:	490c      	ldr	r1, [pc, #48]	; (80068d4 <vQueueAddToRegistry+0x50>)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068aa:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <vQueueAddToRegistry+0x50>)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068b6:	e006      	b.n	80068c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b07      	cmp	r3, #7
 80068c2:	d9e7      	bls.n	8006894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	24004594 	.word	0x24004594

080068d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068e8:	f7ff fa1c 	bl	8005d24 <vPortEnterCritical>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068f2:	b25b      	sxtb	r3, r3
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f8:	d103      	bne.n	8006902 <vQueueWaitForMessageRestricted+0x2a>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006908:	b25b      	sxtb	r3, r3
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690e:	d103      	bne.n	8006918 <vQueueWaitForMessageRestricted+0x40>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006918:	f7ff fa34 	bl	8005d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	3324      	adds	r3, #36	; 0x24
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fc61 	bl	80071f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006932:	6978      	ldr	r0, [r7, #20]
 8006934:	f7ff ff26 	bl	8006784 <prvUnlockQueue>
	}
 8006938:	bf00      	nop
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08e      	sub	sp, #56	; 0x38
 8006944:	af04      	add	r7, sp, #16
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	623b      	str	r3, [r7, #32]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xTaskCreateStatic+0x46>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	61fb      	str	r3, [r7, #28]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006986:	23bc      	movs	r3, #188	; 0xbc
 8006988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2bbc      	cmp	r3, #188	; 0xbc
 800698e:	d00a      	beq.n	80069a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61bb      	str	r3, [r7, #24]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01e      	beq.n	80069ec <xTaskCreateStatic+0xac>
 80069ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01b      	beq.n	80069ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069c6:	2300      	movs	r3, #0
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	9302      	str	r3, [sp, #8]
 80069ce:	f107 0314 	add.w	r3, r7, #20
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f850 	bl	8006a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069e6:	f000 f8f3 	bl	8006bd0 <prvAddNewTaskToReadyList>
 80069ea:	e001      	b.n	80069f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069f0:	697b      	ldr	r3, [r7, #20]
	}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3728      	adds	r7, #40	; 0x28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b08c      	sub	sp, #48	; 0x30
 80069fe:	af04      	add	r7, sp, #16
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	603b      	str	r3, [r7, #0]
 8006a06:	4613      	mov	r3, r2
 8006a08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fdba 	bl	8005588 <pvPortMalloc>
 8006a14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00e      	beq.n	8006a3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a1c:	20bc      	movs	r0, #188	; 0xbc
 8006a1e:	f7fe fdb3 	bl	8005588 <pvPortMalloc>
 8006a22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a30:	e005      	b.n	8006a3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	f7fe fe74 	bl	8005720 <vPortFree>
 8006a38:	e001      	b.n	8006a3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d017      	beq.n	8006a74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a4c:	88fa      	ldrh	r2, [r7, #6]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9303      	str	r3, [sp, #12]
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	9302      	str	r3, [sp, #8]
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f80e 	bl	8006a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a68:	69f8      	ldr	r0, [r7, #28]
 8006a6a:	f000 f8b1 	bl	8006bd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e002      	b.n	8006a7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	21a5      	movs	r1, #165	; 0xa5
 8006a9e:	f001 f9f9 	bl	8007e94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006aac:	440b      	add	r3, r1
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	617b      	str	r3, [r7, #20]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01f      	beq.n	8006b22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	e012      	b.n	8006b0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	7819      	ldrb	r1, [r3, #0]
 8006af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	3334      	adds	r3, #52	; 0x34
 8006af8:	460a      	mov	r2, r1
 8006afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b0f      	cmp	r3, #15
 8006b12:	d9e9      	bls.n	8006ae8 <prvInitialiseNewTask+0x64>
 8006b14:	e000      	b.n	8006b18 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b20:	e003      	b.n	8006b2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	2b37      	cmp	r3, #55	; 0x37
 8006b2e:	d901      	bls.n	8006b34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b30:	2337      	movs	r3, #55	; 0x37
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2200      	movs	r2, #0
 8006b44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe ff26 	bl	800599c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	3318      	adds	r3, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe ff21 	bl	800599c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	3354      	adds	r3, #84	; 0x54
 8006b84:	2260      	movs	r2, #96	; 0x60
 8006b86:	2100      	movs	r1, #0
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 f983 	bl	8007e94 <memset>
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	4a0c      	ldr	r2, [pc, #48]	; (8006bc4 <prvInitialiseNewTask+0x140>)
 8006b92:	659a      	str	r2, [r3, #88]	; 0x58
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	4a0c      	ldr	r2, [pc, #48]	; (8006bc8 <prvInitialiseNewTask+0x144>)
 8006b98:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	; (8006bcc <prvInitialiseNewTask+0x148>)
 8006b9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	69b8      	ldr	r0, [r7, #24]
 8006ba6:	f7fe ff8d 	bl	8005ac4 <pxPortInitialiseStack>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bbc:	bf00      	nop
 8006bbe:	3720      	adds	r7, #32
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	08008114 	.word	0x08008114
 8006bc8:	08008134 	.word	0x08008134
 8006bcc:	080080f4 	.word	0x080080f4

08006bd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bd8:	f7ff f8a4 	bl	8005d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bdc:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <prvAddNewTaskToReadyList+0xc4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <prvAddNewTaskToReadyList+0xc4>)
 8006be4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006be6:	4b2c      	ldr	r3, [pc, #176]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bee:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bf4:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <prvAddNewTaskToReadyList+0xc4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d110      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bfc:	f000 fc26 	bl	800744c <prvInitialiseTaskLists>
 8006c00:	e00d      	b.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c02:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <prvAddNewTaskToReadyList+0xcc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c0a:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d802      	bhi.n	8006c1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c18:	4a1f      	ldr	r2, [pc, #124]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c1e:	4b20      	ldr	r3, [pc, #128]	; (8006ca0 <prvAddNewTaskToReadyList+0xd0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	4a1e      	ldr	r2, [pc, #120]	; (8006ca0 <prvAddNewTaskToReadyList+0xd0>)
 8006c26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <prvAddNewTaskToReadyList+0xd0>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c34:	4b1b      	ldr	r3, [pc, #108]	; (8006ca4 <prvAddNewTaskToReadyList+0xd4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d903      	bls.n	8006c44 <prvAddNewTaskToReadyList+0x74>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	4a18      	ldr	r2, [pc, #96]	; (8006ca4 <prvAddNewTaskToReadyList+0xd4>)
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <prvAddNewTaskToReadyList+0xd8>)
 8006c52:	441a      	add	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f7fe feab 	bl	80059b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c60:	f7ff f890 	bl	8005d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c64:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <prvAddNewTaskToReadyList+0xcc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00e      	beq.n	8006c8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <prvAddNewTaskToReadyList+0xc8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d207      	bcs.n	8006c8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <prvAddNewTaskToReadyList+0xdc>)
 8006c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	24004aa8 	.word	0x24004aa8
 8006c98:	240045d4 	.word	0x240045d4
 8006c9c:	24004ab4 	.word	0x24004ab4
 8006ca0:	24004ac4 	.word	0x24004ac4
 8006ca4:	24004ab0 	.word	0x24004ab0
 8006ca8:	240045d8 	.word	0x240045d8
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d017      	beq.n	8006cf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <vTaskDelay+0x60>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <vTaskDelay+0x30>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	60bb      	str	r3, [r7, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ce0:	f000 f88a 	bl	8006df8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fcfe 	bl	80076e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cec:	f000 f892 	bl	8006e14 <xTaskResumeAll>
 8006cf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d107      	bne.n	8006d08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <vTaskDelay+0x64>)
 8006cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	24004ad0 	.word	0x24004ad0
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d26:	463a      	mov	r2, r7
 8006d28:	1d39      	adds	r1, r7, #4
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe fbf6 	bl	8005520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	9202      	str	r2, [sp, #8]
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	2300      	movs	r3, #0
 8006d44:	460a      	mov	r2, r1
 8006d46:	4924      	ldr	r1, [pc, #144]	; (8006dd8 <vTaskStartScheduler+0xc0>)
 8006d48:	4824      	ldr	r0, [pc, #144]	; (8006ddc <vTaskStartScheduler+0xc4>)
 8006d4a:	f7ff fdf9 	bl	8006940 <xTaskCreateStatic>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4a23      	ldr	r2, [pc, #140]	; (8006de0 <vTaskStartScheduler+0xc8>)
 8006d52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d54:	4b22      	ldr	r3, [pc, #136]	; (8006de0 <vTaskStartScheduler+0xc8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e001      	b.n	8006d66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d102      	bne.n	8006d72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d6c:	f000 fd10 	bl	8007790 <xTimerCreateTimerTask>
 8006d70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d11b      	bne.n	8006db0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	613b      	str	r3, [r7, #16]
}
 8006d8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d8c:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <vTaskStartScheduler+0xcc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3354      	adds	r3, #84	; 0x54
 8006d92:	4a15      	ldr	r2, [pc, #84]	; (8006de8 <vTaskStartScheduler+0xd0>)
 8006d94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d96:	4b15      	ldr	r3, [pc, #84]	; (8006dec <vTaskStartScheduler+0xd4>)
 8006d98:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d9e:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <vTaskStartScheduler+0xd8>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006da4:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <vTaskStartScheduler+0xdc>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006daa:	f7fe ff19 	bl	8005be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dae:	e00e      	b.n	8006dce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db6:	d10a      	bne.n	8006dce <vTaskStartScheduler+0xb6>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	60fb      	str	r3, [r7, #12]
}
 8006dca:	bf00      	nop
 8006dcc:	e7fe      	b.n	8006dcc <vTaskStartScheduler+0xb4>
}
 8006dce:	bf00      	nop
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	08008098 	.word	0x08008098
 8006ddc:	0800741d 	.word	0x0800741d
 8006de0:	24004acc 	.word	0x24004acc
 8006de4:	240045d4 	.word	0x240045d4
 8006de8:	24000014 	.word	0x24000014
 8006dec:	24004ac8 	.word	0x24004ac8
 8006df0:	24004ab4 	.word	0x24004ab4
 8006df4:	24004aac 	.word	0x24004aac

08006df8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <vTaskSuspendAll+0x18>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	4a03      	ldr	r2, [pc, #12]	; (8006e10 <vTaskSuspendAll+0x18>)
 8006e04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e06:	bf00      	nop
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	24004ad0 	.word	0x24004ad0

08006e14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e22:	4b42      	ldr	r3, [pc, #264]	; (8006f2c <xTaskResumeAll+0x118>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	603b      	str	r3, [r7, #0]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e40:	f7fe ff70 	bl	8005d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e44:	4b39      	ldr	r3, [pc, #228]	; (8006f2c <xTaskResumeAll+0x118>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	4a38      	ldr	r2, [pc, #224]	; (8006f2c <xTaskResumeAll+0x118>)
 8006e4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e4e:	4b37      	ldr	r3, [pc, #220]	; (8006f2c <xTaskResumeAll+0x118>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d162      	bne.n	8006f1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e56:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <xTaskResumeAll+0x11c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d05e      	beq.n	8006f1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e5e:	e02f      	b.n	8006ec0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e60:	4b34      	ldr	r3, [pc, #208]	; (8006f34 <xTaskResumeAll+0x120>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3318      	adds	r3, #24
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe fdff 	bl	8005a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe fdfa 	bl	8005a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e80:	4b2d      	ldr	r3, [pc, #180]	; (8006f38 <xTaskResumeAll+0x124>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d903      	bls.n	8006e90 <xTaskResumeAll+0x7c>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	4a2a      	ldr	r2, [pc, #168]	; (8006f38 <xTaskResumeAll+0x124>)
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4a27      	ldr	r2, [pc, #156]	; (8006f3c <xTaskResumeAll+0x128>)
 8006e9e:	441a      	add	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f7fe fd85 	bl	80059b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	4b23      	ldr	r3, [pc, #140]	; (8006f40 <xTaskResumeAll+0x12c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d302      	bcc.n	8006ec0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006eba:	4b22      	ldr	r3, [pc, #136]	; (8006f44 <xTaskResumeAll+0x130>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ec0:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <xTaskResumeAll+0x120>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1cb      	bne.n	8006e60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ece:	f000 fb5f 	bl	8007590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ed2:	4b1d      	ldr	r3, [pc, #116]	; (8006f48 <xTaskResumeAll+0x134>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d010      	beq.n	8006f00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ede:	f000 f847 	bl	8006f70 <xTaskIncrementTick>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ee8:	4b16      	ldr	r3, [pc, #88]	; (8006f44 <xTaskResumeAll+0x130>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f1      	bne.n	8006ede <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006efa:	4b13      	ldr	r3, [pc, #76]	; (8006f48 <xTaskResumeAll+0x134>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f00:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <xTaskResumeAll+0x130>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d009      	beq.n	8006f1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f0c:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <xTaskResumeAll+0x138>)
 8006f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f1c:	f7fe ff32 	bl	8005d84 <vPortExitCritical>

	return xAlreadyYielded;
 8006f20:	68bb      	ldr	r3, [r7, #8]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	24004ad0 	.word	0x24004ad0
 8006f30:	24004aa8 	.word	0x24004aa8
 8006f34:	24004a68 	.word	0x24004a68
 8006f38:	24004ab0 	.word	0x24004ab0
 8006f3c:	240045d8 	.word	0x240045d8
 8006f40:	240045d4 	.word	0x240045d4
 8006f44:	24004abc 	.word	0x24004abc
 8006f48:	24004ab8 	.word	0x24004ab8
 8006f4c:	e000ed04 	.word	0xe000ed04

08006f50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f56:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <xTaskGetTickCount+0x1c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f5c:	687b      	ldr	r3, [r7, #4]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	24004aac 	.word	0x24004aac

08006f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f7a:	4b4f      	ldr	r3, [pc, #316]	; (80070b8 <xTaskIncrementTick+0x148>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f040 808f 	bne.w	80070a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f84:	4b4d      	ldr	r3, [pc, #308]	; (80070bc <xTaskIncrementTick+0x14c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f8c:	4a4b      	ldr	r2, [pc, #300]	; (80070bc <xTaskIncrementTick+0x14c>)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d120      	bne.n	8006fda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f98:	4b49      	ldr	r3, [pc, #292]	; (80070c0 <xTaskIncrementTick+0x150>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	603b      	str	r3, [r7, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <xTaskIncrementTick+0x46>
 8006fb8:	4b41      	ldr	r3, [pc, #260]	; (80070c0 <xTaskIncrementTick+0x150>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	4b41      	ldr	r3, [pc, #260]	; (80070c4 <xTaskIncrementTick+0x154>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a3f      	ldr	r2, [pc, #252]	; (80070c0 <xTaskIncrementTick+0x150>)
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	4a3f      	ldr	r2, [pc, #252]	; (80070c4 <xTaskIncrementTick+0x154>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	4b3e      	ldr	r3, [pc, #248]	; (80070c8 <xTaskIncrementTick+0x158>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	4a3d      	ldr	r2, [pc, #244]	; (80070c8 <xTaskIncrementTick+0x158>)
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	f000 fadb 	bl	8007590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fda:	4b3c      	ldr	r3, [pc, #240]	; (80070cc <xTaskIncrementTick+0x15c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d349      	bcc.n	8007078 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fe4:	4b36      	ldr	r3, [pc, #216]	; (80070c0 <xTaskIncrementTick+0x150>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d104      	bne.n	8006ff8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fee:	4b37      	ldr	r3, [pc, #220]	; (80070cc <xTaskIncrementTick+0x15c>)
 8006ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff4:	601a      	str	r2, [r3, #0]
					break;
 8006ff6:	e03f      	b.n	8007078 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ff8:	4b31      	ldr	r3, [pc, #196]	; (80070c0 <xTaskIncrementTick+0x150>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	429a      	cmp	r2, r3
 800700e:	d203      	bcs.n	8007018 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007010:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <xTaskIncrementTick+0x15c>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007016:	e02f      	b.n	8007078 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	3304      	adds	r3, #4
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe fd27 	bl	8005a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	3318      	adds	r3, #24
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fd1e 	bl	8005a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007038:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <xTaskIncrementTick+0x160>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d903      	bls.n	8007048 <xTaskIncrementTick+0xd8>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4a22      	ldr	r2, [pc, #136]	; (80070d0 <xTaskIncrementTick+0x160>)
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4a1f      	ldr	r2, [pc, #124]	; (80070d4 <xTaskIncrementTick+0x164>)
 8007056:	441a      	add	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	3304      	adds	r3, #4
 800705c:	4619      	mov	r1, r3
 800705e:	4610      	mov	r0, r2
 8007060:	f7fe fca9 	bl	80059b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	4b1b      	ldr	r3, [pc, #108]	; (80070d8 <xTaskIncrementTick+0x168>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	429a      	cmp	r2, r3
 8007070:	d3b8      	bcc.n	8006fe4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007072:	2301      	movs	r3, #1
 8007074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007076:	e7b5      	b.n	8006fe4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007078:	4b17      	ldr	r3, [pc, #92]	; (80070d8 <xTaskIncrementTick+0x168>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	4915      	ldr	r1, [pc, #84]	; (80070d4 <xTaskIncrementTick+0x164>)
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d901      	bls.n	8007094 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007094:	4b11      	ldr	r3, [pc, #68]	; (80070dc <xTaskIncrementTick+0x16c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d007      	beq.n	80070ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	e004      	b.n	80070ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070a2:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <xTaskIncrementTick+0x170>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3301      	adds	r3, #1
 80070a8:	4a0d      	ldr	r2, [pc, #52]	; (80070e0 <xTaskIncrementTick+0x170>)
 80070aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070ac:	697b      	ldr	r3, [r7, #20]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	24004ad0 	.word	0x24004ad0
 80070bc:	24004aac 	.word	0x24004aac
 80070c0:	24004a60 	.word	0x24004a60
 80070c4:	24004a64 	.word	0x24004a64
 80070c8:	24004ac0 	.word	0x24004ac0
 80070cc:	24004ac8 	.word	0x24004ac8
 80070d0:	24004ab0 	.word	0x24004ab0
 80070d4:	240045d8 	.word	0x240045d8
 80070d8:	240045d4 	.word	0x240045d4
 80070dc:	24004abc 	.word	0x24004abc
 80070e0:	24004ab8 	.word	0x24004ab8

080070e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070ea:	4b2a      	ldr	r3, [pc, #168]	; (8007194 <vTaskSwitchContext+0xb0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070f2:	4b29      	ldr	r3, [pc, #164]	; (8007198 <vTaskSwitchContext+0xb4>)
 80070f4:	2201      	movs	r2, #1
 80070f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070f8:	e046      	b.n	8007188 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80070fa:	4b27      	ldr	r3, [pc, #156]	; (8007198 <vTaskSwitchContext+0xb4>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007100:	4b26      	ldr	r3, [pc, #152]	; (800719c <vTaskSwitchContext+0xb8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e010      	b.n	800712a <vTaskSwitchContext+0x46>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <vTaskSwitchContext+0x40>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	607b      	str	r3, [r7, #4]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <vTaskSwitchContext+0x3e>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3b01      	subs	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	491d      	ldr	r1, [pc, #116]	; (80071a0 <vTaskSwitchContext+0xbc>)
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0e4      	beq.n	8007108 <vTaskSwitchContext+0x24>
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a15      	ldr	r2, [pc, #84]	; (80071a0 <vTaskSwitchContext+0xbc>)
 800714a:	4413      	add	r3, r2
 800714c:	60bb      	str	r3, [r7, #8]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	605a      	str	r2, [r3, #4]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3308      	adds	r3, #8
 8007160:	429a      	cmp	r2, r3
 8007162:	d104      	bne.n	800716e <vTaskSwitchContext+0x8a>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	4a0b      	ldr	r2, [pc, #44]	; (80071a4 <vTaskSwitchContext+0xc0>)
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	4a08      	ldr	r2, [pc, #32]	; (800719c <vTaskSwitchContext+0xb8>)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800717e:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <vTaskSwitchContext+0xc0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3354      	adds	r3, #84	; 0x54
 8007184:	4a08      	ldr	r2, [pc, #32]	; (80071a8 <vTaskSwitchContext+0xc4>)
 8007186:	6013      	str	r3, [r2, #0]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	24004ad0 	.word	0x24004ad0
 8007198:	24004abc 	.word	0x24004abc
 800719c:	24004ab0 	.word	0x24004ab0
 80071a0:	240045d8 	.word	0x240045d8
 80071a4:	240045d4 	.word	0x240045d4
 80071a8:	24000014 	.word	0x24000014

080071ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	60fb      	str	r3, [r7, #12]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <vTaskPlaceOnEventList+0x44>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3318      	adds	r3, #24
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fe fc0f 	bl	80059fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071e0:	2101      	movs	r1, #1
 80071e2:	6838      	ldr	r0, [r7, #0]
 80071e4:	f000 fa80 	bl	80076e8 <prvAddCurrentTaskToDelayedList>
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	240045d4 	.word	0x240045d4

080071f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	617b      	str	r3, [r7, #20]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800721c:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <vTaskPlaceOnEventListRestricted+0x54>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3318      	adds	r3, #24
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7fe fbc6 	bl	80059b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007230:	f04f 33ff 	mov.w	r3, #4294967295
 8007234:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	68b8      	ldr	r0, [r7, #8]
 800723a:	f000 fa55 	bl	80076e8 <prvAddCurrentTaskToDelayedList>
	}
 800723e:	bf00      	nop
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	240045d4 	.word	0x240045d4

0800724c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	60fb      	str	r3, [r7, #12]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3318      	adds	r3, #24
 800727c:	4618      	mov	r0, r3
 800727e:	f7fe fbf7 	bl	8005a70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007282:	4b1e      	ldr	r3, [pc, #120]	; (80072fc <xTaskRemoveFromEventList+0xb0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d11d      	bne.n	80072c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fbee 	bl	8005a70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	4b19      	ldr	r3, [pc, #100]	; (8007300 <xTaskRemoveFromEventList+0xb4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d903      	bls.n	80072a8 <xTaskRemoveFromEventList+0x5c>
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	4a16      	ldr	r2, [pc, #88]	; (8007300 <xTaskRemoveFromEventList+0xb4>)
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4a13      	ldr	r2, [pc, #76]	; (8007304 <xTaskRemoveFromEventList+0xb8>)
 80072b6:	441a      	add	r2, r3
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f7fe fb79 	bl	80059b6 <vListInsertEnd>
 80072c4:	e005      	b.n	80072d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3318      	adds	r3, #24
 80072ca:	4619      	mov	r1, r3
 80072cc:	480e      	ldr	r0, [pc, #56]	; (8007308 <xTaskRemoveFromEventList+0xbc>)
 80072ce:	f7fe fb72 	bl	80059b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <xTaskRemoveFromEventList+0xc0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	429a      	cmp	r2, r3
 80072de:	d905      	bls.n	80072ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <xTaskRemoveFromEventList+0xc4>)
 80072e6:	2201      	movs	r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	e001      	b.n	80072f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072f0:	697b      	ldr	r3, [r7, #20]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	24004ad0 	.word	0x24004ad0
 8007300:	24004ab0 	.word	0x24004ab0
 8007304:	240045d8 	.word	0x240045d8
 8007308:	24004a68 	.word	0x24004a68
 800730c:	240045d4 	.word	0x240045d4
 8007310:	24004abc 	.word	0x24004abc

08007314 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800731c:	4b06      	ldr	r3, [pc, #24]	; (8007338 <vTaskInternalSetTimeOutState+0x24>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007324:	4b05      	ldr	r3, [pc, #20]	; (800733c <vTaskInternalSetTimeOutState+0x28>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	605a      	str	r2, [r3, #4]
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	24004ac0 	.word	0x24004ac0
 800733c:	24004aac 	.word	0x24004aac

08007340 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	613b      	str	r3, [r7, #16]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	60fb      	str	r3, [r7, #12]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007382:	f7fe fccf 	bl	8005d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007386:	4b1d      	ldr	r3, [pc, #116]	; (80073fc <xTaskCheckForTimeOut+0xbc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d102      	bne.n	80073a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	e023      	b.n	80073ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4b15      	ldr	r3, [pc, #84]	; (8007400 <xTaskCheckForTimeOut+0xc0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d007      	beq.n	80073c2 <xTaskCheckForTimeOut+0x82>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d302      	bcc.n	80073c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073bc:	2301      	movs	r3, #1
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	e015      	b.n	80073ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d20b      	bcs.n	80073e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	1ad2      	subs	r2, r2, r3
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff ff9b 	bl	8007314 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073de:	2300      	movs	r3, #0
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	e004      	b.n	80073ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073ee:	f7fe fcc9 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 80073f2:	69fb      	ldr	r3, [r7, #28]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3720      	adds	r7, #32
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	24004aac 	.word	0x24004aac
 8007400:	24004ac0 	.word	0x24004ac0

08007404 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007408:	4b03      	ldr	r3, [pc, #12]	; (8007418 <vTaskMissedYield+0x14>)
 800740a:	2201      	movs	r2, #1
 800740c:	601a      	str	r2, [r3, #0]
}
 800740e:	bf00      	nop
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	24004abc 	.word	0x24004abc

0800741c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007424:	f000 f852 	bl	80074cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <prvIdleTask+0x28>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d9f9      	bls.n	8007424 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <prvIdleTask+0x2c>)
 8007432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007440:	e7f0      	b.n	8007424 <prvIdleTask+0x8>
 8007442:	bf00      	nop
 8007444:	240045d8 	.word	0x240045d8
 8007448:	e000ed04 	.word	0xe000ed04

0800744c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007452:	2300      	movs	r3, #0
 8007454:	607b      	str	r3, [r7, #4]
 8007456:	e00c      	b.n	8007472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4a12      	ldr	r2, [pc, #72]	; (80074ac <prvInitialiseTaskLists+0x60>)
 8007464:	4413      	add	r3, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fa78 	bl	800595c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3301      	adds	r3, #1
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b37      	cmp	r3, #55	; 0x37
 8007476:	d9ef      	bls.n	8007458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007478:	480d      	ldr	r0, [pc, #52]	; (80074b0 <prvInitialiseTaskLists+0x64>)
 800747a:	f7fe fa6f 	bl	800595c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800747e:	480d      	ldr	r0, [pc, #52]	; (80074b4 <prvInitialiseTaskLists+0x68>)
 8007480:	f7fe fa6c 	bl	800595c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007484:	480c      	ldr	r0, [pc, #48]	; (80074b8 <prvInitialiseTaskLists+0x6c>)
 8007486:	f7fe fa69 	bl	800595c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800748a:	480c      	ldr	r0, [pc, #48]	; (80074bc <prvInitialiseTaskLists+0x70>)
 800748c:	f7fe fa66 	bl	800595c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007490:	480b      	ldr	r0, [pc, #44]	; (80074c0 <prvInitialiseTaskLists+0x74>)
 8007492:	f7fe fa63 	bl	800595c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007496:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <prvInitialiseTaskLists+0x78>)
 8007498:	4a05      	ldr	r2, [pc, #20]	; (80074b0 <prvInitialiseTaskLists+0x64>)
 800749a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800749c:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <prvInitialiseTaskLists+0x7c>)
 800749e:	4a05      	ldr	r2, [pc, #20]	; (80074b4 <prvInitialiseTaskLists+0x68>)
 80074a0:	601a      	str	r2, [r3, #0]
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	240045d8 	.word	0x240045d8
 80074b0:	24004a38 	.word	0x24004a38
 80074b4:	24004a4c 	.word	0x24004a4c
 80074b8:	24004a68 	.word	0x24004a68
 80074bc:	24004a7c 	.word	0x24004a7c
 80074c0:	24004a94 	.word	0x24004a94
 80074c4:	24004a60 	.word	0x24004a60
 80074c8:	24004a64 	.word	0x24004a64

080074cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074d2:	e019      	b.n	8007508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074d4:	f7fe fc26 	bl	8005d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d8:	4b10      	ldr	r3, [pc, #64]	; (800751c <prvCheckTasksWaitingTermination+0x50>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe fac3 	bl	8005a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <prvCheckTasksWaitingTermination+0x54>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	4a0b      	ldr	r2, [pc, #44]	; (8007520 <prvCheckTasksWaitingTermination+0x54>)
 80074f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074f4:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <prvCheckTasksWaitingTermination+0x58>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	4a0a      	ldr	r2, [pc, #40]	; (8007524 <prvCheckTasksWaitingTermination+0x58>)
 80074fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074fe:	f7fe fc41 	bl	8005d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f810 	bl	8007528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007508:	4b06      	ldr	r3, [pc, #24]	; (8007524 <prvCheckTasksWaitingTermination+0x58>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e1      	bne.n	80074d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	24004a7c 	.word	0x24004a7c
 8007520:	24004aa8 	.word	0x24004aa8
 8007524:	24004a90 	.word	0x24004a90

08007528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3354      	adds	r3, #84	; 0x54
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fcc3 	bl	8007ec0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007540:	2b00      	cmp	r3, #0
 8007542:	d108      	bne.n	8007556 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe f8e9 	bl	8005720 <vPortFree>
				vPortFree( pxTCB );
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fe f8e6 	bl	8005720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007554:	e018      	b.n	8007588 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800755c:	2b01      	cmp	r3, #1
 800755e:	d103      	bne.n	8007568 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7fe f8dd 	bl	8005720 <vPortFree>
	}
 8007566:	e00f      	b.n	8007588 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800756e:	2b02      	cmp	r3, #2
 8007570:	d00a      	beq.n	8007588 <prvDeleteTCB+0x60>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60fb      	str	r3, [r7, #12]
}
 8007584:	bf00      	nop
 8007586:	e7fe      	b.n	8007586 <prvDeleteTCB+0x5e>
	}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007596:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <prvResetNextTaskUnblockTime+0x38>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075a0:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <prvResetNextTaskUnblockTime+0x3c>)
 80075a2:	f04f 32ff 	mov.w	r2, #4294967295
 80075a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075a8:	e008      	b.n	80075bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <prvResetNextTaskUnblockTime+0x38>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	4a04      	ldr	r2, [pc, #16]	; (80075cc <prvResetNextTaskUnblockTime+0x3c>)
 80075ba:	6013      	str	r3, [r2, #0]
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	24004a60 	.word	0x24004a60
 80075cc:	24004ac8 	.word	0x24004ac8

080075d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075d6:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <xTaskGetSchedulerState+0x34>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075de:	2301      	movs	r3, #1
 80075e0:	607b      	str	r3, [r7, #4]
 80075e2:	e008      	b.n	80075f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075e4:	4b08      	ldr	r3, [pc, #32]	; (8007608 <xTaskGetSchedulerState+0x38>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075ec:	2302      	movs	r3, #2
 80075ee:	607b      	str	r3, [r7, #4]
 80075f0:	e001      	b.n	80075f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075f6:	687b      	ldr	r3, [r7, #4]
	}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	24004ab4 	.word	0x24004ab4
 8007608:	24004ad0 	.word	0x24004ad0

0800760c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d056      	beq.n	80076d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007622:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <xTaskPriorityDisinherit+0xd0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	429a      	cmp	r2, r3
 800762a:	d00a      	beq.n	8007642 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	60fb      	str	r3, [r7, #12]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	60bb      	str	r3, [r7, #8]
}
 800765c:	bf00      	nop
 800765e:	e7fe      	b.n	800765e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007664:	1e5a      	subs	r2, r3, #1
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007672:	429a      	cmp	r2, r3
 8007674:	d02c      	beq.n	80076d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767a:	2b00      	cmp	r3, #0
 800767c:	d128      	bne.n	80076d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	3304      	adds	r3, #4
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe f9f4 	bl	8005a70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <xTaskPriorityDisinherit+0xd4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d903      	bls.n	80076b0 <xTaskPriorityDisinherit+0xa4>
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	4a0c      	ldr	r2, [pc, #48]	; (80076e0 <xTaskPriorityDisinherit+0xd4>)
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <xTaskPriorityDisinherit+0xd8>)
 80076be:	441a      	add	r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f7fe f975 	bl	80059b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076cc:	2301      	movs	r3, #1
 80076ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076d0:	697b      	ldr	r3, [r7, #20]
	}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	240045d4 	.word	0x240045d4
 80076e0:	24004ab0 	.word	0x24004ab0
 80076e4:	240045d8 	.word	0x240045d8

080076e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076f2:	4b21      	ldr	r3, [pc, #132]	; (8007778 <prvAddCurrentTaskToDelayedList+0x90>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076f8:	4b20      	ldr	r3, [pc, #128]	; (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe f9b6 	bl	8005a70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770a:	d10a      	bne.n	8007722 <prvAddCurrentTaskToDelayedList+0x3a>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007712:	4b1a      	ldr	r3, [pc, #104]	; (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3304      	adds	r3, #4
 8007718:	4619      	mov	r1, r3
 800771a:	4819      	ldr	r0, [pc, #100]	; (8007780 <prvAddCurrentTaskToDelayedList+0x98>)
 800771c:	f7fe f94b 	bl	80059b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007720:	e026      	b.n	8007770 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800772a:	4b14      	ldr	r3, [pc, #80]	; (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	429a      	cmp	r2, r3
 8007738:	d209      	bcs.n	800774e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800773a:	4b12      	ldr	r3, [pc, #72]	; (8007784 <prvAddCurrentTaskToDelayedList+0x9c>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b0f      	ldr	r3, [pc, #60]	; (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3304      	adds	r3, #4
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f7fe f959 	bl	80059fe <vListInsert>
}
 800774c:	e010      	b.n	8007770 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774e:	4b0e      	ldr	r3, [pc, #56]	; (8007788 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <prvAddCurrentTaskToDelayedList+0x94>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3304      	adds	r3, #4
 8007758:	4619      	mov	r1, r3
 800775a:	4610      	mov	r0, r2
 800775c:	f7fe f94f 	bl	80059fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007760:	4b0a      	ldr	r3, [pc, #40]	; (800778c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	d202      	bcs.n	8007770 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800776a:	4a08      	ldr	r2, [pc, #32]	; (800778c <prvAddCurrentTaskToDelayedList+0xa4>)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6013      	str	r3, [r2, #0]
}
 8007770:	bf00      	nop
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	24004aac 	.word	0x24004aac
 800777c:	240045d4 	.word	0x240045d4
 8007780:	24004a94 	.word	0x24004a94
 8007784:	24004a64 	.word	0x24004a64
 8007788:	24004a60 	.word	0x24004a60
 800778c:	24004ac8 	.word	0x24004ac8

08007790 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	; 0x28
 8007794:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800779a:	f000 fb07 	bl	8007dac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800779e:	4b1c      	ldr	r3, [pc, #112]	; (8007810 <xTimerCreateTimerTask+0x80>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d021      	beq.n	80077ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077ae:	1d3a      	adds	r2, r7, #4
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	f107 030c 	add.w	r3, r7, #12
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fd fecb 	bl	8005554 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	9202      	str	r2, [sp, #8]
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	2302      	movs	r3, #2
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	2300      	movs	r3, #0
 80077ce:	460a      	mov	r2, r1
 80077d0:	4910      	ldr	r1, [pc, #64]	; (8007814 <xTimerCreateTimerTask+0x84>)
 80077d2:	4811      	ldr	r0, [pc, #68]	; (8007818 <xTimerCreateTimerTask+0x88>)
 80077d4:	f7ff f8b4 	bl	8006940 <xTaskCreateStatic>
 80077d8:	4603      	mov	r3, r0
 80077da:	4a10      	ldr	r2, [pc, #64]	; (800781c <xTimerCreateTimerTask+0x8c>)
 80077dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077de:	4b0f      	ldr	r3, [pc, #60]	; (800781c <xTimerCreateTimerTask+0x8c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077e6:	2301      	movs	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	613b      	str	r3, [r7, #16]
}
 8007802:	bf00      	nop
 8007804:	e7fe      	b.n	8007804 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007806:	697b      	ldr	r3, [r7, #20]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	24004b04 	.word	0x24004b04
 8007814:	080080a0 	.word	0x080080a0
 8007818:	08007955 	.word	0x08007955
 800781c:	24004b08 	.word	0x24004b08

08007820 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	623b      	str	r3, [r7, #32]
}
 800784a:	bf00      	nop
 800784c:	e7fe      	b.n	800784c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800784e:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <xTimerGenericCommand+0x98>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d02a      	beq.n	80078ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b05      	cmp	r3, #5
 8007866:	dc18      	bgt.n	800789a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007868:	f7ff feb2 	bl	80075d0 <xTaskGetSchedulerState>
 800786c:	4603      	mov	r3, r0
 800786e:	2b02      	cmp	r3, #2
 8007870:	d109      	bne.n	8007886 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007872:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <xTimerGenericCommand+0x98>)
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	f107 0110 	add.w	r1, r7, #16
 800787a:	2300      	movs	r3, #0
 800787c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800787e:	f7fe fc77 	bl	8006170 <xQueueGenericSend>
 8007882:	6278      	str	r0, [r7, #36]	; 0x24
 8007884:	e012      	b.n	80078ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007886:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <xTimerGenericCommand+0x98>)
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	f107 0110 	add.w	r1, r7, #16
 800788e:	2300      	movs	r3, #0
 8007890:	2200      	movs	r2, #0
 8007892:	f7fe fc6d 	bl	8006170 <xQueueGenericSend>
 8007896:	6278      	str	r0, [r7, #36]	; 0x24
 8007898:	e008      	b.n	80078ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800789a:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <xTimerGenericCommand+0x98>)
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	f107 0110 	add.w	r1, r7, #16
 80078a2:	2300      	movs	r3, #0
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	f7fe fd61 	bl	800636c <xQueueGenericSendFromISR>
 80078aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3728      	adds	r7, #40	; 0x28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	24004b04 	.word	0x24004b04

080078bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c6:	4b22      	ldr	r3, [pc, #136]	; (8007950 <prvProcessExpiredTimer+0x94>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe f8cb 	bl	8005a70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d022      	beq.n	800792e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	699a      	ldr	r2, [r3, #24]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	18d1      	adds	r1, r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	6978      	ldr	r0, [r7, #20]
 80078f6:	f000 f8d1 	bl	8007a9c <prvInsertTimerInActiveList>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01f      	beq.n	8007940 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007900:	2300      	movs	r3, #0
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	2300      	movs	r3, #0
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	2100      	movs	r1, #0
 800790a:	6978      	ldr	r0, [r7, #20]
 800790c:	f7ff ff88 	bl	8007820 <xTimerGenericCommand>
 8007910:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d113      	bne.n	8007940 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	60fb      	str	r3, [r7, #12]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007934:	f023 0301 	bic.w	r3, r3, #1
 8007938:	b2da      	uxtb	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	6978      	ldr	r0, [r7, #20]
 8007946:	4798      	blx	r3
}
 8007948:	bf00      	nop
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	24004afc 	.word	0x24004afc

08007954 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800795c:	f107 0308 	add.w	r3, r7, #8
 8007960:	4618      	mov	r0, r3
 8007962:	f000 f857 	bl	8007a14 <prvGetNextExpireTime>
 8007966:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4619      	mov	r1, r3
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f803 	bl	8007978 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007972:	f000 f8d5 	bl	8007b20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007976:	e7f1      	b.n	800795c <prvTimerTask+0x8>

08007978 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007982:	f7ff fa39 	bl	8006df8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007986:	f107 0308 	add.w	r3, r7, #8
 800798a:	4618      	mov	r0, r3
 800798c:	f000 f866 	bl	8007a5c <prvSampleTimeNow>
 8007990:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d130      	bne.n	80079fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <prvProcessTimerOrBlockTask+0x3c>
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d806      	bhi.n	80079b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079a6:	f7ff fa35 	bl	8006e14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079aa:	68f9      	ldr	r1, [r7, #12]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff ff85 	bl	80078bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079b2:	e024      	b.n	80079fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079ba:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <prvProcessTimerOrBlockTask+0x90>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <prvProcessTimerOrBlockTask+0x50>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e000      	b.n	80079ca <prvProcessTimerOrBlockTask+0x52>
 80079c8:	2300      	movs	r3, #0
 80079ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <prvProcessTimerOrBlockTask+0x94>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	f7fe ff7d 	bl	80068d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079de:	f7ff fa19 	bl	8006e14 <xTaskResumeAll>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079e8:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <prvProcessTimerOrBlockTask+0x98>)
 80079ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
}
 80079f8:	e001      	b.n	80079fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079fa:	f7ff fa0b 	bl	8006e14 <xTaskResumeAll>
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	24004b00 	.word	0x24004b00
 8007a0c:	24004b04 	.word	0x24004b04
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <prvGetNextExpireTime+0x44>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <prvGetNextExpireTime+0x16>
 8007a26:	2201      	movs	r2, #1
 8007a28:	e000      	b.n	8007a2c <prvGetNextExpireTime+0x18>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d105      	bne.n	8007a44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a38:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <prvGetNextExpireTime+0x44>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	e001      	b.n	8007a48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a48:	68fb      	ldr	r3, [r7, #12]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	24004afc 	.word	0x24004afc

08007a5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a64:	f7ff fa74 	bl	8006f50 <xTaskGetTickCount>
 8007a68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a6a:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <prvSampleTimeNow+0x3c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d205      	bcs.n	8007a80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a74:	f000 f936 	bl	8007ce4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	e002      	b.n	8007a86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a86:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <prvSampleTimeNow+0x3c>)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	24004b0c 	.word	0x24004b0c

08007a9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d812      	bhi.n	8007ae8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	1ad2      	subs	r2, r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d302      	bcc.n	8007ad6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	e01b      	b.n	8007b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ad6:	4b10      	ldr	r3, [pc, #64]	; (8007b18 <prvInsertTimerInActiveList+0x7c>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3304      	adds	r3, #4
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f7fd ff8c 	bl	80059fe <vListInsert>
 8007ae6:	e012      	b.n	8007b0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d206      	bcs.n	8007afe <prvInsertTimerInActiveList+0x62>
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d302      	bcc.n	8007afe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007af8:	2301      	movs	r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	e007      	b.n	8007b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007afe:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <prvInsertTimerInActiveList+0x80>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3304      	adds	r3, #4
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f7fd ff78 	bl	80059fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b0e:	697b      	ldr	r3, [r7, #20]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	24004b00 	.word	0x24004b00
 8007b1c:	24004afc 	.word	0x24004afc

08007b20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	; 0x38
 8007b24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b26:	e0ca      	b.n	8007cbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	da18      	bge.n	8007b60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b2e:	1d3b      	adds	r3, r7, #4
 8007b30:	3304      	adds	r3, #4
 8007b32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	61fb      	str	r3, [r7, #28]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b56:	6850      	ldr	r0, [r2, #4]
 8007b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b5a:	6892      	ldr	r2, [r2, #8]
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f2c0 80aa 	blt.w	8007cbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	3304      	adds	r3, #4
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fd ff79 	bl	8005a70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b7e:	463b      	mov	r3, r7
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff ff6b 	bl	8007a5c <prvSampleTimeNow>
 8007b86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b09      	cmp	r3, #9
 8007b8c:	f200 8097 	bhi.w	8007cbe <prvProcessReceivedCommands+0x19e>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <prvProcessReceivedCommands+0x78>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bc1 	.word	0x08007bc1
 8007b9c:	08007bc1 	.word	0x08007bc1
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007c35 	.word	0x08007c35
 8007ba8:	08007c49 	.word	0x08007c49
 8007bac:	08007c93 	.word	0x08007c93
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bc1 	.word	0x08007bc1
 8007bb8:	08007c35 	.word	0x08007c35
 8007bbc:	08007c49 	.word	0x08007c49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bc6:	f043 0301 	orr.w	r3, r3, #1
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	18d1      	adds	r1, r2, r3
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be0:	f7ff ff5c 	bl	8007a9c <prvInsertTimerInActiveList>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d069      	beq.n	8007cbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d05e      	beq.n	8007cbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	441a      	add	r2, r3
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	2100      	movs	r1, #0
 8007c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c12:	f7ff fe05 	bl	8007820 <xTimerGenericCommand>
 8007c16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d14f      	bne.n	8007cbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	61bb      	str	r3, [r7, #24]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c3a:	f023 0301 	bic.w	r3, r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c46:	e03a      	b.n	8007cbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	617b      	str	r3, [r7, #20]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	699a      	ldr	r2, [r3, #24]
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	18d1      	adds	r1, r2, r3
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c8c:	f7ff ff06 	bl	8007a9c <prvInsertTimerInActiveList>
					break;
 8007c90:	e015      	b.n	8007cbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d103      	bne.n	8007ca8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca2:	f7fd fd3d 	bl	8005720 <vPortFree>
 8007ca6:	e00a      	b.n	8007cbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cae:	f023 0301 	bic.w	r3, r3, #1
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cba:	e000      	b.n	8007cbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007cbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cbe:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <prvProcessReceivedCommands+0x1c0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	1d39      	adds	r1, r7, #4
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fbec 	bl	80064a4 <xQueueReceive>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f47f af2a 	bne.w	8007b28 <prvProcessReceivedCommands+0x8>
	}
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop
 8007cd8:	3730      	adds	r7, #48	; 0x30
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	24004b04 	.word	0x24004b04

08007ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cea:	e048      	b.n	8007d7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cec:	4b2d      	ldr	r3, [pc, #180]	; (8007da4 <prvSwitchTimerLists+0xc0>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf6:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <prvSwitchTimerLists+0xc0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3304      	adds	r3, #4
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fd feb3 	bl	8005a70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d02e      	beq.n	8007d7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4413      	add	r3, r2
 8007d28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d90e      	bls.n	8007d50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d3e:	4b19      	ldr	r3, [pc, #100]	; (8007da4 <prvSwitchTimerLists+0xc0>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3304      	adds	r3, #4
 8007d46:	4619      	mov	r1, r3
 8007d48:	4610      	mov	r0, r2
 8007d4a:	f7fd fe58 	bl	80059fe <vListInsert>
 8007d4e:	e016      	b.n	8007d7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d50:	2300      	movs	r3, #0
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	2300      	movs	r3, #0
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	2100      	movs	r1, #0
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f7ff fd60 	bl	8007820 <xTimerGenericCommand>
 8007d60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10a      	bne.n	8007d7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	603b      	str	r3, [r7, #0]
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d7e:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <prvSwitchTimerLists+0xc0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1b1      	bne.n	8007cec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d88:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <prvSwitchTimerLists+0xc0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d8e:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <prvSwitchTimerLists+0xc4>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a04      	ldr	r2, [pc, #16]	; (8007da4 <prvSwitchTimerLists+0xc0>)
 8007d94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d96:	4a04      	ldr	r2, [pc, #16]	; (8007da8 <prvSwitchTimerLists+0xc4>)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	6013      	str	r3, [r2, #0]
}
 8007d9c:	bf00      	nop
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	24004afc 	.word	0x24004afc
 8007da8:	24004b00 	.word	0x24004b00

08007dac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007db2:	f7fd ffb7 	bl	8005d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007db6:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <prvCheckForValidListAndQueue+0x60>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d120      	bne.n	8007e00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dbe:	4814      	ldr	r0, [pc, #80]	; (8007e10 <prvCheckForValidListAndQueue+0x64>)
 8007dc0:	f7fd fdcc 	bl	800595c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007dc4:	4813      	ldr	r0, [pc, #76]	; (8007e14 <prvCheckForValidListAndQueue+0x68>)
 8007dc6:	f7fd fdc9 	bl	800595c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007dca:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <prvCheckForValidListAndQueue+0x6c>)
 8007dcc:	4a10      	ldr	r2, [pc, #64]	; (8007e10 <prvCheckForValidListAndQueue+0x64>)
 8007dce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007dd0:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <prvCheckForValidListAndQueue+0x70>)
 8007dd2:	4a10      	ldr	r2, [pc, #64]	; (8007e14 <prvCheckForValidListAndQueue+0x68>)
 8007dd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <prvCheckForValidListAndQueue+0x74>)
 8007ddc:	4a11      	ldr	r2, [pc, #68]	; (8007e24 <prvCheckForValidListAndQueue+0x78>)
 8007dde:	2110      	movs	r1, #16
 8007de0:	200a      	movs	r0, #10
 8007de2:	f7fe f929 	bl	8006038 <xQueueGenericCreateStatic>
 8007de6:	4603      	mov	r3, r0
 8007de8:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <prvCheckForValidListAndQueue+0x60>)
 8007dea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007dec:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <prvCheckForValidListAndQueue+0x60>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007df4:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <prvCheckForValidListAndQueue+0x60>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	490b      	ldr	r1, [pc, #44]	; (8007e28 <prvCheckForValidListAndQueue+0x7c>)
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fd42 	bl	8006884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e00:	f7fd ffc0 	bl	8005d84 <vPortExitCritical>
}
 8007e04:	bf00      	nop
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	24004b04 	.word	0x24004b04
 8007e10:	24004ad4 	.word	0x24004ad4
 8007e14:	24004ae8 	.word	0x24004ae8
 8007e18:	24004afc 	.word	0x24004afc
 8007e1c:	24004b00 	.word	0x24004b00
 8007e20:	24004bb0 	.word	0x24004bb0
 8007e24:	24004b10 	.word	0x24004b10
 8007e28:	080080a8 	.word	0x080080a8

08007e2c <__libc_init_array>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	4d0d      	ldr	r5, [pc, #52]	; (8007e64 <__libc_init_array+0x38>)
 8007e30:	4c0d      	ldr	r4, [pc, #52]	; (8007e68 <__libc_init_array+0x3c>)
 8007e32:	1b64      	subs	r4, r4, r5
 8007e34:	10a4      	asrs	r4, r4, #2
 8007e36:	2600      	movs	r6, #0
 8007e38:	42a6      	cmp	r6, r4
 8007e3a:	d109      	bne.n	8007e50 <__libc_init_array+0x24>
 8007e3c:	4d0b      	ldr	r5, [pc, #44]	; (8007e6c <__libc_init_array+0x40>)
 8007e3e:	4c0c      	ldr	r4, [pc, #48]	; (8007e70 <__libc_init_array+0x44>)
 8007e40:	f000 f8f2 	bl	8008028 <_init>
 8007e44:	1b64      	subs	r4, r4, r5
 8007e46:	10a4      	asrs	r4, r4, #2
 8007e48:	2600      	movs	r6, #0
 8007e4a:	42a6      	cmp	r6, r4
 8007e4c:	d105      	bne.n	8007e5a <__libc_init_array+0x2e>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e54:	4798      	blx	r3
 8007e56:	3601      	adds	r6, #1
 8007e58:	e7ee      	b.n	8007e38 <__libc_init_array+0xc>
 8007e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5e:	4798      	blx	r3
 8007e60:	3601      	adds	r6, #1
 8007e62:	e7f2      	b.n	8007e4a <__libc_init_array+0x1e>
 8007e64:	08008154 	.word	0x08008154
 8007e68:	08008154 	.word	0x08008154
 8007e6c:	08008154 	.word	0x08008154
 8007e70:	08008158 	.word	0x08008158

08007e74 <__retarget_lock_acquire_recursive>:
 8007e74:	4770      	bx	lr

08007e76 <__retarget_lock_release_recursive>:
 8007e76:	4770      	bx	lr

08007e78 <memcpy>:
 8007e78:	440a      	add	r2, r1
 8007e7a:	4291      	cmp	r1, r2
 8007e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e80:	d100      	bne.n	8007e84 <memcpy+0xc>
 8007e82:	4770      	bx	lr
 8007e84:	b510      	push	{r4, lr}
 8007e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e8e:	4291      	cmp	r1, r2
 8007e90:	d1f9      	bne.n	8007e86 <memcpy+0xe>
 8007e92:	bd10      	pop	{r4, pc}

08007e94 <memset>:
 8007e94:	4402      	add	r2, r0
 8007e96:	4603      	mov	r3, r0
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d100      	bne.n	8007e9e <memset+0xa>
 8007e9c:	4770      	bx	lr
 8007e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ea2:	e7f9      	b.n	8007e98 <memset+0x4>

08007ea4 <cleanup_glue>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	6809      	ldr	r1, [r1, #0]
 8007eaa:	4605      	mov	r5, r0
 8007eac:	b109      	cbz	r1, 8007eb2 <cleanup_glue+0xe>
 8007eae:	f7ff fff9 	bl	8007ea4 <cleanup_glue>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eba:	f000 b869 	b.w	8007f90 <_free_r>
	...

08007ec0 <_reclaim_reent>:
 8007ec0:	4b2c      	ldr	r3, [pc, #176]	; (8007f74 <_reclaim_reent+0xb4>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4283      	cmp	r3, r0
 8007ec6:	b570      	push	{r4, r5, r6, lr}
 8007ec8:	4604      	mov	r4, r0
 8007eca:	d051      	beq.n	8007f70 <_reclaim_reent+0xb0>
 8007ecc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ece:	b143      	cbz	r3, 8007ee2 <_reclaim_reent+0x22>
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d14a      	bne.n	8007f6c <_reclaim_reent+0xac>
 8007ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed8:	6819      	ldr	r1, [r3, #0]
 8007eda:	b111      	cbz	r1, 8007ee2 <_reclaim_reent+0x22>
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 f857 	bl	8007f90 <_free_r>
 8007ee2:	6961      	ldr	r1, [r4, #20]
 8007ee4:	b111      	cbz	r1, 8007eec <_reclaim_reent+0x2c>
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 f852 	bl	8007f90 <_free_r>
 8007eec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007eee:	b111      	cbz	r1, 8007ef6 <_reclaim_reent+0x36>
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 f84d 	bl	8007f90 <_free_r>
 8007ef6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ef8:	b111      	cbz	r1, 8007f00 <_reclaim_reent+0x40>
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 f848 	bl	8007f90 <_free_r>
 8007f00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007f02:	b111      	cbz	r1, 8007f0a <_reclaim_reent+0x4a>
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 f843 	bl	8007f90 <_free_r>
 8007f0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007f0c:	b111      	cbz	r1, 8007f14 <_reclaim_reent+0x54>
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f83e 	bl	8007f90 <_free_r>
 8007f14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007f16:	b111      	cbz	r1, 8007f1e <_reclaim_reent+0x5e>
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 f839 	bl	8007f90 <_free_r>
 8007f1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007f20:	b111      	cbz	r1, 8007f28 <_reclaim_reent+0x68>
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 f834 	bl	8007f90 <_free_r>
 8007f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f2a:	b111      	cbz	r1, 8007f32 <_reclaim_reent+0x72>
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 f82f 	bl	8007f90 <_free_r>
 8007f32:	69a3      	ldr	r3, [r4, #24]
 8007f34:	b1e3      	cbz	r3, 8007f70 <_reclaim_reent+0xb0>
 8007f36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f38:	4620      	mov	r0, r4
 8007f3a:	4798      	blx	r3
 8007f3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f3e:	b1b9      	cbz	r1, 8007f70 <_reclaim_reent+0xb0>
 8007f40:	4620      	mov	r0, r4
 8007f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f46:	f7ff bfad 	b.w	8007ea4 <cleanup_glue>
 8007f4a:	5949      	ldr	r1, [r1, r5]
 8007f4c:	b941      	cbnz	r1, 8007f60 <_reclaim_reent+0xa0>
 8007f4e:	3504      	adds	r5, #4
 8007f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f52:	2d80      	cmp	r5, #128	; 0x80
 8007f54:	68d9      	ldr	r1, [r3, #12]
 8007f56:	d1f8      	bne.n	8007f4a <_reclaim_reent+0x8a>
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 f819 	bl	8007f90 <_free_r>
 8007f5e:	e7ba      	b.n	8007ed6 <_reclaim_reent+0x16>
 8007f60:	680e      	ldr	r6, [r1, #0]
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 f814 	bl	8007f90 <_free_r>
 8007f68:	4631      	mov	r1, r6
 8007f6a:	e7ef      	b.n	8007f4c <_reclaim_reent+0x8c>
 8007f6c:	2500      	movs	r5, #0
 8007f6e:	e7ef      	b.n	8007f50 <_reclaim_reent+0x90>
 8007f70:	bd70      	pop	{r4, r5, r6, pc}
 8007f72:	bf00      	nop
 8007f74:	24000014 	.word	0x24000014

08007f78 <__malloc_lock>:
 8007f78:	4801      	ldr	r0, [pc, #4]	; (8007f80 <__malloc_lock+0x8>)
 8007f7a:	f7ff bf7b 	b.w	8007e74 <__retarget_lock_acquire_recursive>
 8007f7e:	bf00      	nop
 8007f80:	24004c00 	.word	0x24004c00

08007f84 <__malloc_unlock>:
 8007f84:	4801      	ldr	r0, [pc, #4]	; (8007f8c <__malloc_unlock+0x8>)
 8007f86:	f7ff bf76 	b.w	8007e76 <__retarget_lock_release_recursive>
 8007f8a:	bf00      	nop
 8007f8c:	24004c00 	.word	0x24004c00

08007f90 <_free_r>:
 8007f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f92:	2900      	cmp	r1, #0
 8007f94:	d044      	beq.n	8008020 <_free_r+0x90>
 8007f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f9a:	9001      	str	r0, [sp, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8007fa2:	bfb8      	it	lt
 8007fa4:	18e4      	addlt	r4, r4, r3
 8007fa6:	f7ff ffe7 	bl	8007f78 <__malloc_lock>
 8007faa:	4a1e      	ldr	r2, [pc, #120]	; (8008024 <_free_r+0x94>)
 8007fac:	9801      	ldr	r0, [sp, #4]
 8007fae:	6813      	ldr	r3, [r2, #0]
 8007fb0:	b933      	cbnz	r3, 8007fc0 <_free_r+0x30>
 8007fb2:	6063      	str	r3, [r4, #4]
 8007fb4:	6014      	str	r4, [r2, #0]
 8007fb6:	b003      	add	sp, #12
 8007fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fbc:	f7ff bfe2 	b.w	8007f84 <__malloc_unlock>
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d908      	bls.n	8007fd6 <_free_r+0x46>
 8007fc4:	6825      	ldr	r5, [r4, #0]
 8007fc6:	1961      	adds	r1, r4, r5
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	bf01      	itttt	eq
 8007fcc:	6819      	ldreq	r1, [r3, #0]
 8007fce:	685b      	ldreq	r3, [r3, #4]
 8007fd0:	1949      	addeq	r1, r1, r5
 8007fd2:	6021      	streq	r1, [r4, #0]
 8007fd4:	e7ed      	b.n	8007fb2 <_free_r+0x22>
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	b10b      	cbz	r3, 8007fe0 <_free_r+0x50>
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	d9fa      	bls.n	8007fd6 <_free_r+0x46>
 8007fe0:	6811      	ldr	r1, [r2, #0]
 8007fe2:	1855      	adds	r5, r2, r1
 8007fe4:	42a5      	cmp	r5, r4
 8007fe6:	d10b      	bne.n	8008000 <_free_r+0x70>
 8007fe8:	6824      	ldr	r4, [r4, #0]
 8007fea:	4421      	add	r1, r4
 8007fec:	1854      	adds	r4, r2, r1
 8007fee:	42a3      	cmp	r3, r4
 8007ff0:	6011      	str	r1, [r2, #0]
 8007ff2:	d1e0      	bne.n	8007fb6 <_free_r+0x26>
 8007ff4:	681c      	ldr	r4, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	6053      	str	r3, [r2, #4]
 8007ffa:	4421      	add	r1, r4
 8007ffc:	6011      	str	r1, [r2, #0]
 8007ffe:	e7da      	b.n	8007fb6 <_free_r+0x26>
 8008000:	d902      	bls.n	8008008 <_free_r+0x78>
 8008002:	230c      	movs	r3, #12
 8008004:	6003      	str	r3, [r0, #0]
 8008006:	e7d6      	b.n	8007fb6 <_free_r+0x26>
 8008008:	6825      	ldr	r5, [r4, #0]
 800800a:	1961      	adds	r1, r4, r5
 800800c:	428b      	cmp	r3, r1
 800800e:	bf04      	itt	eq
 8008010:	6819      	ldreq	r1, [r3, #0]
 8008012:	685b      	ldreq	r3, [r3, #4]
 8008014:	6063      	str	r3, [r4, #4]
 8008016:	bf04      	itt	eq
 8008018:	1949      	addeq	r1, r1, r5
 800801a:	6021      	streq	r1, [r4, #0]
 800801c:	6054      	str	r4, [r2, #4]
 800801e:	e7ca      	b.n	8007fb6 <_free_r+0x26>
 8008020:	b003      	add	sp, #12
 8008022:	bd30      	pop	{r4, r5, pc}
 8008024:	24004c04 	.word	0x24004c04

08008028 <_init>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	bf00      	nop
 800802c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802e:	bc08      	pop	{r3}
 8008030:	469e      	mov	lr, r3
 8008032:	4770      	bx	lr

08008034 <_fini>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr
