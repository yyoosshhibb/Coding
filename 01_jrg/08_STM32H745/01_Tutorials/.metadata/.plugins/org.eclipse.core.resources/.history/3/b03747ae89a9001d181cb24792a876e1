/*
 * Timers.c
 *
 *  Created on: Feb 10, 2023
 *      Author: Yoshi
 */

#include "Hardware_Def."

TIM_HandleTypeDef htim15;


uint32_t	Timer_ms = 0;

/* TIM15 init function */
void MX_TIM15_Init(void)
{


	uint32_t prescaler, frequency;

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  frequency = 2 * HAL_RCC_GetPCLK2Freq();

  //To get the frequency down to 1 MHz it needs to be divided by 1000000 and - 1 because of digital stuff

  prescaler = (uint32_t)((frequency / 1000000U) - 1U);

  //With 1 MHz we have a Period of 1000000/<Period in us> -1

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
  htim15.Init.Prescaler = prescaler;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim15.Init.Period = (1000000U/1000U) - 1U;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

	  if(tim_baseHandle->Instance==TIM15)
	  {
	  /* USER CODE BEGIN TIM15_MspInit 0 */

	  /* USER CODE END TIM15_MspInit 0 */
	    /* TIM15 clock enable */
	    __HAL_RCC_TIM15_CLK_ENABLE();

	    /* TIM15 interrupt Init */
	    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
	    HAL_NVIC_EnableIRQ(TIM15_IRQn);
	  /* USER CODE BEGIN TIM15_MspInit 1 */

	  /* USER CODE END TIM15_MspInit 1 */
	  }
}

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM15)
  {
  /* USER CODE BEGIN TIM15_MspDeInit 0 */

  /* USER CODE END TIM15_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM15_CLK_DISABLE();

    /* TIM15 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspDeInit 1 */

  /* USER CODE END TIM15_MspDeInit 1 */
  }
}

void TIM15_IRQHandler(void)
{

	if(TIM15->DIER & TIM_IT_UPDATE)
	{

	}
	Timer_ms++;
	HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
	HAL_TIM_IRQHandler(&htim15);

}
