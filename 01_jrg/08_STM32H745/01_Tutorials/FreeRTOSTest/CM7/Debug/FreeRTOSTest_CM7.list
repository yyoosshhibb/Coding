
FreeRTOSTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08009e94  08009e94  00019e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f78  08009f78  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08009f78  08009f78  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f78  08009f78  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f78  08009f78  00019f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  08009f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ce8  24000088  0800a004  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24004d70  0800a004  00024d70  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022741  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea8  00000000  00000000  000427f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  000466a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  00048000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c5bb  00000000  00000000  000497b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc86  00000000  00000000  00085d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001912e5  00000000  00000000  000a39f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00234cde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e20  00000000  00000000  00234d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009e7c 	.word	0x08009e7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08009e7c 	.word	0x08009e7c

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <SystemInit+0xfc>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <SystemInit+0xfc>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b39      	ldr	r3, [pc, #228]	; (80003dc <SystemInit+0xfc>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a38      	ldr	r2, [pc, #224]	; (80003dc <SystemInit+0xfc>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <SystemInit+0x100>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <SystemInit+0x100>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a32      	ldr	r2, [pc, #200]	; (80003e0 <SystemInit+0x100>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b31      	ldr	r3, [pc, #196]	; (80003e4 <SystemInit+0x104>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a30      	ldr	r2, [pc, #192]	; (80003e4 <SystemInit+0x104>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b2e      	ldr	r3, [pc, #184]	; (80003e4 <SystemInit+0x104>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <SystemInit+0x104>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	492c      	ldr	r1, [pc, #176]	; (80003e4 <SystemInit+0x104>)
 8000334:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <SystemInit+0x108>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <SystemInit+0x100>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <SystemInit+0x100>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a24      	ldr	r2, [pc, #144]	; (80003e0 <SystemInit+0x100>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x104>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <SystemInit+0x104>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x104>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <SystemInit+0x104>)
 800036a:	4a20      	ldr	r2, [pc, #128]	; (80003ec <SystemInit+0x10c>)
 800036c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x104>)
 8000370:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <SystemInit+0x110>)
 8000372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <SystemInit+0x104>)
 8000376:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <SystemInit+0x114>)
 8000378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x104>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <SystemInit+0x104>)
 8000382:	4a1c      	ldr	r2, [pc, #112]	; (80003f4 <SystemInit+0x114>)
 8000384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x104>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <SystemInit+0x104>)
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <SystemInit+0x114>)
 8000390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x104>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <SystemInit+0x104>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <SystemInit+0x104>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <SystemInit+0x104>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <SystemInit+0x118>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <SystemInit+0x118>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <SystemInit+0x11c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <SystemInit+0x120>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <SystemInit+0x124>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <SystemInit+0x128>)
 80003cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003d0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <FDCAN_RX_def>:
CAN_data_t T_Motor_max;
CAN_data_t T_Water;
CAN_data_t TS_State;

void FDCAN_RX_def()
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

	SoC_HV.CAN_length = RX_LENGTH8;
 8000410:	4b4a      	ldr	r3, [pc, #296]	; (800053c <FDCAN_RX_def+0x130>)
 8000412:	22ff      	movs	r2, #255	; 0xff
 8000414:	801a      	strh	r2, [r3, #0]
	SoC_HV.CAN_length_dec = 8;
 8000416:	4b49      	ldr	r3, [pc, #292]	; (800053c <FDCAN_RX_def+0x130>)
 8000418:	2208      	movs	r2, #8
 800041a:	709a      	strb	r2, [r3, #2]
	SoC_HV.CAN_id = 0x10;
 800041c:	4b47      	ldr	r3, [pc, #284]	; (800053c <FDCAN_RX_def+0x130>)
 800041e:	2210      	movs	r2, #16
 8000420:	609a      	str	r2, [r3, #8]
	SoC_HV.CAN_startbit = 0;
 8000422:	4b46      	ldr	r3, [pc, #280]	; (800053c <FDCAN_RX_def+0x130>)
 8000424:	2200      	movs	r2, #0
 8000426:	731a      	strb	r2, [r3, #12]
	SoC_HV.Endianness = Motorola;
 8000428:	4b44      	ldr	r3, [pc, #272]	; (800053c <FDCAN_RX_def+0x130>)
 800042a:	2200      	movs	r2, #0
 800042c:	735a      	strb	r2, [r3, #13]

	SoC_LV.CAN_length = RX_LENGTH8;
 800042e:	4b44      	ldr	r3, [pc, #272]	; (8000540 <FDCAN_RX_def+0x134>)
 8000430:	22ff      	movs	r2, #255	; 0xff
 8000432:	801a      	strh	r2, [r3, #0]
	SoC_LV.CAN_length_dec = 8;
 8000434:	4b42      	ldr	r3, [pc, #264]	; (8000540 <FDCAN_RX_def+0x134>)
 8000436:	2208      	movs	r2, #8
 8000438:	709a      	strb	r2, [r3, #2]
	SoC_LV.CAN_id = 0x10;
 800043a:	4b41      	ldr	r3, [pc, #260]	; (8000540 <FDCAN_RX_def+0x134>)
 800043c:	2210      	movs	r2, #16
 800043e:	609a      	str	r2, [r3, #8]
	SoC_LV.CAN_startbit = 8;
 8000440:	4b3f      	ldr	r3, [pc, #252]	; (8000540 <FDCAN_RX_def+0x134>)
 8000442:	2208      	movs	r2, #8
 8000444:	731a      	strb	r2, [r3, #12]
	SoC_LV.Endianness = Motorola;
 8000446:	4b3e      	ldr	r3, [pc, #248]	; (8000540 <FDCAN_RX_def+0x134>)
 8000448:	2200      	movs	r2, #0
 800044a:	735a      	strb	r2, [r3, #13]

	T_Cell_HV_max.CAN_length = RX_LENGTH8;
 800044c:	4b3d      	ldr	r3, [pc, #244]	; (8000544 <FDCAN_RX_def+0x138>)
 800044e:	22ff      	movs	r2, #255	; 0xff
 8000450:	801a      	strh	r2, [r3, #0]
	T_Cell_HV_max.CAN_length_dec = 8;
 8000452:	4b3c      	ldr	r3, [pc, #240]	; (8000544 <FDCAN_RX_def+0x138>)
 8000454:	2208      	movs	r2, #8
 8000456:	709a      	strb	r2, [r3, #2]
	T_Cell_HV_max.CAN_id = 0x10;
 8000458:	4b3a      	ldr	r3, [pc, #232]	; (8000544 <FDCAN_RX_def+0x138>)
 800045a:	2210      	movs	r2, #16
 800045c:	609a      	str	r2, [r3, #8]
	T_Cell_HV_max.CAN_startbit = 16;
 800045e:	4b39      	ldr	r3, [pc, #228]	; (8000544 <FDCAN_RX_def+0x138>)
 8000460:	2210      	movs	r2, #16
 8000462:	731a      	strb	r2, [r3, #12]
	T_Cell_HV_max.Endianness = Motorola;
 8000464:	4b37      	ldr	r3, [pc, #220]	; (8000544 <FDCAN_RX_def+0x138>)
 8000466:	2200      	movs	r2, #0
 8000468:	735a      	strb	r2, [r3, #13]

	T_Cell_LV_max.CAN_length = RX_LENGTH8;
 800046a:	4b37      	ldr	r3, [pc, #220]	; (8000548 <FDCAN_RX_def+0x13c>)
 800046c:	22ff      	movs	r2, #255	; 0xff
 800046e:	801a      	strh	r2, [r3, #0]
	T_Cell_LV_max.CAN_length_dec = 8;
 8000470:	4b35      	ldr	r3, [pc, #212]	; (8000548 <FDCAN_RX_def+0x13c>)
 8000472:	2208      	movs	r2, #8
 8000474:	709a      	strb	r2, [r3, #2]
	T_Cell_LV_max.CAN_id = 0x11;
 8000476:	4b34      	ldr	r3, [pc, #208]	; (8000548 <FDCAN_RX_def+0x13c>)
 8000478:	2211      	movs	r2, #17
 800047a:	609a      	str	r2, [r3, #8]
	T_Cell_LV_max.CAN_startbit = 24;
 800047c:	4b32      	ldr	r3, [pc, #200]	; (8000548 <FDCAN_RX_def+0x13c>)
 800047e:	2218      	movs	r2, #24
 8000480:	731a      	strb	r2, [r3, #12]
	T_Cell_LV_max.Endianness = Motorola;
 8000482:	4b31      	ldr	r3, [pc, #196]	; (8000548 <FDCAN_RX_def+0x13c>)
 8000484:	2200      	movs	r2, #0
 8000486:	735a      	strb	r2, [r3, #13]

	T_Inverter_max.CAN_length = RX_LENGTH8;
 8000488:	4b30      	ldr	r3, [pc, #192]	; (800054c <FDCAN_RX_def+0x140>)
 800048a:	22ff      	movs	r2, #255	; 0xff
 800048c:	801a      	strh	r2, [r3, #0]
	T_Inverter_max.CAN_length_dec = 8;
 800048e:	4b2f      	ldr	r3, [pc, #188]	; (800054c <FDCAN_RX_def+0x140>)
 8000490:	2208      	movs	r2, #8
 8000492:	709a      	strb	r2, [r3, #2]
	T_Inverter_max.CAN_id = 0x10;
 8000494:	4b2d      	ldr	r3, [pc, #180]	; (800054c <FDCAN_RX_def+0x140>)
 8000496:	2210      	movs	r2, #16
 8000498:	609a      	str	r2, [r3, #8]
	T_Inverter_max.CAN_startbit = 32;
 800049a:	4b2c      	ldr	r3, [pc, #176]	; (800054c <FDCAN_RX_def+0x140>)
 800049c:	2220      	movs	r2, #32
 800049e:	731a      	strb	r2, [r3, #12]
	T_Inverter_max.Endianness = Motorola;
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <FDCAN_RX_def+0x140>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	735a      	strb	r2, [r3, #13]

	T_Motor_max.CAN_length = RX_LENGTH8;
 80004a6:	4b2a      	ldr	r3, [pc, #168]	; (8000550 <FDCAN_RX_def+0x144>)
 80004a8:	22ff      	movs	r2, #255	; 0xff
 80004aa:	801a      	strh	r2, [r3, #0]
	T_Motor_max.CAN_length_dec = 8;
 80004ac:	4b28      	ldr	r3, [pc, #160]	; (8000550 <FDCAN_RX_def+0x144>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	709a      	strb	r2, [r3, #2]
	T_Motor_max.CAN_id = 0x10;
 80004b2:	4b27      	ldr	r3, [pc, #156]	; (8000550 <FDCAN_RX_def+0x144>)
 80004b4:	2210      	movs	r2, #16
 80004b6:	609a      	str	r2, [r3, #8]
	T_Motor_max.CAN_startbit = 40;
 80004b8:	4b25      	ldr	r3, [pc, #148]	; (8000550 <FDCAN_RX_def+0x144>)
 80004ba:	2228      	movs	r2, #40	; 0x28
 80004bc:	731a      	strb	r2, [r3, #12]
	T_Motor_max.Endianness = Motorola;
 80004be:	4b24      	ldr	r3, [pc, #144]	; (8000550 <FDCAN_RX_def+0x144>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	735a      	strb	r2, [r3, #13]

	T_Water.CAN_length = RX_LENGTH8;
 80004c4:	4b23      	ldr	r3, [pc, #140]	; (8000554 <FDCAN_RX_def+0x148>)
 80004c6:	22ff      	movs	r2, #255	; 0xff
 80004c8:	801a      	strh	r2, [r3, #0]
	T_Water.CAN_length_dec = 8;
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <FDCAN_RX_def+0x148>)
 80004cc:	2208      	movs	r2, #8
 80004ce:	709a      	strb	r2, [r3, #2]
	T_Water.CAN_id = 0x11;
 80004d0:	4b20      	ldr	r3, [pc, #128]	; (8000554 <FDCAN_RX_def+0x148>)
 80004d2:	2211      	movs	r2, #17
 80004d4:	609a      	str	r2, [r3, #8]
	T_Water.CAN_startbit = 48;
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <FDCAN_RX_def+0x148>)
 80004d8:	2230      	movs	r2, #48	; 0x30
 80004da:	731a      	strb	r2, [r3, #12]
	T_Water.Endianness = Motorola;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <FDCAN_RX_def+0x148>)
 80004de:	2200      	movs	r2, #0
 80004e0:	735a      	strb	r2, [r3, #13]

	TS_State.CAN_length = RX_LENGTH8;
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <FDCAN_RX_def+0x14c>)
 80004e4:	22ff      	movs	r2, #255	; 0xff
 80004e6:	801a      	strh	r2, [r3, #0]
	TS_State.CAN_length_dec = 8;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <FDCAN_RX_def+0x14c>)
 80004ea:	2208      	movs	r2, #8
 80004ec:	709a      	strb	r2, [r3, #2]
	TS_State.CAN_id = 0x10;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <FDCAN_RX_def+0x14c>)
 80004f0:	2210      	movs	r2, #16
 80004f2:	609a      	str	r2, [r3, #8]
	TS_State.CAN_startbit = 56;
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <FDCAN_RX_def+0x14c>)
 80004f6:	2238      	movs	r2, #56	; 0x38
 80004f8:	731a      	strb	r2, [r3, #12]
	TS_State.Endianness = Motorola;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <FDCAN_RX_def+0x14c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	735a      	strb	r2, [r3, #13]

	FDCAN_Data_Rx[0] = &SoC_HV;
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <FDCAN_RX_def+0x150>)
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <FDCAN_RX_def+0x130>)
 8000504:	601a      	str	r2, [r3, #0]
	FDCAN_Data_Rx[1] = &SoC_LV;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <FDCAN_RX_def+0x150>)
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <FDCAN_RX_def+0x134>)
 800050a:	605a      	str	r2, [r3, #4]
	FDCAN_Data_Rx[2] = &T_Cell_HV_max;
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <FDCAN_RX_def+0x150>)
 800050e:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <FDCAN_RX_def+0x138>)
 8000510:	609a      	str	r2, [r3, #8]
	FDCAN_Data_Rx[3] = &T_Cell_LV_max;
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <FDCAN_RX_def+0x150>)
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <FDCAN_RX_def+0x13c>)
 8000516:	60da      	str	r2, [r3, #12]
	FDCAN_Data_Rx[4] = &T_Inverter_max;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <FDCAN_RX_def+0x150>)
 800051a:	4a0c      	ldr	r2, [pc, #48]	; (800054c <FDCAN_RX_def+0x140>)
 800051c:	611a      	str	r2, [r3, #16]
	FDCAN_Data_Rx[5] = &T_Motor_max;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <FDCAN_RX_def+0x150>)
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <FDCAN_RX_def+0x144>)
 8000522:	615a      	str	r2, [r3, #20]
	FDCAN_Data_Rx[6] = &T_Water;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <FDCAN_RX_def+0x150>)
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <FDCAN_RX_def+0x148>)
 8000528:	619a      	str	r2, [r3, #24]
	FDCAN_Data_Rx[7] = &TS_State;
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <FDCAN_RX_def+0x150>)
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <FDCAN_RX_def+0x14c>)
 800052e:	61da      	str	r2, [r3, #28]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	240000e8 	.word	0x240000e8
 8000540:	240000f8 	.word	0x240000f8
 8000544:	24000108 	.word	0x24000108
 8000548:	24000118 	.word	0x24000118
 800054c:	24000128 	.word	0x24000128
 8000550:	24000138 	.word	0x24000138
 8000554:	24000148 	.word	0x24000148
 8000558:	24000158 	.word	0x24000158
 800055c:	240000c8 	.word	0x240000c8

08000560 <FDCAN_TX_def>:
CAN_data_t	Drivemode;
CAN_data_t	FanSpeed;
CAN_data_t	PumpSpeed;

void FDCAN_TX_def()
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
	int i, j;
	Powerlimit.CAN_id = 0x100;
 8000566:	4b5a      	ldr	r3, [pc, #360]	; (80006d0 <FDCAN_TX_def+0x170>)
 8000568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800056c:	609a      	str	r2, [r3, #8]
	Powerlimit.CAN_length = RX_LENGTH8;
 800056e:	4b58      	ldr	r3, [pc, #352]	; (80006d0 <FDCAN_TX_def+0x170>)
 8000570:	22ff      	movs	r2, #255	; 0xff
 8000572:	801a      	strh	r2, [r3, #0]
	Powerlimit.CAN_length_dec = 8;
 8000574:	4b56      	ldr	r3, [pc, #344]	; (80006d0 <FDCAN_TX_def+0x170>)
 8000576:	2208      	movs	r2, #8
 8000578:	709a      	strb	r2, [r3, #2]
	Powerlimit.CAN_startbit = 0;
 800057a:	4b55      	ldr	r3, [pc, #340]	; (80006d0 <FDCAN_TX_def+0x170>)
 800057c:	2200      	movs	r2, #0
 800057e:	731a      	strb	r2, [r3, #12]
	Powerlimit.Endianness = Motorola;
 8000580:	4b53      	ldr	r3, [pc, #332]	; (80006d0 <FDCAN_TX_def+0x170>)
 8000582:	2200      	movs	r2, #0
 8000584:	735a      	strb	r2, [r3, #13]
	Powerlimit.CAN_data = 80;
 8000586:	4b52      	ldr	r3, [pc, #328]	; (80006d0 <FDCAN_TX_def+0x170>)
 8000588:	2250      	movs	r2, #80	; 0x50
 800058a:	809a      	strh	r2, [r3, #4]

	Drivemode.CAN_id = 0x120;
 800058c:	4b51      	ldr	r3, [pc, #324]	; (80006d4 <FDCAN_TX_def+0x174>)
 800058e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000592:	609a      	str	r2, [r3, #8]
	Drivemode.CAN_length = RX_LENGTH8;
 8000594:	4b4f      	ldr	r3, [pc, #316]	; (80006d4 <FDCAN_TX_def+0x174>)
 8000596:	22ff      	movs	r2, #255	; 0xff
 8000598:	801a      	strh	r2, [r3, #0]
	Drivemode.CAN_length_dec = 8;
 800059a:	4b4e      	ldr	r3, [pc, #312]	; (80006d4 <FDCAN_TX_def+0x174>)
 800059c:	2208      	movs	r2, #8
 800059e:	709a      	strb	r2, [r3, #2]
	Drivemode.CAN_startbit = 8;
 80005a0:	4b4c      	ldr	r3, [pc, #304]	; (80006d4 <FDCAN_TX_def+0x174>)
 80005a2:	2208      	movs	r2, #8
 80005a4:	731a      	strb	r2, [r3, #12]
	Drivemode.Endianness = Motorola;
 80005a6:	4b4b      	ldr	r3, [pc, #300]	; (80006d4 <FDCAN_TX_def+0x174>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	735a      	strb	r2, [r3, #13]
	Drivemode.CAN_data = 3;
 80005ac:	4b49      	ldr	r3, [pc, #292]	; (80006d4 <FDCAN_TX_def+0x174>)
 80005ae:	2203      	movs	r2, #3
 80005b0:	809a      	strh	r2, [r3, #4]

	FanSpeed.CAN_id = 0x140;
 80005b2:	4b49      	ldr	r3, [pc, #292]	; (80006d8 <FDCAN_TX_def+0x178>)
 80005b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005b8:	609a      	str	r2, [r3, #8]
	FanSpeed.CAN_length = RX_LENGTH8;
 80005ba:	4b47      	ldr	r3, [pc, #284]	; (80006d8 <FDCAN_TX_def+0x178>)
 80005bc:	22ff      	movs	r2, #255	; 0xff
 80005be:	801a      	strh	r2, [r3, #0]
	FanSpeed.CAN_length_dec = 8;
 80005c0:	4b45      	ldr	r3, [pc, #276]	; (80006d8 <FDCAN_TX_def+0x178>)
 80005c2:	2208      	movs	r2, #8
 80005c4:	709a      	strb	r2, [r3, #2]
	FanSpeed.CAN_startbit = 16;
 80005c6:	4b44      	ldr	r3, [pc, #272]	; (80006d8 <FDCAN_TX_def+0x178>)
 80005c8:	2210      	movs	r2, #16
 80005ca:	731a      	strb	r2, [r3, #12]
	FanSpeed.Endianness = Motorola;
 80005cc:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <FDCAN_TX_def+0x178>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	735a      	strb	r2, [r3, #13]
	FanSpeed.CAN_data = 128;
 80005d2:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <FDCAN_TX_def+0x178>)
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	809a      	strh	r2, [r3, #4]

	PumpSpeed.CAN_id = 0x160;
 80005d8:	4b40      	ldr	r3, [pc, #256]	; (80006dc <FDCAN_TX_def+0x17c>)
 80005da:	f44f 72b0 	mov.w	r2, #352	; 0x160
 80005de:	609a      	str	r2, [r3, #8]
	PumpSpeed.CAN_length = RX_LENGTH8;
 80005e0:	4b3e      	ldr	r3, [pc, #248]	; (80006dc <FDCAN_TX_def+0x17c>)
 80005e2:	22ff      	movs	r2, #255	; 0xff
 80005e4:	801a      	strh	r2, [r3, #0]
	PumpSpeed.CAN_length_dec = 8;
 80005e6:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <FDCAN_TX_def+0x17c>)
 80005e8:	2208      	movs	r2, #8
 80005ea:	709a      	strb	r2, [r3, #2]
	PumpSpeed.CAN_startbit = 24;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <FDCAN_TX_def+0x17c>)
 80005ee:	2218      	movs	r2, #24
 80005f0:	731a      	strb	r2, [r3, #12]
	PumpSpeed.Endianness = Motorola;
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <FDCAN_TX_def+0x17c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	735a      	strb	r2, [r3, #13]
	PumpSpeed.CAN_data = 64;
 80005f8:	4b38      	ldr	r3, [pc, #224]	; (80006dc <FDCAN_TX_def+0x17c>)
 80005fa:	2240      	movs	r2, #64	; 0x40
 80005fc:	809a      	strh	r2, [r3, #4]

	for(i=0; i<FDCAN_TX_MSG; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	e050      	b.n	80006a6 <FDCAN_TX_def+0x146>
	{
		FDCAN_Tx_Bank[i].TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 8000604:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <FDCAN_TX_def+0x180>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	011b      	lsls	r3, r3, #4
 800060a:	4413      	add	r3, r2
 800060c:	3308      	adds	r3, #8
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000614:	60da      	str	r2, [r3, #12]
		FDCAN_Tx_Bank[i].TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 8000616:	4a32      	ldr	r2, [pc, #200]	; (80006e0 <FDCAN_TX_def+0x180>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	011b      	lsls	r3, r3, #4
 800061c:	4413      	add	r3, r2
 800061e:	3308      	adds	r3, #8
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
		FDCAN_Tx_Bank[i].TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 8000626:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <FDCAN_TX_def+0x180>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	4413      	add	r3, r2
 800062e:	3308      	adds	r3, #8
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
		FDCAN_Tx_Bank[i].TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000636:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <FDCAN_TX_def+0x180>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	4413      	add	r3, r2
 800063e:	3308      	adds	r3, #8
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
		FDCAN_Tx_Bank[i].TxHeader->FDFormat = FDCAN_FD_CAN;
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <FDCAN_TX_def+0x180>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4413      	add	r3, r2
 800064e:	3308      	adds	r3, #8
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000656:	619a      	str	r2, [r3, #24]
		FDCAN_Tx_Bank[i].TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <FDCAN_TX_def+0x180>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	4413      	add	r3, r2
 8000660:	3308      	adds	r3, #8
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
		FDCAN_Tx_Bank[i].TxHeader->MessageMarker = 0;
 8000668:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <FDCAN_TX_def+0x180>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	011b      	lsls	r3, r3, #4
 800066e:	4413      	add	r3, r2
 8000670:	3308      	adds	r3, #8
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
		FDCAN_Tx_Bank[i].TxHeader->IdType = FDCAN_STANDARD_ID;
 8000678:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <FDCAN_TX_def+0x180>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	011b      	lsls	r3, r3, #4
 800067e:	4413      	add	r3, r2
 8000680:	3308      	adds	r3, #8
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
		FDCAN_Tx_Bank[i].TxHeader->Identifier = tx_id_list[i];
 8000688:	4a16      	ldr	r2, [pc, #88]	; (80006e4 <FDCAN_TX_def+0x184>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <FDCAN_TX_def+0x180>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	011b      	lsls	r3, r3, #4
 8000696:	4413      	add	r3, r2
 8000698:	3308      	adds	r3, #8
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	460a      	mov	r2, r1
 800069e:	601a      	str	r2, [r3, #0]
	for(i=0; i<FDCAN_TX_MSG; i++)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3301      	adds	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	ddab      	ble.n	8000604 <FDCAN_TX_def+0xa4>
	}

	CANdata[0] = &Powerlimit;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <FDCAN_TX_def+0x188>)
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <FDCAN_TX_def+0x170>)
 80006b0:	601a      	str	r2, [r3, #0]
	CANdata[1] = &Drivemode;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <FDCAN_TX_def+0x188>)
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <FDCAN_TX_def+0x174>)
 80006b6:	605a      	str	r2, [r3, #4]
	CANdata[2] = &FanSpeed;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <FDCAN_TX_def+0x188>)
 80006ba:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <FDCAN_TX_def+0x178>)
 80006bc:	609a      	str	r2, [r3, #8]
	CANdata[3] = &PumpSpeed;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <FDCAN_TX_def+0x188>)
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <FDCAN_TX_def+0x17c>)
 80006c2:	60da      	str	r2, [r3, #12]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	240001b8 	.word	0x240001b8
 80006d4:	240001c8 	.word	0x240001c8
 80006d8:	240001d8 	.word	0x240001d8
 80006dc:	240001e8 	.word	0x240001e8
 80006e0:	24000178 	.word	0x24000178
 80006e4:	2400000c 	.word	0x2400000c
 80006e8:	24000168 	.word	0x24000168

080006ec <MX_TIM15_Init>:

osThreadId_t id_task_timer;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0


	uint32_t prescaler, frequency;

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]

  frequency = 2 * HAL_RCC_GetPCLK2Freq();
 800070a:	f003 febb 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 800070e:	4603      	mov	r3, r0
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	627b      	str	r3, [r7, #36]	; 0x24

  //To get the frequency down to 1 MHz it needs to be divided by 1000000 and - 1 because of digital stuff

  prescaler = (uint32_t)((frequency / 1000000U) - 1U);
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_TIM15_Init+0xb8>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0c9b      	lsrs	r3, r3, #18
 800071e:	3b01      	subs	r3, #1
 8000720:	623b      	str	r3, [r7, #32]

  //With 1 MHz we have a Period of 1000000/<Period in us> -1

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_TIM15_Init+0xbc>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_TIM15_Init+0xc0>)
 8000726:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = prescaler;
 8000728:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <MX_TIM15_Init+0xbc>)
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	6053      	str	r3, [r2, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_TIM15_Init+0xbc>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = (1000000U/1000U) - 1U;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_TIM15_Init+0xbc>)
 8000736:	f240 32e7 	movw	r2, #999	; 0x3e7
 800073a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_TIM15_Init+0xbc>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_TIM15_Init+0xbc>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_TIM15_Init+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800074e:	4816      	ldr	r0, [pc, #88]	; (80007a8 <MX_TIM15_Init+0xbc>)
 8000750:	f005 fa5e 	bl	8005c10 <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM15_Init+0x72>
  {
    Error_Handler();
 800075a:	f001 f871 	bl	8001840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	480f      	ldr	r0, [pc, #60]	; (80007a8 <MX_TIM15_Init+0xbc>)
 800076c:	f005 fc40 	bl	8005ff0 <HAL_TIM_ConfigClockSource>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8000776:	f001 f863 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <MX_TIM15_Init+0xbc>)
 8000788:	f005 fe8a 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 8000792:	f001 f855 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  HAL_TIM_Base_Start_IT(&htim15);
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_TIM15_Init+0xbc>)
 8000798:	f005 fa92 	bl	8005cc0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM15_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	431bde83 	.word	0x431bde83
 80007a8:	240001f8 	.word	0x240001f8
 80007ac:	40014000 	.word	0x40014000

080007b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

	  if(tim_baseHandle->Instance==TIM15)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_TIM_Base_MspInit+0x48>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d116      	bne.n	80007f0 <HAL_TIM_Base_MspInit+0x40>
	  {
	    __HAL_RCC_TIM15_CLK_ENABLE();
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_TIM_Base_MspInit+0x4c>)
 80007c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <HAL_TIM_Base_MspInit+0x4c>)
 80007ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_TIM_Base_MspInit+0x4c>)
 80007d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
	    HAL_NVIC_SetPriority(TIM15_IRQn, 5, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2105      	movs	r1, #5
 80007e4:	2074      	movs	r0, #116	; 0x74
 80007e6:	f001 fa25 	bl	8001c34 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80007ea:	2074      	movs	r0, #116	; 0x74
 80007ec:	f001 fa3c 	bl	8001c68 <HAL_NVIC_EnableIRQ>
	  }
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40014000 	.word	0x40014000
 80007fc:	58024400 	.word	0x58024400

08000800 <Task_Timer>:
    HAL_NVIC_DisableIRQ(TIM15_IRQn);
  }
}

void Task_Timer(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	static uint16_t msg;

	while(1)
	{
		osThreadFlagsWait(FLAG_TIMER_TICK,osFlagsWaitAll,osWaitForever);
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	2101      	movs	r1, #1
 800080a:	2010      	movs	r0, #16
 800080c:	f006 f88c 	bl	8006928 <osThreadFlagsWait>
		Timer_ms++;
 8000810:	4b65      	ldr	r3, [pc, #404]	; (80009a8 <Task_Timer+0x1a8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	4a64      	ldr	r2, [pc, #400]	; (80009a8 <Task_Timer+0x1a8>)
 8000818:	6013      	str	r3, [r2, #0]
		CAN_RX_Delay++;
 800081a:	4b64      	ldr	r3, [pc, #400]	; (80009ac <Task_Timer+0x1ac>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b62      	ldr	r3, [pc, #392]	; (80009ac <Task_Timer+0x1ac>)
 8000824:	801a      	strh	r2, [r3, #0]

		if(CAN_RX_Delay>50000){			//Necessary because the CAN delay should not come back to 0 after 65 535, all output should stay in fault time mode
 8000826:	4b61      	ldr	r3, [pc, #388]	; (80009ac <Task_Timer+0x1ac>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800082e:	4293      	cmp	r3, r2
 8000830:	d903      	bls.n	800083a <Task_Timer+0x3a>
			CAN_RX_Delay=50000;
 8000832:	4b5e      	ldr	r3, [pc, #376]	; (80009ac <Task_Timer+0x1ac>)
 8000834:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000838:	801a      	strh	r2, [r3, #0]
		}

		if(Timer_ms%PER_200hz==0){
 800083a:	4b5b      	ldr	r3, [pc, #364]	; (80009a8 <Task_Timer+0x1a8>)
 800083c:	6819      	ldr	r1, [r3, #0]
 800083e:	4b5c      	ldr	r3, [pc, #368]	; (80009b0 <Task_Timer+0x1b0>)
 8000840:	fba3 2301 	umull	r2, r3, r3, r1
 8000844:	089a      	lsrs	r2, r3, #2
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	1aca      	subs	r2, r1, r3
 800084e:	2a00      	cmp	r2, #0
 8000850:	d109      	bne.n	8000866 <Task_Timer+0x66>
		msg = 200;
 8000852:	4b58      	ldr	r3, [pc, #352]	; (80009b4 <Task_Timer+0x1b4>)
 8000854:	22c8      	movs	r2, #200	; 0xc8
 8000856:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(CAN_Q,&msg,1,0);
 8000858:	4b57      	ldr	r3, [pc, #348]	; (80009b8 <Task_Timer+0x1b8>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	2300      	movs	r3, #0
 800085e:	2201      	movs	r2, #1
 8000860:	4954      	ldr	r1, [pc, #336]	; (80009b4 <Task_Timer+0x1b4>)
 8000862:	f006 f971 	bl	8006b48 <osMessageQueuePut>
		}

		if(Timer_ms%PER_100hz==0){
 8000866:	4b50      	ldr	r3, [pc, #320]	; (80009a8 <Task_Timer+0x1a8>)
 8000868:	6819      	ldr	r1, [r3, #0]
 800086a:	4b51      	ldr	r3, [pc, #324]	; (80009b0 <Task_Timer+0x1b0>)
 800086c:	fba3 2301 	umull	r2, r3, r3, r1
 8000870:	08da      	lsrs	r2, r3, #3
 8000872:	4613      	mov	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	1aca      	subs	r2, r1, r3
 800087c:	2a00      	cmp	r2, #0
 800087e:	d109      	bne.n	8000894 <Task_Timer+0x94>
		msg = 100;
 8000880:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <Task_Timer+0x1b4>)
 8000882:	2264      	movs	r2, #100	; 0x64
 8000884:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(CAN_Q,&msg,1,0);
 8000886:	4b4c      	ldr	r3, [pc, #304]	; (80009b8 <Task_Timer+0x1b8>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	2201      	movs	r2, #1
 800088e:	4949      	ldr	r1, [pc, #292]	; (80009b4 <Task_Timer+0x1b4>)
 8000890:	f006 f95a 	bl	8006b48 <osMessageQueuePut>
		}

		if(Timer_ms%PER_50hz==0){
 8000894:	4b44      	ldr	r3, [pc, #272]	; (80009a8 <Task_Timer+0x1a8>)
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <Task_Timer+0x1b0>)
 800089a:	fba3 2301 	umull	r2, r3, r3, r1
 800089e:	091a      	lsrs	r2, r3, #4
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	1aca      	subs	r2, r1, r3
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d109      	bne.n	80008c2 <Task_Timer+0xc2>
		msg = 50;
 80008ae:	4b41      	ldr	r3, [pc, #260]	; (80009b4 <Task_Timer+0x1b4>)
 80008b0:	2232      	movs	r2, #50	; 0x32
 80008b2:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(CAN_Q,&msg,1,0);
 80008b4:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <Task_Timer+0x1b8>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	2300      	movs	r3, #0
 80008ba:	2201      	movs	r2, #1
 80008bc:	493d      	ldr	r1, [pc, #244]	; (80009b4 <Task_Timer+0x1b4>)
 80008be:	f006 f943 	bl	8006b48 <osMessageQueuePut>
		}

		if(Timer_ms%PER_20hz==0){
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <Task_Timer+0x1a8>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <Task_Timer+0x1bc>)
 80008c8:	fba3 1302 	umull	r1, r3, r3, r2
 80008cc:	091b      	lsrs	r3, r3, #4
 80008ce:	2132      	movs	r1, #50	; 0x32
 80008d0:	fb01 f303 	mul.w	r3, r1, r3
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d109      	bne.n	80008ee <Task_Timer+0xee>
		msg = 20;
 80008da:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <Task_Timer+0x1b4>)
 80008dc:	2214      	movs	r2, #20
 80008de:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(CAN_Q,&msg,1,0);
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <Task_Timer+0x1b8>)
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	2300      	movs	r3, #0
 80008e6:	2201      	movs	r2, #1
 80008e8:	4932      	ldr	r1, [pc, #200]	; (80009b4 <Task_Timer+0x1b4>)
 80008ea:	f006 f92d 	bl	8006b48 <osMessageQueuePut>
		}

		if(Timer_ms%PER_10hz==0){
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <Task_Timer+0x1a8>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <Task_Timer+0x1bc>)
 80008f4:	fba3 1302 	umull	r1, r3, r3, r2
 80008f8:	095b      	lsrs	r3, r3, #5
 80008fa:	2164      	movs	r1, #100	; 0x64
 80008fc:	fb01 f303 	mul.w	r3, r1, r3
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d109      	bne.n	800091a <Task_Timer+0x11a>
		msg = 10;
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <Task_Timer+0x1b4>)
 8000908:	220a      	movs	r2, #10
 800090a:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(CAN_Q,&msg,1,0);
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <Task_Timer+0x1b8>)
 800090e:	6818      	ldr	r0, [r3, #0]
 8000910:	2300      	movs	r3, #0
 8000912:	2201      	movs	r2, #1
 8000914:	4927      	ldr	r1, [pc, #156]	; (80009b4 <Task_Timer+0x1b4>)
 8000916:	f006 f917 	bl	8006b48 <osMessageQueuePut>
		}

		if(Timer_ms%PER_5hz==0){
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <Task_Timer+0x1a8>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <Task_Timer+0x1bc>)
 8000920:	fba3 1302 	umull	r1, r3, r3, r2
 8000924:	099b      	lsrs	r3, r3, #6
 8000926:	21c8      	movs	r1, #200	; 0xc8
 8000928:	fb01 f303 	mul.w	r3, r1, r3
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d109      	bne.n	8000946 <Task_Timer+0x146>
		msg = 5;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <Task_Timer+0x1b4>)
 8000934:	2205      	movs	r2, #5
 8000936:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(CAN_Q,&msg,1,0);
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <Task_Timer+0x1b8>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2201      	movs	r2, #1
 8000940:	491c      	ldr	r1, [pc, #112]	; (80009b4 <Task_Timer+0x1b4>)
 8000942:	f006 f901 	bl	8006b48 <osMessageQueuePut>
		}

		if(Timer_ms%PER_2hz==0){
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <Task_Timer+0x1a8>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <Task_Timer+0x1c0>)
 800094c:	fba3 1302 	umull	r1, r3, r3, r2
 8000950:	095b      	lsrs	r3, r3, #5
 8000952:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000956:	fb01 f303 	mul.w	r3, r1, r3
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d109      	bne.n	8000974 <Task_Timer+0x174>
		msg = 2;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <Task_Timer+0x1b4>)
 8000962:	2202      	movs	r2, #2
 8000964:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(CAN_Q,&msg,1,0);
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <Task_Timer+0x1b8>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	2300      	movs	r3, #0
 800096c:	2201      	movs	r2, #1
 800096e:	4911      	ldr	r1, [pc, #68]	; (80009b4 <Task_Timer+0x1b4>)
 8000970:	f006 f8ea 	bl	8006b48 <osMessageQueuePut>
		}

		if(Timer_ms%PER_1hz==0){
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <Task_Timer+0x1a8>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <Task_Timer+0x1c0>)
 800097a:	fba3 1302 	umull	r1, r3, r3, r2
 800097e:	099b      	lsrs	r3, r3, #6
 8000980:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000984:	fb01 f303 	mul.w	r3, r1, r3
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	f47f af3a 	bne.w	8000804 <Task_Timer+0x4>
		msg = 1;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <Task_Timer+0x1b4>)
 8000992:	2201      	movs	r2, #1
 8000994:	801a      	strh	r2, [r3, #0]
		osMessageQueuePut(CAN_Q,&msg,1,0);
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <Task_Timer+0x1b8>)
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	2300      	movs	r3, #0
 800099c:	2201      	movs	r2, #1
 800099e:	4905      	ldr	r1, [pc, #20]	; (80009b4 <Task_Timer+0x1b4>)
 80009a0:	f006 f8d2 	bl	8006b48 <osMessageQueuePut>
		osThreadFlagsWait(FLAG_TIMER_TICK,osFlagsWaitAll,osWaitForever);
 80009a4:	e72e      	b.n	8000804 <Task_Timer+0x4>
 80009a6:	bf00      	nop
 80009a8:	24000244 	.word	0x24000244
 80009ac:	24000248 	.word	0x24000248
 80009b0:	cccccccd 	.word	0xcccccccd
 80009b4:	24000250 	.word	0x24000250
 80009b8:	240002fc 	.word	0x240002fc
 80009bc:	51eb851f 	.word	0x51eb851f
 80009c0:	10624dd3 	.word	0x10624dd3

080009c4 <TIM15_IRQHandler>:
		}
	}
}

void TIM15_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	osThreadFlagsSet(id_task_timer, FLAG_TIMER_TICK);
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <TIM15_IRQHandler+0x1c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2110      	movs	r1, #16
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 ff5c 	bl	800688c <osThreadFlagsSet>
	HAL_TIM_IRQHandler(&htim15);
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <TIM15_IRQHandler+0x20>)
 80009d6:	f005 f9eb 	bl	8005db0 <HAL_TIM_IRQHandler>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2400024c 	.word	0x2400024c
 80009e4:	240001f8 	.word	0x240001f8

080009e8 <MX_FDCAN1_Init>:
osMessageQueueId_t CAN_RX_Q;


/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0b8      	sub	sp, #224	; 0xe0
 80009ec:	af00      	add	r7, sp, #0
  FDCAN_TX_def();
 80009ee:	f7ff fdb7 	bl	8000560 <FDCAN_TX_def>
  FDCAN_RX_def();
 80009f2:	f7ff fd0b 	bl	800040c <FDCAN_RX_def>

  hfdcan1.Instance = FDCAN1;
 80009f6:	4b73      	ldr	r3, [pc, #460]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 80009f8:	4a73      	ldr	r2, [pc, #460]	; (8000bc8 <MX_FDCAN1_Init+0x1e0>)
 80009fa:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009fc:	4b71      	ldr	r3, [pc, #452]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a02:	4b70      	ldr	r3, [pc, #448]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a08:	4b6e      	ldr	r3, [pc, #440]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a0e:	4b6d      	ldr	r3, [pc, #436]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a14:	4b6b      	ldr	r3, [pc, #428]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000a1a:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8000a20:	4b68      	ldr	r3, [pc, #416]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a22:	2207      	movs	r2, #7
 8000a24:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 18;
 8000a26:	4b67      	ldr	r3, [pc, #412]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a28:	2212      	movs	r2, #18
 8000a2a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 8000a2c:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a2e:	2206      	movs	r2, #6
 8000a30:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000a32:	4b64      	ldr	r3, [pc, #400]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 6;
 8000a38:	4b62      	ldr	r3, [pc, #392]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a3a:	2206      	movs	r2, #6
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 8000a3e:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a40:	2212      	movs	r2, #18
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 6;
 8000a44:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a46:	2206      	movs	r2, #6
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = FDCAN_RX_MSG;
 8000a50:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a56:	4b5b      	ldr	r3, [pc, #364]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000a5c:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a62:	4b58      	ldr	r3, [pc, #352]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 8000a68:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a6e:	4b55      	ldr	r3, [pc, #340]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a70:	2204      	movs	r2, #4
 8000a72:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a74:	4b53      	ldr	r3, [pc, #332]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a80:	4b50      	ldr	r3, [pc, #320]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a86:	4b4f      	ldr	r3, [pc, #316]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = FDCAN_TX_MSG;
 8000a8c:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a92:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a98:	4b4a      	ldr	r3, [pc, #296]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	669a      	str	r2, [r3, #104]	; 0x68

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	22c0      	movs	r2, #192	; 0xc0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f009 f916 	bl	8009ce8 <memset>

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000abc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ac0:	f04f 0300 	mov.w	r3, #0
 8000ac4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000ac8:	2305      	movs	r3, #5
 8000aca:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000acc:	2350      	movs	r3, #80	; 0x50
 8000ace:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 80;
 8000ad0:	2350      	movs	r3, #80	; 0x50
 8000ad2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000ae8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000aec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fd1e 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_FDCAN1_Init+0x11a>
  {
    Error_Handler();
 8000afe:	f000 fe9f 	bl	8001840 <Error_Handler>
  }

  /* FDCAN1 clock enable */
  __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b02:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <MX_FDCAN1_Init+0x1e4>)
 8000b04:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b08:	4a30      	ldr	r2, [pc, #192]	; (8000bcc <MX_FDCAN1_Init+0x1e4>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000b12:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <MX_FDCAN1_Init+0x1e4>)
 8000b14:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <MX_FDCAN1_Init+0x1e4>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a29      	ldr	r2, [pc, #164]	; (8000bcc <MX_FDCAN1_Init+0x1e4>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <MX_FDCAN1_Init+0x1e4>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /**FDCAN1 GPIO Configuration
  PH14     ------> FDCAN1_RX
  PH13     ------> FDCAN1_TX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8000b3e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b58:	2309      	movs	r3, #9
 8000b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b62:	4619      	mov	r1, r3
 8000b64:	481a      	ldr	r0, [pc, #104]	; (8000bd0 <MX_FDCAN1_Init+0x1e8>)
 8000b66:	f002 fa95 	bl	8003094 <HAL_GPIO_Init>

  /* FDCAN1 interrupt Init */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	2013      	movs	r0, #19
 8000b70:	f001 f860 	bl	8001c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b74:	2013      	movs	r0, #19
 8000b76:	f001 f877 	bl	8001c68 <HAL_NVIC_EnableIRQ>

  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b7a:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000b7c:	f001 f882 	bl	8001c84 <HAL_FDCAN_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_FDCAN1_Init+0x1a2>
  {
    Error_Handler();
 8000b86:	f000 fe5b 	bl	8001840 <Error_Handler>
  }

	/* Transmit complete interrupt */
	__HAL_FDCAN_ENABLE_IT(&hfdcan1,FDCAN_IE_TCE);
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b98:	655a      	str	r2, [r3, #84]	; 0x54
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_FDCAN1_Init+0x1ec>)
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <MX_FDCAN1_Init+0x1ec>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	6153      	str	r3, [r2, #20]

	/* error interrupt */
	__HAL_FDCAN_ENABLE_IT(&hfdcan1, FDCAN_IE_EPE);
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_FDCAN1_Init+0x1dc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000bb0:	655a      	str	r2, [r3, #84]	; 0x54
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_FDCAN1_Init+0x1ec>)
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <MX_FDCAN1_Init+0x1ec>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	6153      	str	r3, [r2, #20]

}
 8000bba:	bf00      	nop
 8000bbc:	37e0      	adds	r7, #224	; 0xe0
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	24000254 	.word	0x24000254
 8000bc8:	4000a000 	.word	0x4000a000
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58021c00 	.word	0x58021c00
 8000bd4:	4000a800 	.word	0x4000a800

08000bd8 <FDCAN_RX_Init>:

/* USER CODE BEGIN 1 */

void FDCAN_RX_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af02      	add	r7, sp, #8
	//Only accept the Messages defined in rx_id_list
	int i, pos_filter;
	uint8_t y=0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FDCAN_FilterTypeDef sFilterConfig;

	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIndex =0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 8000bec:	2301      	movs	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
	sFilterConfig.RxBufferIndex = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]

	for(i=0;(i<FDCAN_RX_MSG);i++){
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bfc:	e033      	b.n	8000c66 <FDCAN_RX_Init+0x8e>

			switch(pos_filter)
 8000bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <FDCAN_RX_Init+0x34>
 8000c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d008      	beq.n	8000c1c <FDCAN_RX_Init+0x44>
 8000c0a:	e029      	b.n	8000c60 <FDCAN_RX_Init+0x88>
			{
				case 0:
					sFilterConfig.FilterID1 = rx_id_list[i];
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <FDCAN_RX_Init+0xf4>)
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c14:	617b      	str	r3, [r7, #20]
					pos_filter=1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
					break;
 8000c1a:	e021      	b.n	8000c60 <FDCAN_RX_Init+0x88>

				case 1:
					sFilterConfig.FilterID2 = rx_id_list[i];
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <FDCAN_RX_Init+0xf4>)
 8000c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c24:	61bb      	str	r3, [r7, #24]

					HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4829      	ldr	r0, [pc, #164]	; (8000cd0 <FDCAN_RX_Init+0xf8>)
 8000c2c:	f001 fa12 	bl	8002054 <HAL_FDCAN_ConfigFilter>
					sFilterConfig.FilterIndex++;
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
				  if(y==1){
 8000c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d104      	bne.n	8000c48 <FDCAN_RX_Init+0x70>
					sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
					y=0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
					if(y==0){
 8000c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d104      	bne.n	8000c5a <FDCAN_RX_Init+0x82>
					sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000c50:	2302      	movs	r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
					y=1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
					pos_filter=0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
					break;
 8000c5e:	bf00      	nop
	for(i=0;(i<FDCAN_RX_MSG);i++){
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	3301      	adds	r3, #1
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	ddc8      	ble.n	8000bfe <FDCAN_RX_Init+0x26>
			}

		}

	if(pos_filter==1){
 8000c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d106      	bne.n	8000c80 <FDCAN_RX_Init+0xa8>
		sFilterConfig.FilterID2 = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
		HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4815      	ldr	r0, [pc, #84]	; (8000cd0 <FDCAN_RX_Init+0xf8>)
 8000c7c:	f001 f9ea 	bl	8002054 <HAL_FDCAN_ConfigFilter>
	}

	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2101      	movs	r1, #1
 8000c84:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <FDCAN_RX_Init+0xf8>)
 8000c86:	f001 fc7d 	bl	8002584 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <FDCAN_RX_Init+0xf8>)
 8000c90:	f001 fc78 	bl	8002584 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000c94:	2301      	movs	r3, #1
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <FDCAN_RX_Init+0xf8>)
 8000ca0:	f001 fa4e 	bl	8002140 <HAL_FDCAN_ConfigGlobalFilter>
	HAL_FDCAN_Start(&hfdcan1);
 8000ca4:	480a      	ldr	r0, [pc, #40]	; (8000cd0 <FDCAN_RX_Init+0xf8>)
 8000ca6:	f001 fa78 	bl	800219a <HAL_FDCAN_Start>

	osThreadFlagsSet(id_task_CAN_TX, FLAG_CANTX_CONFIG_READY);
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <FDCAN_RX_Init+0xfc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2104      	movs	r1, #4
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f005 fdeb 	bl	800688c <osThreadFlagsSet>
	osThreadFlagsSet(id_task_CAN_RX, FLAG_CANRX_CONFIG_READY);
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <FDCAN_RX_Init+0x100>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f005 fde5 	bl	800688c <osThreadFlagsSet>


}
 8000cc2:	bf00      	nop
 8000cc4:	3730      	adds	r7, #48	; 0x30
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	24000008 	.word	0x24000008
 8000cd0:	24000254 	.word	0x24000254
 8000cd4:	240002f4 	.word	0x240002f4
 8000cd8:	240002f8 	.word	0x240002f8

08000cdc <FDCAN_Transmit>:
	HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE);
	HAL_FDCAN_DeactivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE);
}

void FDCAN_Transmit(FDCAN_HandleTypeDef* hdfcan, uint32_t CAN_ID)
{
 8000cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ce0:	b093      	sub	sp, #76	; 0x4c
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
	FDCAN_TxHeaderTypeDef HeaderTX;

	HeaderTX.DataLength = FDCAN_DLC_BYTES_8;
 8000ce8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000cec:	6239      	str	r1, [r7, #32]
	HeaderTX.TxFrameType = FDCAN_DATA_FRAME;
 8000cee:	2100      	movs	r1, #0
 8000cf0:	61f9      	str	r1, [r7, #28]
	HeaderTX.BitRateSwitch = FDCAN_BRS_OFF;
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	62b9      	str	r1, [r7, #40]	; 0x28
	HeaderTX.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	6279      	str	r1, [r7, #36]	; 0x24
	HeaderTX.FDFormat = FDCAN_FD_CAN;
 8000cfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000cfe:	62f9      	str	r1, [r7, #44]	; 0x2c
	HeaderTX.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000d00:	2100      	movs	r1, #0
 8000d02:	6339      	str	r1, [r7, #48]	; 0x30
	HeaderTX.MessageMarker = 0;
 8000d04:	2100      	movs	r1, #0
 8000d06:	6379      	str	r1, [r7, #52]	; 0x34

	if (CAN_ID < 0xFFF)
 8000d08:	6839      	ldr	r1, [r7, #0]
 8000d0a:	f640 70fe 	movw	r0, #4094	; 0xffe
 8000d0e:	4281      	cmp	r1, r0
 8000d10:	d804      	bhi.n	8000d1c <FDCAN_Transmit+0x40>
	{
		HeaderTX.IdType = FDCAN_STANDARD_ID;
 8000d12:	2100      	movs	r1, #0
 8000d14:	61b9      	str	r1, [r7, #24]
		HeaderTX.Identifier = CAN_ID;
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	6179      	str	r1, [r7, #20]
 8000d1a:	e008      	b.n	8000d2e <FDCAN_Transmit+0x52>
		}
	else if (CAN_ID > 0xFFF)
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8000d22:	d304      	bcc.n	8000d2e <FDCAN_Transmit+0x52>
	{
		HeaderTX.IdType = FDCAN_EXTENDED_ID;
 8000d24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d28:	61b9      	str	r1, [r7, #24]
		HeaderTX.Identifier = CAN_ID;
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	6179      	str	r1, [r7, #20]
	}

	uint8_t Data[8];

	uint64_t Temp_val = 0;
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	f04f 0100 	mov.w	r1, #0
 8000d36:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

	int i;

	for(i=0;i<DATANb;i++)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000d3e:	e084      	b.n	8000e4a <FDCAN_Transmit+0x16e>
	{
		if(CANdata[i]->CAN_id == HeaderTX.Identifier)
 8000d40:	4872      	ldr	r0, [pc, #456]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000d42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d44:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000d48:	6888      	ldr	r0, [r1, #8]
 8000d4a:	6979      	ldr	r1, [r7, #20]
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	d179      	bne.n	8000e44 <FDCAN_Transmit+0x168>
		{

			if(((CANdata[i]->Endianness) == Intel)&&(CANdata[i]->CAN_length_dec>8)){
 8000d50:	486e      	ldr	r0, [pc, #440]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000d52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d54:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000d58:	7b49      	ldrb	r1, [r1, #13]
 8000d5a:	2901      	cmp	r1, #1
 8000d5c:	d13e      	bne.n	8000ddc <FDCAN_Transmit+0x100>
 8000d5e:	486b      	ldr	r0, [pc, #428]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d62:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000d66:	7889      	ldrb	r1, [r1, #2]
 8000d68:	2908      	cmp	r1, #8
 8000d6a:	d937      	bls.n	8000ddc <FDCAN_Transmit+0x100>

			uint16_t temp = CANdata[i]->CAN_data;
 8000d6c:	4867      	ldr	r0, [pc, #412]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000d6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d70:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000d74:	8889      	ldrh	r1, [r1, #4]
 8000d76:	8779      	strh	r1, [r7, #58]	; 0x3a
			(CANdata[i]->CAN_data) = (((CANdata[i]->CAN_data)>>((CANdata[i]->CAN_length_dec)-8))&0x00FF);
 8000d78:	4864      	ldr	r0, [pc, #400]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000d7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d7c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000d80:	8889      	ldrh	r1, [r1, #4]
 8000d82:	460e      	mov	r6, r1
 8000d84:	4861      	ldr	r0, [pc, #388]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000d86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d88:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000d8c:	7889      	ldrb	r1, [r1, #2]
 8000d8e:	3908      	subs	r1, #8
 8000d90:	fa46 f101 	asr.w	r1, r6, r1
 8000d94:	b28e      	uxth	r6, r1
 8000d96:	485d      	ldr	r0, [pc, #372]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000d98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d9a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000d9e:	b2f0      	uxtb	r0, r6
 8000da0:	b280      	uxth	r0, r0
 8000da2:	8088      	strh	r0, [r1, #4]
			(CANdata[i]->CAN_data) |= ((temp<<8)&CANdata[i]->CAN_length);
 8000da4:	4859      	ldr	r0, [pc, #356]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000da6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000da8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000dac:	8889      	ldrh	r1, [r1, #4]
 8000dae:	fa0f fc81 	sxth.w	ip, r1
 8000db2:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000db4:	0209      	lsls	r1, r1, #8
 8000db6:	b20e      	sxth	r6, r1
 8000db8:	4954      	ldr	r1, [pc, #336]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000dba:	4608      	mov	r0, r1
 8000dbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000dbe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000dc2:	8809      	ldrh	r1, [r1, #0]
 8000dc4:	b209      	sxth	r1, r1
 8000dc6:	4031      	ands	r1, r6
 8000dc8:	b209      	sxth	r1, r1
 8000dca:	ea41 010c 	orr.w	r1, r1, ip
 8000dce:	b20e      	sxth	r6, r1
 8000dd0:	484e      	ldr	r0, [pc, #312]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000dd4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000dd8:	b2b0      	uxth	r0, r6
 8000dda:	8088      	strh	r0, [r1, #4]

			}
		Temp_val |= ((uint64_t)((CANdata[i]->CAN_data)&CANdata[i]->CAN_length)<<(63-CANdata[i]->CAN_startbit-(CANdata[i]->CAN_length_dec-1)));
 8000ddc:	484b      	ldr	r0, [pc, #300]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000dde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000de0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000de4:	8888      	ldrh	r0, [r1, #4]
 8000de6:	4e49      	ldr	r6, [pc, #292]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000de8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000dea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8000dee:	8809      	ldrh	r1, [r1, #0]
 8000df0:	4001      	ands	r1, r0
 8000df2:	b289      	uxth	r1, r1
 8000df4:	b289      	uxth	r1, r1
 8000df6:	2000      	movs	r0, #0
 8000df8:	460c      	mov	r4, r1
 8000dfa:	4605      	mov	r5, r0
 8000dfc:	4843      	ldr	r0, [pc, #268]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000e00:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000e04:	7b09      	ldrb	r1, [r1, #12]
 8000e06:	f1c1 003f 	rsb	r0, r1, #63	; 0x3f
 8000e0a:	4e40      	ldr	r6, [pc, #256]	; (8000f0c <FDCAN_Transmit+0x230>)
 8000e0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000e0e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8000e12:	7889      	ldrb	r1, [r1, #2]
 8000e14:	3901      	subs	r1, #1
 8000e16:	1a41      	subs	r1, r0, r1
 8000e18:	f1a1 0620 	sub.w	r6, r1, #32
 8000e1c:	f1c1 0020 	rsb	r0, r1, #32
 8000e20:	fa05 f301 	lsl.w	r3, r5, r1
 8000e24:	fa04 f606 	lsl.w	r6, r4, r6
 8000e28:	4333      	orrs	r3, r6
 8000e2a:	fa24 f000 	lsr.w	r0, r4, r0
 8000e2e:	4303      	orrs	r3, r0
 8000e30:	fa04 f201 	lsl.w	r2, r4, r1
 8000e34:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000e38:	ea40 0802 	orr.w	r8, r0, r2
 8000e3c:	ea41 0903 	orr.w	r9, r1, r3
 8000e40:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
	for(i=0;i<DATANb;i++)
 8000e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000e46:	3101      	adds	r1, #1
 8000e48:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000e4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000e4c:	2903      	cmp	r1, #3
 8000e4e:	f77f af77 	ble.w	8000d40 <FDCAN_Transmit+0x64>

		}
	}

	Data[7] = (uint8_t)(Temp_val);
 8000e52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e56:	74fb      	strb	r3, [r7, #19]
	Data[6] = (uint8_t)(Temp_val>>8);
 8000e58:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	0a02      	lsrs	r2, r0, #8
 8000e66:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e6a:	0a0b      	lsrs	r3, r1, #8
 8000e6c:	b2d3      	uxtb	r3, r2
 8000e6e:	74bb      	strb	r3, [r7, #18]
	Data[5] = (uint8_t)(Temp_val>>16);
 8000e70:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	0c02      	lsrs	r2, r0, #16
 8000e7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e82:	0c0b      	lsrs	r3, r1, #16
 8000e84:	b2d3      	uxtb	r3, r2
 8000e86:	747b      	strb	r3, [r7, #17]
	Data[4] = (uint8_t)(Temp_val>>24);
 8000e88:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	0e02      	lsrs	r2, r0, #24
 8000e96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e9a:	0e0b      	lsrs	r3, r1, #24
 8000e9c:	b2d3      	uxtb	r3, r2
 8000e9e:	743b      	strb	r3, [r7, #16]
	Data[3] = (uint8_t)(Temp_val>>32);
 8000ea0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	000a      	movs	r2, r1
 8000eae:	2300      	movs	r3, #0
 8000eb0:	b2d3      	uxtb	r3, r2
 8000eb2:	73fb      	strb	r3, [r7, #15]
	Data[2] = (uint8_t)(Temp_val>>40);
 8000eb4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	0a0a      	lsrs	r2, r1, #8
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	b2d3      	uxtb	r3, r2
 8000ec6:	73bb      	strb	r3, [r7, #14]
	Data[1] = (uint8_t)(Temp_val>>48);
 8000ec8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	f04f 0300 	mov.w	r3, #0
 8000ed4:	0c0a      	lsrs	r2, r1, #16
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	b2d3      	uxtb	r3, r2
 8000eda:	737b      	strb	r3, [r7, #13]
	Data[0] = (uint8_t)(Temp_val>>56);
 8000edc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	0e0a      	lsrs	r2, r1, #24
 8000eea:	2300      	movs	r3, #0
 8000eec:	b2d3      	uxtb	r3, r2
 8000eee:	733b      	strb	r3, [r7, #12]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &HeaderTX, &Data);
 8000ef0:	f107 020c 	add.w	r2, r7, #12
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <FDCAN_Transmit+0x234>)
 8000efc:	f001 f978 	bl	80021f0 <HAL_FDCAN_AddMessageToTxFifoQ>
	//HAL_FDCAN_EnableTxBufferRequest(&hfdcan1,TxBuff_Nb);

}
 8000f00:	bf00      	nop
 8000f02:	374c      	adds	r7, #76	; 0x4c
 8000f04:	46bd      	mov	sp, r7
 8000f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f0a:	bf00      	nop
 8000f0c:	24000168 	.word	0x24000168
 8000f10:	24000254 	.word	0x24000254

08000f14 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d017      	beq.n	8000f58 <HAL_FDCAN_RxFifo0Callback+0x44>
		FDCAN_RxQueue_Frame_t RX_BUFF;
//		FDCAN_RxHeaderTypeDef RxHeaderTemp = {0};
//		uint8_t RxBuffer[8];

		//Retrieve Rx messages from RX FIFO0
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RX_BUFF.RxHeader, RX_BUFF.Data);
 8000f28:	f107 0108 	add.w	r1, r7, #8
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	f103 0208 	add.w	r2, r3, #8
 8000f34:	460b      	mov	r3, r1
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f001 f9b5 	bl	80022a8 <HAL_FDCAN_GetRxMessage>
//			RX_BUFF.Data[i] = RxBuffer[i];
//		}



		osMessageQueuePut(CAN_RX_Q,&RX_BUFF,1,0);
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000f40:	6818      	ldr	r0, [r3, #0]
 8000f42:	f107 0108 	add.w	r1, r7, #8
 8000f46:	2300      	movs	r3, #0
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f005 fdfd 	bl	8006b48 <osMessageQueuePut>

		HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2101      	movs	r1, #1
 8000f52:	4804      	ldr	r0, [pc, #16]	; (8000f64 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000f54:	f001 fb16 	bl	8002584 <HAL_FDCAN_ActivateNotification>
	}
}
 8000f58:	bf00      	nop
 8000f5a:	3738      	adds	r7, #56	; 0x38
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	24000300 	.word	0x24000300
 8000f64:	24000254 	.word	0x24000254

08000f68 <TASK_FDCAN_RX>:

void TASK_FDCAN_RX(void)
{
 8000f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f6c:	b0af      	sub	sp, #188	; 0xbc
 8000f6e:	af00      	add	r7, sp, #0
	uint8_t priority;
	FDCAN_RxQueue_Frame_t RxBuff;
	int i, j, k;

	HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2104      	movs	r1, #4
 8000f74:	48a0      	ldr	r0, [pc, #640]	; (80011f8 <TASK_FDCAN_RX+0x290>)
 8000f76:	f002 fa3d 	bl	80033f4 <HAL_GPIO_WritePin>


	osThreadFlagsWait(FLAG_CANRX_CONFIG_READY,osFlagsWaitAll,osWaitForever);
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2002      	movs	r0, #2
 8000f82:	f005 fcd1 	bl	8006928 <osThreadFlagsWait>

	while(1)
	{
		osMessageQueueGet(CAN_RX_Q, &RxBuff,&priority,osWaitForever);
 8000f86:	4b9d      	ldr	r3, [pc, #628]	; (80011fc <TASK_FDCAN_RX+0x294>)
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	f107 02ad 	add.w	r2, r7, #173	; 0xad
 8000f8e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	f005 fe37 	bl	8006c08 <osMessageQueueGet>

		for(i=0; i<FDCAN_RX_MSG; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000fa0:	e1d2      	b.n	8001348 <TASK_FDCAN_RX+0x3e0>
		{
			if((RxBuff.RxHeader.Identifier == rx_id_list[i]) && (RxBuff.RxHeader.IdType == FDCAN_STANDARD_ID))
 8000fa2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000fa6:	4a96      	ldr	r2, [pc, #600]	; (8001200 <TASK_FDCAN_RX+0x298>)
 8000fa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb0:	4299      	cmp	r1, r3
 8000fb2:	f040 81c4 	bne.w	800133e <TASK_FDCAN_RX+0x3d6>
 8000fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f040 81bf 	bne.w	800133e <TASK_FDCAN_RX+0x3d6>
			{
				FDCAN_RX_bank[i].Data = 0;
 8000fc0:	4a90      	ldr	r2, [pc, #576]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8000fc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	18d1      	adds	r1, r2, r3
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	e9c1 2300 	strd	r2, r3, [r1]
				FDCAN_RX_bank[i].Data  = 	((uint64_t)(RxBuff.Data[0]))<<56;
 8000fd6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	673b      	str	r3, [r7, #112]	; 0x70
 8000fe0:	677a      	str	r2, [r7, #116]	; 0x74
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	f04f 0100 	mov.w	r1, #0
 8000fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fec:	0619      	lsls	r1, r3, #24
 8000fee:	2000      	movs	r0, #0
 8000ff0:	4a84      	ldr	r2, [pc, #528]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8000ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	e9c3 0100 	strd	r0, r1, [r3]
				FDCAN_RX_bank[i].Data |= 	((uint64_t)(RxBuff.Data[1]))<<48;
 8000ffe:	4a81      	ldr	r2, [pc, #516]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8001000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	4413      	add	r3, r2
 8001008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2200      	movs	r2, #0
 8001014:	66bb      	str	r3, [r7, #104]	; 0x68
 8001016:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8001022:	0423      	lsls	r3, r4, #16
 8001024:	2200      	movs	r2, #0
 8001026:	ea40 0402 	orr.w	r4, r0, r2
 800102a:	663c      	str	r4, [r7, #96]	; 0x60
 800102c:	430b      	orrs	r3, r1
 800102e:	667b      	str	r3, [r7, #100]	; 0x64
 8001030:	4a74      	ldr	r2, [pc, #464]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8001032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	4413      	add	r3, r2
 800103a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800103e:	e9c3 1200 	strd	r1, r2, [r3]
				FDCAN_RX_bank[i].Data |= 	((uint64_t)(RxBuff.Data[2]))<<40;
 8001042:	4a70      	ldr	r2, [pc, #448]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8001044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	4413      	add	r3, r2
 800104c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001050:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2200      	movs	r2, #0
 8001058:	65bb      	str	r3, [r7, #88]	; 0x58
 800105a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8001066:	0223      	lsls	r3, r4, #8
 8001068:	2200      	movs	r2, #0
 800106a:	ea40 0402 	orr.w	r4, r0, r2
 800106e:	653c      	str	r4, [r7, #80]	; 0x50
 8001070:	430b      	orrs	r3, r1
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
 8001074:	4a63      	ldr	r2, [pc, #396]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8001076:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001082:	e9c3 1200 	strd	r1, r2, [r3]
				FDCAN_RX_bank[i].Data |= 	((uint64_t)(RxBuff.Data[3]))<<32;
 8001086:	4a5f      	ldr	r2, [pc, #380]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8001088:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001094:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2200      	movs	r2, #0
 800109c:	64bb      	str	r3, [r7, #72]	; 0x48
 800109e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80010aa:	0023      	movs	r3, r4
 80010ac:	2200      	movs	r2, #0
 80010ae:	ea40 0402 	orr.w	r4, r0, r2
 80010b2:	643c      	str	r4, [r7, #64]	; 0x40
 80010b4:	430b      	orrs	r3, r1
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 80010ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4413      	add	r3, r2
 80010c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80010c6:	e9c3 1200 	strd	r1, r2, [r3]
				FDCAN_RX_bank[i].Data |= 	((uint64_t)(RxBuff.Data[4]))<<24;
 80010ca:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 80010cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	4413      	add	r3, r2
 80010d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2200      	movs	r2, #0
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80010e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80010e4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80010e8:	4623      	mov	r3, r4
 80010ea:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80010ee:	4623      	mov	r3, r4
 80010f0:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 80010f4:	ea40 030a 	orr.w	r3, r0, sl
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
 80010fa:	ea41 030b 	orr.w	r3, r1, fp
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001100:	4a40      	ldr	r2, [pc, #256]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8001102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800110e:	e9c3 1200 	strd	r1, r2, [r3]
				FDCAN_RX_bank[i].Data |= 	((uint64_t)(RxBuff.Data[5]))<<16;
 8001112:	4a3c      	ldr	r2, [pc, #240]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8001114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001120:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2200      	movs	r2, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
 800112a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8001138:	4634      	mov	r4, r6
 800113a:	0423      	lsls	r3, r4, #16
 800113c:	462c      	mov	r4, r5
 800113e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001142:	462c      	mov	r4, r5
 8001144:	0422      	lsls	r2, r4, #16
 8001146:	ea40 0402 	orr.w	r4, r0, r2
 800114a:	623c      	str	r4, [r7, #32]
 800114c:	430b      	orrs	r3, r1
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
 8001150:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8001152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4413      	add	r3, r2
 800115a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800115e:	e9c3 1200 	strd	r1, r2, [r3]
				FDCAN_RX_bank[i].Data |= 	((uint64_t)(RxBuff.Data[6]))<<8;
 8001162:	4a28      	ldr	r2, [pc, #160]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 8001164:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001170:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2200      	movs	r2, #0
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	61fa      	str	r2, [r7, #28]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8001188:	4634      	mov	r4, r6
 800118a:	0223      	lsls	r3, r4, #8
 800118c:	462c      	mov	r4, r5
 800118e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001192:	462c      	mov	r4, r5
 8001194:	0222      	lsls	r2, r4, #8
 8001196:	ea40 0402 	orr.w	r4, r0, r2
 800119a:	613c      	str	r4, [r7, #16]
 800119c:	430b      	orrs	r3, r1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 80011a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80011ae:	e9c3 1200 	strd	r1, r2, [r3]
				FDCAN_RX_bank[i].Data |= 	((uint64_t)(RxBuff.Data[7]));
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 80011b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	60fa      	str	r2, [r7, #12]
 80011cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80011d0:	4623      	mov	r3, r4
 80011d2:	4303      	orrs	r3, r0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	462b      	mov	r3, r5
 80011d8:	430b      	orrs	r3, r1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4a09      	ldr	r2, [pc, #36]	; (8001204 <TASK_FDCAN_RX+0x29c>)
 80011de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	4413      	add	r3, r2
 80011e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80011ea:	e9c3 1200 	strd	r1, r2, [r3]

				for(k = 0; k<FDCAN_RX_DATA; k++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80011f4:	e09e      	b.n	8001334 <TASK_FDCAN_RX+0x3cc>
 80011f6:	bf00      	nop
 80011f8:	58022400 	.word	0x58022400
 80011fc:	24000300 	.word	0x24000300
 8001200:	24000008 	.word	0x24000008
 8001204:	240000a8 	.word	0x240000a8
				{
					if(RxBuff.RxHeader.Identifier == FDCAN_Data_Rx[k]->CAN_id)
 8001208:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800120c:	4a51      	ldr	r2, [pc, #324]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 800120e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	4299      	cmp	r1, r3
 800121a:	f040 8086 	bne.w	800132a <TASK_FDCAN_RX+0x3c2>
					{
						FDCAN_Data_Rx[k]->CAN_data = (uint16_t)(((uint64_t)(FDCAN_RX_bank[i].Data)>>(63-FDCAN_Data_Rx[k]->CAN_startbit-(FDCAN_Data_Rx[k]->CAN_length_dec-1))) & ((uint64_t)(FDCAN_Data_Rx[k]->CAN_length)));
 800121e:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <TASK_FDCAN_RX+0x3f0>)
 8001220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	e9d3 4500 	ldrd	r4, r5, [r3]
 800122c:	4a49      	ldr	r2, [pc, #292]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 800122e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	7b1b      	ldrb	r3, [r3, #12]
 8001238:	f1c3 013f 	rsb	r1, r3, #63	; 0x3f
 800123c:	4a45      	ldr	r2, [pc, #276]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 800123e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	3b01      	subs	r3, #1
 800124a:	1ac9      	subs	r1, r1, r3
 800124c:	f1c1 0320 	rsb	r3, r1, #32
 8001250:	f1a1 0220 	sub.w	r2, r1, #32
 8001254:	fa24 f801 	lsr.w	r8, r4, r1
 8001258:	fa05 f303 	lsl.w	r3, r5, r3
 800125c:	ea48 0803 	orr.w	r8, r8, r3
 8001260:	fa25 f202 	lsr.w	r2, r5, r2
 8001264:	ea48 0802 	orr.w	r8, r8, r2
 8001268:	fa25 f901 	lsr.w	r9, r5, r1
 800126c:	fa1f f088 	uxth.w	r0, r8
 8001270:	4a38      	ldr	r2, [pc, #224]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 8001272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	8819      	ldrh	r1, [r3, #0]
 800127c:	4a35      	ldr	r2, [pc, #212]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 800127e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001286:	ea00 0301 	and.w	r3, r0, r1
 800128a:	b29b      	uxth	r3, r3
 800128c:	8093      	strh	r3, [r2, #4]

						if((FDCAN_Data_Rx[k]->Endianness == Intel)&&(FDCAN_Data_Rx[k]->CAN_length_dec>8))
 800128e:	4a31      	ldr	r2, [pc, #196]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 8001290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001298:	7b5b      	ldrb	r3, [r3, #13]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d145      	bne.n	800132a <TASK_FDCAN_RX+0x3c2>
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 80012a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	789b      	ldrb	r3, [r3, #2]
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d93d      	bls.n	800132a <TASK_FDCAN_RX+0x3c2>
						{

							uint16_t temp = FDCAN_Data_Rx[i]->CAN_data;
 80012ae:	4a29      	ldr	r2, [pc, #164]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 80012b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	889b      	ldrh	r3, [r3, #4]
 80012ba:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
							FDCAN_Data_Rx[k]->CAN_data = ((FDCAN_Data_Rx[k]->CAN_data>>(FDCAN_Data_Rx[k]->CAN_length_dec-8))&0x00FF);
 80012be:	4a25      	ldr	r2, [pc, #148]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 80012c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	889b      	ldrh	r3, [r3, #4]
 80012ca:	4619      	mov	r1, r3
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 80012ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	789b      	ldrb	r3, [r3, #2]
 80012d8:	3b08      	subs	r3, #8
 80012da:	fa41 f303 	asr.w	r3, r1, r3
 80012de:	b299      	uxth	r1, r3
 80012e0:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 80012e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ea:	b2cb      	uxtb	r3, r1
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	8093      	strh	r3, [r2, #4]
							FDCAN_Data_Rx[k]->CAN_data |= ((temp<<8)&FDCAN_Data_Rx[k]->CAN_length);
 80012f0:	4a18      	ldr	r2, [pc, #96]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 80012f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	889b      	ldrh	r3, [r3, #4]
 80012fc:	b218      	sxth	r0, r3
 80012fe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b219      	sxth	r1, r3
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 8001308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800130c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	400b      	ands	r3, r1
 8001316:	b21b      	sxth	r3, r3
 8001318:	4303      	orrs	r3, r0
 800131a:	b219      	sxth	r1, r3
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <TASK_FDCAN_RX+0x3ec>)
 800131e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001322:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001326:	b28b      	uxth	r3, r1
 8001328:	8093      	strh	r3, [r2, #4]
				for(k = 0; k<FDCAN_RX_DATA; k++)
 800132a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800132e:	3301      	adds	r3, #1
 8001330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001334:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001338:	2b07      	cmp	r3, #7
 800133a:	f77f af65 	ble.w	8001208 <TASK_FDCAN_RX+0x2a0>
		for(i=0; i<FDCAN_RX_MSG; i++)
 800133e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001348:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800134c:	2b01      	cmp	r3, #1
 800134e:	f77f ae28 	ble.w	8000fa2 <TASK_FDCAN_RX+0x3a>
		osMessageQueueGet(CAN_RX_Q, &RxBuff,&priority,osWaitForever);
 8001352:	e618      	b.n	8000f86 <TASK_FDCAN_RX+0x1e>
 8001354:	240000c8 	.word	0x240000c8
 8001358:	240000a8 	.word	0x240000a8

0800135c <TASK_FDCAN_TX>:
	}

}

void TASK_FDCAN_TX(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	osThreadFlagsWait(FLAG_CANTX_CONFIG_READY,osFlagsWaitAll,osWaitForever);
 8001362:	f04f 32ff 	mov.w	r2, #4294967295
 8001366:	2101      	movs	r1, #1
 8001368:	2004      	movs	r0, #4
 800136a:	f005 fadd 	bl	8006928 <osThreadFlagsWait>
	uint16_t frequency = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	80fb      	strh	r3, [r7, #6]
	uint8_t priority = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	717b      	strb	r3, [r7, #5]


	 while(1){

		 osMessageQueueGet(CAN_Q,&frequency,&priority,osWaitForever);
 8001376:	4b31      	ldr	r3, [pc, #196]	; (800143c <TASK_FDCAN_TX+0xe0>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	1d7a      	adds	r2, r7, #5
 800137c:	1db9      	adds	r1, r7, #6
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	f005 fc41 	bl	8006c08 <osMessageQueueGet>

		 switch(frequency){
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	2bc8      	cmp	r3, #200	; 0xc8
 800138a:	d03a      	beq.n	8001402 <TASK_FDCAN_TX+0xa6>
 800138c:	2bc8      	cmp	r3, #200	; 0xc8
 800138e:	dc50      	bgt.n	8001432 <TASK_FDCAN_TX+0xd6>
 8001390:	2b64      	cmp	r3, #100	; 0x64
 8001392:	d03c      	beq.n	800140e <TASK_FDCAN_TX+0xb2>
 8001394:	2b64      	cmp	r3, #100	; 0x64
 8001396:	dc4c      	bgt.n	8001432 <TASK_FDCAN_TX+0xd6>
 8001398:	2b14      	cmp	r3, #20
 800139a:	dc2f      	bgt.n	80013fc <TASK_FDCAN_TX+0xa0>
 800139c:	2b00      	cmp	r3, #0
 800139e:	dd48      	ble.n	8001432 <TASK_FDCAN_TX+0xd6>
 80013a0:	3b01      	subs	r3, #1
 80013a2:	2b13      	cmp	r3, #19
 80013a4:	d845      	bhi.n	8001432 <TASK_FDCAN_TX+0xd6>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <TASK_FDCAN_TX+0x50>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	08001427 	.word	0x08001427
 80013b0:	08001433 	.word	0x08001433
 80013b4:	08001433 	.word	0x08001433
 80013b8:	08001433 	.word	0x08001433
 80013bc:	08001433 	.word	0x08001433
 80013c0:	08001433 	.word	0x08001433
 80013c4:	08001433 	.word	0x08001433
 80013c8:	08001433 	.word	0x08001433
 80013cc:	08001433 	.word	0x08001433
 80013d0:	08001433 	.word	0x08001433
 80013d4:	08001433 	.word	0x08001433
 80013d8:	08001433 	.word	0x08001433
 80013dc:	08001433 	.word	0x08001433
 80013e0:	08001433 	.word	0x08001433
 80013e4:	08001433 	.word	0x08001433
 80013e8:	08001433 	.word	0x08001433
 80013ec:	08001433 	.word	0x08001433
 80013f0:	08001433 	.word	0x08001433
 80013f4:	08001433 	.word	0x08001433
 80013f8:	0800141b 	.word	0x0800141b
 80013fc:	2b32      	cmp	r3, #50	; 0x32
 80013fe:	d01a      	beq.n	8001436 <TASK_FDCAN_TX+0xda>
			 case 1:
				 FDCAN_Transmit(&hfdcan1, 0x160);
			 break;

			 default:
			 break;
 8001400:	e017      	b.n	8001432 <TASK_FDCAN_TX+0xd6>
				 FDCAN_Transmit(&hfdcan1, 0x140);
 8001402:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001406:	480e      	ldr	r0, [pc, #56]	; (8001440 <TASK_FDCAN_TX+0xe4>)
 8001408:	f7ff fc68 	bl	8000cdc <FDCAN_Transmit>
			 break;
 800140c:	e014      	b.n	8001438 <TASK_FDCAN_TX+0xdc>
				 FDCAN_Transmit(&hfdcan1, 0x100);
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <TASK_FDCAN_TX+0xe4>)
 8001414:	f7ff fc62 	bl	8000cdc <FDCAN_Transmit>
			 break;
 8001418:	e00e      	b.n	8001438 <TASK_FDCAN_TX+0xdc>
				 FDCAN_Transmit(&hfdcan1, 0x120);
 800141a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <TASK_FDCAN_TX+0xe4>)
 8001420:	f7ff fc5c 	bl	8000cdc <FDCAN_Transmit>
			 break;
 8001424:	e008      	b.n	8001438 <TASK_FDCAN_TX+0xdc>
				 FDCAN_Transmit(&hfdcan1, 0x160);
 8001426:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <TASK_FDCAN_TX+0xe4>)
 800142c:	f7ff fc56 	bl	8000cdc <FDCAN_Transmit>
			 break;
 8001430:	e002      	b.n	8001438 <TASK_FDCAN_TX+0xdc>
			 break;
 8001432:	bf00      	nop
 8001434:	e79f      	b.n	8001376 <TASK_FDCAN_TX+0x1a>
			 break;
 8001436:	bf00      	nop
		 osMessageQueueGet(CAN_Q,&frequency,&priority,osWaitForever);
 8001438:	e79d      	b.n	8001376 <TASK_FDCAN_TX+0x1a>
 800143a:	bf00      	nop
 800143c:	240002fc 	.word	0x240002fc
 8001440:	24000254 	.word	0x24000254

08001444 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <MX_GPIO_Init+0xd4>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	4a2d      	ldr	r2, [pc, #180]	; (8001518 <MX_GPIO_Init+0xd4>)
 8001462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <MX_GPIO_Init+0xd4>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MX_GPIO_Init+0xd4>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	4a26      	ldr	r2, [pc, #152]	; (8001518 <MX_GPIO_Init+0xd4>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_GPIO_Init+0xd4>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_GPIO_Init+0xd4>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <MX_GPIO_Init+0xd4>)
 800149e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_GPIO_Init+0xd4>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ba:	4818      	ldr	r0, [pc, #96]	; (800151c <MX_GPIO_Init+0xd8>)
 80014bc:	f001 ff9a 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2104      	movs	r1, #4
 80014c4:	4816      	ldr	r0, [pc, #88]	; (8001520 <MX_GPIO_Init+0xdc>)
 80014c6:	f001 ff95 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	480e      	ldr	r0, [pc, #56]	; (800151c <MX_GPIO_Init+0xd8>)
 80014e4:	f001 fdd6 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014e8:	2304      	movs	r3, #4
 80014ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4619      	mov	r1, r3
 80014fe:	4808      	ldr	r0, [pc, #32]	; (8001520 <MX_GPIO_Init+0xdc>)
 8001500:	f001 fdc8 	bl	8003094 <HAL_GPIO_Init>

  osThreadFlagsSet(id_task_LED1, FLAG_GPIO_CONFIG_READY);
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <MX_GPIO_Init+0xe0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2102      	movs	r1, #2
 800150a:	4618      	mov	r0, r3
 800150c:	f005 f9be 	bl	800688c <osThreadFlagsSet>
}
 8001510:	bf00      	nop
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	58024400 	.word	0x58024400
 800151c:	58022000 	.word	0x58022000
 8001520:	58022400 	.word	0x58022400
 8001524:	24000304 	.word	0x24000304

08001528 <toggle_LED1>:

/* USER CODE BEGIN 2 */

void toggle_LED1(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	int i = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
	 osThreadFlagsWait(FLAG_GPIO_CONFIG_READY,osFlagsWaitAll,osWaitForever);
 8001532:	f04f 32ff 	mov.w	r2, #4294967295
 8001536:	2101      	movs	r1, #1
 8001538:	2002      	movs	r0, #2
 800153a:	f005 f9f5 	bl	8006928 <osThreadFlagsWait>

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 800153e:	2104      	movs	r1, #4
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <toggle_LED1+0x28>)
 8001542:	f001 ff70 	bl	8003426 <HAL_GPIO_TogglePin>
		osDelay(500);
 8001546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800154a:	f005 fa6e 	bl	8006a2a <osDelay>
		HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 800154e:	e7f6      	b.n	800153e <toggle_LED1+0x16>
 8001550:	58022400 	.word	0x58022400

08001554 <app_main>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);

void app_main (void *argument)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	CAN_RX_Q = osMessageQueueNew(20,sizeof(FDCAN_RxQueue_Frame_t),NULL);
 800155c:	2200      	movs	r2, #0
 800155e:	2130      	movs	r1, #48	; 0x30
 8001560:	2014      	movs	r0, #20
 8001562:	f005 fa7d 	bl	8006a60 <osMessageQueueNew>
 8001566:	4603      	mov	r3, r0
 8001568:	4a25      	ldr	r2, [pc, #148]	; (8001600 <app_main+0xac>)
 800156a:	6013      	str	r3, [r2, #0]
	CAN_Q = osMessageQueueNew(20, 1, NULL);
 800156c:	2200      	movs	r2, #0
 800156e:	2101      	movs	r1, #1
 8001570:	2014      	movs	r0, #20
 8001572:	f005 fa75 	bl	8006a60 <osMessageQueueNew>
 8001576:	4603      	mov	r3, r0
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <app_main+0xb0>)
 800157a:	6013      	str	r3, [r2, #0]

	id_task_CAN_RX = osThreadNew(TASK_FDCAN_RX, NULL, NULL);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	4821      	ldr	r0, [pc, #132]	; (8001608 <app_main+0xb4>)
 8001582:	f005 f8c7 	bl	8006714 <osThreadNew>
 8001586:	4603      	mov	r3, r0
 8001588:	4a20      	ldr	r2, [pc, #128]	; (800160c <app_main+0xb8>)
 800158a:	6013      	str	r3, [r2, #0]
	osThreadSetPriority(id_task_CAN_RX,osPriorityNormal);
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <app_main+0xb8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2118      	movs	r1, #24
 8001592:	4618      	mov	r0, r3
 8001594:	f005 f950 	bl	8006838 <osThreadSetPriority>

	id_task_CAN_TX = osThreadNew(TASK_FDCAN_TX, NULL, NULL);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	481c      	ldr	r0, [pc, #112]	; (8001610 <app_main+0xbc>)
 800159e:	f005 f8b9 	bl	8006714 <osThreadNew>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <app_main+0xc0>)
 80015a6:	6013      	str	r3, [r2, #0]
	osThreadSetPriority(id_task_CAN_TX,osPriorityNormal);
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <app_main+0xc0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2118      	movs	r1, #24
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 f942 	bl	8006838 <osThreadSetPriority>

	id_task_timer = osThreadNew(Task_Timer, NULL, NULL);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	4817      	ldr	r0, [pc, #92]	; (8001618 <app_main+0xc4>)
 80015ba:	f005 f8ab 	bl	8006714 <osThreadNew>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a16      	ldr	r2, [pc, #88]	; (800161c <app_main+0xc8>)
 80015c2:	6013      	str	r3, [r2, #0]
	osThreadSetPriority(id_task_timer, osPriorityHigh);
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <app_main+0xc8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2128      	movs	r1, #40	; 0x28
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 f934 	bl	8006838 <osThreadSetPriority>

	id_task_LED1 = osThreadNew(toggle_LED1, NULL, NULL);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	4812      	ldr	r0, [pc, #72]	; (8001620 <app_main+0xcc>)
 80015d6:	f005 f89d 	bl	8006714 <osThreadNew>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <app_main+0xd0>)
 80015de:	6013      	str	r3, [r2, #0]
	osThreadSetPriority(id_task_LED1,osPriorityNormal);
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <app_main+0xd0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2118      	movs	r1, #24
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 f926 	bl	8006838 <osThreadSetPriority>

	MX_GPIO_Init();
 80015ec:	f7ff ff2a 	bl	8001444 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80015f0:	f7ff f9fa 	bl	80009e8 <MX_FDCAN1_Init>
	FDCAN_RX_Init();
 80015f4:	f7ff faf0 	bl	8000bd8 <FDCAN_RX_Init>
	MX_TIM15_Init();
 80015f8:	f7ff f878 	bl	80006ec <MX_TIM15_Init>



	while(1)
 80015fc:	e7fe      	b.n	80015fc <app_main+0xa8>
 80015fe:	bf00      	nop
 8001600:	24000300 	.word	0x24000300
 8001604:	240002fc 	.word	0x240002fc
 8001608:	08000f69 	.word	0x08000f69
 800160c:	240002f8 	.word	0x240002f8
 8001610:	0800135d 	.word	0x0800135d
 8001614:	240002f4 	.word	0x240002f4
 8001618:	08000801 	.word	0x08000801
 800161c:	2400024c 	.word	0x2400024c
 8001620:	08001529 	.word	0x08001529
 8001624:	24000304 	.word	0x24000304

08001628 <main>:
	}

}

int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800162e:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <main+0xf8>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d11b      	bne.n	8001672 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800163a:	f3bf 8f4f 	dsb	sy
}
 800163e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001640:	f3bf 8f6f 	isb	sy
}
 8001644:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001646:	4b36      	ldr	r3, [pc, #216]	; (8001720 <main+0xf8>)
 8001648:	2200      	movs	r2, #0
 800164a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800164e:	f3bf 8f4f 	dsb	sy
}
 8001652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001654:	f3bf 8f6f 	isb	sy
}
 8001658:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800165a:	4b31      	ldr	r3, [pc, #196]	; (8001720 <main+0xf8>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a30      	ldr	r2, [pc, #192]	; (8001720 <main+0xf8>)
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001666:	f3bf 8f4f 	dsb	sy
}
 800166a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800166c:	f3bf 8f6f 	isb	sy
}
 8001670:	e000      	b.n	8001674 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001672:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001674:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <main+0xf8>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d138      	bne.n	80016f2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <main+0xf8>)
 8001682:	2200      	movs	r2, #0
 8001684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001688:	f3bf 8f4f 	dsb	sy
}
 800168c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <main+0xf8>)
 8001690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001694:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	0b5b      	lsrs	r3, r3, #13
 800169a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800169e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	08db      	lsrs	r3, r3, #3
 80016a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016a8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	015a      	lsls	r2, r3, #5
 80016ae:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80016b2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016b8:	4919      	ldr	r1, [pc, #100]	; (8001720 <main+0xf8>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	1e5a      	subs	r2, r3, #1
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ef      	bne.n	80016aa <main+0x82>
    } while(sets-- != 0U);
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	60ba      	str	r2, [r7, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e5      	bne.n	80016a0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80016d4:	f3bf 8f4f 	dsb	sy
}
 80016d8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <main+0xf8>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <main+0xf8>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ec:	f3bf 8f6f 	isb	sy
}
 80016f0:	e000      	b.n	80016f4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80016f2:	bf00      	nop
  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
  HAL_Init();
 80016f4:	f000 f97e 	bl	80019f4 <HAL_Init>

  SystemClock_Config();
 80016f8:	f000 f816 	bl	8001728 <SystemClock_Config>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 fa8e 	bl	8001c1e <HAL_NVIC_SetPriorityGrouping>

  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001702:	f004 ffbd 	bl	8006680 <osKernelInitialize>
  osThreadNew(app_main, NULL, NULL);    // Create application main thread
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <main+0xfc>)
 800170c:	f005 f802 	bl	8006714 <osThreadNew>
  osThreadSetPriority(app_main,osPriorityNormal);
 8001710:	2118      	movs	r1, #24
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <main+0xfc>)
 8001714:	f005 f890 	bl	8006838 <osThreadSetPriority>

  osKernelStart();
 8001718:	f004 ffd6 	bl	80066c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800171c:	e7fe      	b.n	800171c <main+0xf4>
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	08001555 	.word	0x08001555

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b09c      	sub	sp, #112	; 0x70
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	224c      	movs	r2, #76	; 0x4c
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f008 fad6 	bl	8009ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2220      	movs	r2, #32
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f008 fad0 	bl	8009ce8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001748:	2004      	movs	r0, #4
 800174a:	f001 fe87 	bl	800345c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <SystemClock_Config+0xec>)
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <SystemClock_Config+0xec>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800175e:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <SystemClock_Config+0xec>)
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <SystemClock_Config+0xf0>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <SystemClock_Config+0xf0>)
 800176e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <SystemClock_Config+0xf0>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001780:	bf00      	nop
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <SystemClock_Config+0xf0>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800178e:	d1f8      	bne.n	8001782 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001790:	2301      	movs	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	2302      	movs	r3, #2
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80017a2:	2305      	movs	r3, #5
 80017a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80017a6:	23a0      	movs	r3, #160	; 0xa0
 80017a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 80017ae:	2310      	movs	r3, #16
 80017b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80017b2:	2304      	movs	r3, #4
 80017b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80017b6:	2308      	movs	r3, #8
 80017b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fea2 	bl	8003510 <HAL_RCC_OscConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017d2:	f000 f835 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	233f      	movs	r3, #63	; 0x3f
 80017d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2303      	movs	r3, #3
 80017dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017e2:	2308      	movs	r3, #8
 80017e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017ea:	2340      	movs	r3, #64	; 0x40
 80017ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017f4:	2340      	movs	r3, #64	; 0x40
 80017f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2102      	movs	r1, #2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fae1 	bl	8003dc4 <HAL_RCC_ClockConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001808:	f000 f81a 	bl	8001840 <Error_Handler>
  }
}
 800180c:	bf00      	nop
 800180e:	3770      	adds	r7, #112	; 0x70
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	58000400 	.word	0x58000400
 8001818:	58024800 	.word	0x58024800

0800181c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800182e:	f000 f91d 	bl	8001a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40014800 	.word	0x40014800

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>
	...

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_MspInit+0x38>)
 8001854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_MspInit+0x38>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_MspInit+0x38>)
 8001864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	210f      	movs	r1, #15
 8001874:	f06f 0001 	mvn.w	r0, #1
 8001878:	f000 f9dc 	bl	8001c34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	58024400 	.word	0x58024400

08001888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	d844      	bhi.n	8001920 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8001896:	2200      	movs	r2, #0
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	2076      	movs	r0, #118	; 0x76
 800189c:	f000 f9ca 	bl	8001c34 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80018a0:	2076      	movs	r0, #118	; 0x76
 80018a2:	f000 f9e1 	bl	8001c68 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80018a6:	4a24      	ldr	r2, [pc, #144]	; (8001938 <HAL_InitTick+0xb0>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <HAL_InitTick+0xb4>)
 80018ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b2:	4a22      	ldr	r2, [pc, #136]	; (800193c <HAL_InitTick+0xb4>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HAL_InitTick+0xb4>)
 80018be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ca:	f107 020c 	add.w	r2, r7, #12
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fdeb 	bl	80044b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80018da:	f002 fdd3 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 80018de:	4603      	mov	r3, r0
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	4a16      	ldr	r2, [pc, #88]	; (8001940 <HAL_InitTick+0xb8>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	0c9b      	lsrs	r3, r3, #18
 80018ee:	3b01      	subs	r3, #1
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_InitTick+0xbc>)
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_InitTick+0xc0>)
 80018f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0xbc>)
 80018fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018fe:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001900:	4a10      	ldr	r2, [pc, #64]	; (8001944 <HAL_InitTick+0xbc>)
 8001902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001904:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_InitTick+0xbc>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_InitTick+0xbc>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <HAL_InitTick+0xbc>)
 8001914:	f004 f97c 	bl	8005c10 <HAL_TIM_Base_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d107      	bne.n	800192e <HAL_InitTick+0xa6>
 800191e:	e001      	b.n	8001924 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e005      	b.n	8001930 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001924:	4807      	ldr	r0, [pc, #28]	; (8001944 <HAL_InitTick+0xbc>)
 8001926:	f004 f9cb 	bl	8005cc0 <HAL_TIM_Base_Start_IT>
 800192a:	4603      	mov	r3, r0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3738      	adds	r7, #56	; 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	24000014 	.word	0x24000014
 800193c:	58024400 	.word	0x58024400
 8001940:	431bde83 	.word	0x431bde83
 8001944:	24000308 	.word	0x24000308
 8001948:	40014800 	.word	0x40014800

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <FDCAN1_IT0_IRQHandler+0x10>)
 800197e:	f000 fe7b 	bl	8002678 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	24000254 	.word	0x24000254

0800198c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <TIM17_IRQHandler+0x10>)
 8001992:	f004 fa0d 	bl	8005db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	24000308 	.word	0x24000308

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a4:	f7fe fc9c 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f008 f957 	bl	8009c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7ff fe29 	bl	8001628 <main>
  bx  lr
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019e0:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80019e4:	08009f80 	.word	0x08009f80
  ldr r2, =_sbss
 80019e8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80019ec:	24004d70 	.word	0x24004d70

080019f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC3_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fa:	2003      	movs	r0, #3
 80019fc:	f000 f90f 	bl	8001c1e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a00:	f002 fb96 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_Init+0x68>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	4913      	ldr	r1, [pc, #76]	; (8001a60 <HAL_Init+0x6c>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_Init+0x68>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_Init+0x6c>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <HAL_Init+0x70>)
 8001a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a38:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <HAL_Init+0x74>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f7ff ff22 	bl	8001888 <HAL_InitTick>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e002      	b.n	8001a54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4e:	f7ff fefd 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	08009ef8 	.word	0x08009ef8
 8001a64:	24000004 	.word	0x24000004
 8001a68:	24000000 	.word	0x24000000

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	24000018 	.word	0x24000018
 8001a90:	24000354 	.word	0x24000354

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	24000354 	.word	0x24000354

08001aac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetREVID+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	5c001000 	.word	0x5c001000

08001ac4 <__NVIC_SetPriorityGrouping>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x40>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00
 8001b08:	05fa0000 	.word	0x05fa0000

08001b0c <__NVIC_GetPriorityGrouping>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff4c 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c42:	f7ff ff63 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	6978      	ldr	r0, [r7, #20]
 8001c4e:	f7ff ffb3 	bl	8001bb8 <NVIC_EncodePriority>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff82 	bl	8001b64 <__NVIC_SetPriority>
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff56 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b098      	sub	sp, #96	; 0x60
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001c8c:	4a84      	ldr	r2, [pc, #528]	; (8001ea0 <HAL_FDCAN_Init+0x21c>)
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	4611      	mov	r1, r2
 8001c94:	224c      	movs	r2, #76	; 0x4c
 8001c96:	4618      	mov	r0, r3
 8001c98:	f008 f818 	bl	8009ccc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e1c6      	b.n	8002034 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7e      	ldr	r2, [pc, #504]	; (8001ea4 <HAL_FDCAN_Init+0x220>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d106      	bne.n	8001cbe <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f9b4 	bl	8002040 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0210 	bic.w	r2, r2, #16
 8001ce6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce8:	f7ff fed4 	bl	8001a94 <HAL_GetTick>
 8001cec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001cee:	e014      	b.n	8001d1a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001cf0:	f7ff fed0 	bl	8001a94 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b0a      	cmp	r3, #10
 8001cfc:	d90d      	bls.n	8001d1a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2203      	movs	r2, #3
 8001d12:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e18c      	b.n	8002034 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d0e3      	beq.n	8001cf0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d38:	f7ff feac 	bl	8001a94 <HAL_GetTick>
 8001d3c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001d3e:	e014      	b.n	8001d6a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001d40:	f7ff fea8 	bl	8001a94 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b0a      	cmp	r3, #10
 8001d4c:	d90d      	bls.n	8001d6a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e164      	b.n	8002034 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0e3      	beq.n	8001d40 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0202 	orr.w	r2, r2, #2
 8001d86:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7c1b      	ldrb	r3, [r3, #16]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9e:	619a      	str	r2, [r3, #24]
 8001da0:	e007      	b.n	8001db2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001db0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7c5b      	ldrb	r3, [r3, #17]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dc8:	619a      	str	r2, [r3, #24]
 8001dca:	e007      	b.n	8001ddc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dda:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7c9b      	ldrb	r3, [r3, #18]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d108      	bne.n	8001df6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001df2:	619a      	str	r2, [r3, #24]
 8001df4:	e007      	b.n	8001e06 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e04:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001e2a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0210 	bic.w	r2, r2, #16
 8001e3a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0204 	orr.w	r2, r2, #4
 8001e52:	619a      	str	r2, [r3, #24]
 8001e54:	e030      	b.n	8001eb8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d02c      	beq.n	8001eb8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d020      	beq.n	8001ea8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e74:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0210 	orr.w	r2, r2, #16
 8001e84:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d114      	bne.n	8001eb8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699a      	ldr	r2, [r3, #24]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	619a      	str	r2, [r3, #24]
 8001e9e:	e00b      	b.n	8001eb8 <HAL_FDCAN_Init+0x234>
 8001ea0:	08009e94 	.word	0x08009e94
 8001ea4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ec8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001ed0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001ee0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ee2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001eec:	d115      	bne.n	8001f1a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001efc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	3b01      	subs	r3, #1
 8001f04:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001f06:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001f16:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001f18:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f40:	4413      	add	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d011      	beq.n	8001f6a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001f4e:	f023 0107 	bic.w	r1, r3, #7
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3360      	adds	r3, #96	; 0x60
 8001f5a:	443b      	add	r3, r7
 8001f5c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d011      	beq.n	8001f96 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001f7a:	f023 0107 	bic.w	r1, r3, #7
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3360      	adds	r3, #96	; 0x60
 8001f86:	443b      	add	r3, r7
 8001f88:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d012      	beq.n	8001fc4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001fa6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	3360      	adds	r3, #96	; 0x60
 8001fb2:	443b      	add	r3, r7
 8001fb4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001fb8:	011a      	lsls	r2, r3, #4
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d012      	beq.n	8001ff2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001fd4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	3360      	adds	r3, #96	; 0x60
 8001fe0:	443b      	add	r3, r7
 8001fe2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001fe6:	021a      	lsls	r2, r3, #8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_FDCAN_Init+0x3b8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d107      	bne.n	800200c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f022 0203 	bic.w	r2, r2, #3
 800200a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fe31 	bl	8002c8c <FDCAN_CalcultateRamBlockAddresses>
 800202a:	4603      	mov	r3, r0
 800202c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002030:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002034:	4618      	mov	r0, r3
 8002036:	3760      	adds	r7, #96	; 0x60
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	4000a000 	.word	0x4000a000

08002040 <HAL_FDCAN_MspInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef *hfdcan)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hfdcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_MspInit could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002064:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d002      	beq.n	8002072 <HAL_FDCAN_ConfigFilter+0x1e>
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d157      	bne.n	8002122 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d12b      	bne.n	80020d2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b07      	cmp	r3, #7
 8002080:	d10d      	bne.n	800209e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800208e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002094:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8002096:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	e00e      	b.n	80020bc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80020aa:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80020b2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e025      	b.n	800211e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	075a      	lsls	r2, r3, #29
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b07      	cmp	r3, #7
 80020e6:	d103      	bne.n	80020f0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e006      	b.n	80020fe <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	079a      	lsls	r2, r3, #30
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3304      	adds	r3, #4
 8002116:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e008      	b.n	8002134 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002128:	f043 0202 	orr.w	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
  }
}
 8002134:	4618      	mov	r0, r3
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d110      	bne.n	800217c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002162:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8002168:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e008      	b.n	800218e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002182:	f043 0204 	orr.w	r2, r3, #4
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d111      	bne.n	80021d2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e008      	b.n	80021e4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021d8:	f043 0204 	orr.w	r2, r3, #4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d141      	bne.n	800228c <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002210:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800221e:	f043 0220 	orr.w	r2, r3, #32
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e038      	b.n	800229e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002242:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e026      	b.n	800229e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fe96 	bl	8002f98 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800227c:	2201      	movs	r2, #1
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	409a      	lsls	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e008      	b.n	800229e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002292:	f043 0208 	orr.w	r2, r3, #8
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
  }
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b08b      	sub	sp, #44	; 0x2c
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80022c0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80022c2:	7efb      	ldrb	r3, [r7, #27]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	f040 814b 	bne.w	8002560 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d14d      	bne.n	800236c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022e6:	f043 0220 	orr.w	r2, r3, #32
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e13e      	b.n	8002572 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80022fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800230a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e12c      	b.n	8002572 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002320:	0e1b      	lsrs	r3, r3, #24
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d10b      	bne.n	8002342 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800233c:	d101      	bne.n	8002342 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800233e:	2301      	movs	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	69f9      	ldr	r1, [r7, #28]
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e069      	b.n	8002440 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b41      	cmp	r3, #65	; 0x41
 8002370:	d14d      	bne.n	800240e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800237a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0ed      	b.n	8002572 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800239e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0db      	b.n	8002572 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80023c2:	0e1b      	lsrs	r3, r3, #24
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10b      	bne.n	80023e4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80023d4:	0fdb      	lsrs	r3, r3, #31
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023de:	d101      	bne.n	80023e4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80023e0:	2301      	movs	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	4413      	add	r3, r2
 80023f6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	69f9      	ldr	r1, [r7, #28]
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	e018      	b.n	8002440 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	429a      	cmp	r2, r3
 8002416:	d309      	bcc.n	800242c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0a2      	b.n	8002572 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0c9b      	lsrs	r3, r3, #18
 800245a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e005      	b.n	8002470 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	3304      	adds	r3, #4
 800248c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e1b      	lsrs	r3, r3, #24
 80024c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0fda      	lsrs	r2, r3, #31
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	3304      	adds	r3, #4
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	e00a      	b.n	80024fa <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	441a      	add	r2, r3
 80024ea:	6839      	ldr	r1, [r7, #0]
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	440b      	add	r3, r1
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	3301      	adds	r3, #1
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	0c1b      	lsrs	r3, r3, #16
 8002500:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	461a      	mov	r2, r3
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	4293      	cmp	r3, r2
 800250a:	d3eb      	bcc.n	80024e4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	d105      	bne.n	800251e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800251c:	e01e      	b.n	800255c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b41      	cmp	r3, #65	; 0x41
 8002522:	d105      	bne.n	8002530 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800252e:	e015      	b.n	800255c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b1f      	cmp	r3, #31
 8002534:	d808      	bhi.n	8002548 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2101      	movs	r1, #1
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002546:	e009      	b.n	800255c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	e008      	b.n	8002572 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002566:	f043 0208 	orr.w	r2, r3, #8
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	372c      	adds	r7, #44	; 0x2c
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	08009f08 	.word	0x08009f08

08002584 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002596:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d002      	beq.n	80025a4 <HAL_FDCAN_ActivateNotification+0x20>
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d155      	bne.n	8002650 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d108      	bne.n	80025c4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0201 	orr.w	r2, r2, #1
 80025c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80025c2:	e014      	b.n	80025ee <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d108      	bne.n	80025e6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0202 	orr.w	r2, r2, #2
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80025e4:	e003      	b.n	80025ee <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2203      	movs	r2, #3
 80025ec:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	430a      	orrs	r2, r1
 8002608:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	430a      	orrs	r2, r1
 8002626:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_FDCAN_ActivateNotification+0xec>)
 8002634:	4013      	ands	r3, r2
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	430b      	orrs	r3, r1
 800263c:	6553      	str	r3, [r2, #84]	; 0x54
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	0f9b      	lsrs	r3, r3, #30
 8002646:	490b      	ldr	r1, [pc, #44]	; (8002674 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002648:	4313      	orrs	r3, r2
 800264a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e008      	b.n	8002662 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002656:	f043 0202 	orr.w	r2, r3, #2
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	3fcfffff 	.word	0x3fcfffff
 8002674:	4000a800 	.word	0x4000a800

08002678 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b096      	sub	sp, #88	; 0x58
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002680:	4b9a      	ldr	r3, [pc, #616]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	079b      	lsls	r3, r3, #30
 8002686:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002688:	4b98      	ldr	r3, [pc, #608]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	079b      	lsls	r3, r3, #30
 800268e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002690:	4013      	ands	r3, r2
 8002692:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800269e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026a8:	4013      	ands	r3, r2
 80026aa:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026c0:	4013      	ands	r3, r2
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026d8:	4013      	ands	r3, r2
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80026e6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026f0:	4013      	ands	r3, r2
 80026f2:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fa:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80026fe:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002708:	4013      	ands	r3, r2
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d010      	beq.n	800274a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800273c:	651a      	str	r2, [r3, #80]	; 0x50
 800273e:	4b6b      	ldr	r3, [pc, #428]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fa54 	bl	8002bf2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800274a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274c:	0a9b      	lsrs	r3, r3, #10
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01d      	beq.n	8002792 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	0a9b      	lsrs	r3, r3, #10
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d017      	beq.n	8002792 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002776:	4013      	ands	r3, r2
 8002778:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002782:	651a      	str	r2, [r3, #80]	; 0x50
 8002784:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800278a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fa07 	bl	8002ba0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_FDCAN_IRQHandler+0x278>)
 80027a0:	400b      	ands	r3, r1
 80027a2:	6513      	str	r3, [r2, #80]	; 0x50
 80027a4:	4a51      	ldr	r2, [pc, #324]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	0f9b      	lsrs	r3, r3, #30
 80027aa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80027ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f9c0 	bl	8002b34 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80027b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80027c0:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <HAL_FDCAN_IRQHandler+0x278>)
 80027c2:	400b      	ands	r3, r1
 80027c4:	6513      	str	r3, [r2, #80]	; 0x50
 80027c6:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 80027c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ca:	0f9b      	lsrs	r3, r3, #30
 80027cc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80027ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f9ba 	bl	8002b4a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80027d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_FDCAN_IRQHandler+0x278>)
 80027e4:	400b      	ands	r3, r1
 80027e6:	6513      	str	r3, [r2, #80]	; 0x50
 80027e8:	4a40      	ldr	r2, [pc, #256]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 80027ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ec:	0f9b      	lsrs	r3, r3, #30
 80027ee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80027f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe fb8e 	bl	8000f14 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80027f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00d      	beq.n	800281a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_FDCAN_IRQHandler+0x278>)
 8002806:	400b      	ands	r3, r1
 8002808:	6513      	str	r3, [r2, #80]	; 0x50
 800280a:	4a38      	ldr	r2, [pc, #224]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 800280c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280e:	0f9b      	lsrs	r3, r3, #30
 8002810:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002812:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f9a3 	bl	8002b60 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281c:	0adb      	lsrs	r3, r3, #11
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d010      	beq.n	8002848 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	0adb      	lsrs	r3, r3, #11
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283a:	651a      	str	r2, [r3, #80]	; 0x50
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f997 	bl	8002b76 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8002848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284a:	0a5b      	lsrs	r3, r3, #9
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01d      	beq.n	8002890 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	0a5b      	lsrs	r3, r3, #9
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d017      	beq.n	8002890 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002874:	4013      	ands	r3, r2
 8002876:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002880:	651a      	str	r2, [r3, #80]	; 0x50
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f97d 	bl	8002b8a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002892:	0cdb      	lsrs	r3, r3, #19
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d010      	beq.n	80028be <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289e:	0cdb      	lsrs	r3, r3, #19
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f97c 	bl	8002bb6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80028be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d010      	beq.n	80028f8 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028de:	651a      	str	r2, [r3, #80]	; 0x50
 80028e0:	4b02      	ldr	r3, [pc, #8]	; (80028ec <HAL_FDCAN_IRQHandler+0x274>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	e004      	b.n	80028f4 <HAL_FDCAN_IRQHandler+0x27c>
 80028ea:	bf00      	nop
 80028ec:	4000a800 	.word	0x4000a800
 80028f0:	3fcfffff 	.word	0x3fcfffff
 80028f4:	f000 f969 	bl	8002bca <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80028f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fa:	0c9b      	lsrs	r3, r3, #18
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d010      	beq.n	8002926 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002906:	0c9b      	lsrs	r3, r3, #18
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002918:	651a      	str	r2, [r3, #80]	; 0x50
 800291a:	4b83      	ldr	r3, [pc, #524]	; (8002b28 <HAL_FDCAN_IRQHandler+0x4b0>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f95c 	bl	8002bde <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002928:	0c5b      	lsrs	r3, r3, #17
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d015      	beq.n	800295e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	0c5b      	lsrs	r3, r3, #17
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00f      	beq.n	800295e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002946:	651a      	str	r2, [r3, #80]	; 0x50
 8002948:	4b77      	ldr	r3, [pc, #476]	; (8002b28 <HAL_FDCAN_IRQHandler+0x4b0>)
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002954:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800295e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800296a:	4b70      	ldr	r3, [pc, #448]	; (8002b2c <HAL_FDCAN_IRQHandler+0x4b4>)
 800296c:	400b      	ands	r3, r1
 800296e:	6513      	str	r3, [r2, #80]	; 0x50
 8002970:	4a6d      	ldr	r2, [pc, #436]	; (8002b28 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002974:	0f9b      	lsrs	r3, r3, #30
 8002976:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f94d 	bl	8002c1a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002982:	2b00      	cmp	r3, #0
 8002984:	d011      	beq.n	80029aa <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800298c:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <HAL_FDCAN_IRQHandler+0x4b4>)
 800298e:	400b      	ands	r3, r1
 8002990:	6513      	str	r3, [r2, #80]	; 0x50
 8002992:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002996:	0f9b      	lsrs	r3, r3, #30
 8002998:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80029a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a60      	ldr	r2, [pc, #384]	; (8002b30 <HAL_FDCAN_IRQHandler+0x4b8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	f040 80ac 	bne.w	8002b0e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a4 	beq.w	8002b0e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029da:	4013      	ands	r3, r2
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f2:	4013      	ands	r3, r2
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002a18:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	4013      	ands	r3, r2
 8002a24:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002a30:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8e6 	bl	8002c30 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a70:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8002a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8e6 	bl	8002c46 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	099b      	lsrs	r3, r3, #6
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01a      	beq.n	8002abc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d014      	beq.n	8002abc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	6939      	ldr	r1, [r7, #16]
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f8d0 	bl	8002c5c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f8d1 	bl	8002c74 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f874 	bl	8002c06 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3758      	adds	r7, #88	; 0x58
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	4000a800 	.word	0x4000a800
 8002b2c:	3fcfffff 	.word	0x3fcfffff
 8002b30:	4000a000 	.word	0x4000a000

08002b34 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002ca2:	4ba7      	ldr	r3, [pc, #668]	; (8002f40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	0091      	lsls	r1, r2, #2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cbc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	041a      	lsls	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ce2:	4b97      	ldr	r3, [pc, #604]	; (8002f40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	0091      	lsls	r1, r2, #2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4413      	add	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002d24:	4b86      	ldr	r3, [pc, #536]	; (8002f40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	0091      	lsls	r1, r2, #2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d3e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	041a      	lsls	r2, r3, #16
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	4413      	add	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d6c:	4b74      	ldr	r3, [pc, #464]	; (8002f40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	0091      	lsls	r1, r2, #2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d86:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	041a      	lsls	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	4413      	add	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002db4:	4b62      	ldr	r3, [pc, #392]	; (8002f40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	0091      	lsls	r1, r2, #2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002de0:	4b57      	ldr	r3, [pc, #348]	; (8002f40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	0091      	lsls	r1, r2, #2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dfa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	041a      	lsls	r2, r3, #16
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	4413      	add	r3, r2
 8002e18:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	0091      	lsls	r1, r2, #2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e3c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	041a      	lsls	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e58:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e60:	061a      	lsls	r2, r3, #24
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e70:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002e72:	4413      	add	r3, r2
 8002e74:	009a      	lsls	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	441a      	add	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	441a      	add	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d915      	bls.n	8002f68 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002f3c:	e006      	b.n	8002f4c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002f3e:	bf00      	nop
 8002f40:	ffff0003 	.word	0xffff0003
 8002f44:	10002b00 	.word	0x10002b00
 8002f48:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e010      	b.n	8002f8a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e005      	b.n	8002f7c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d3f3      	bcc.n	8002f70 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop

08002f98 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002fb6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e00a      	b.n	8002fda <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002fcc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002fd2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fd8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002fe4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002fea:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002ff0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003004:	6839      	ldr	r1, [r7, #0]
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	3304      	adds	r3, #4
 800301a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3304      	adds	r3, #4
 8003026:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e020      	b.n	8003070 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3303      	adds	r3, #3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3302      	adds	r3, #2
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	440b      	add	r3, r1
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003046:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3301      	adds	r3, #1
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	440b      	add	r3, r1
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003054:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	440a      	add	r2, r1
 800305c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800305e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	3304      	adds	r3, #4
 8003068:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3304      	adds	r3, #4
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	4a06      	ldr	r2, [pc, #24]	; (8003090 <FDCAN_CopyMessageToRAM+0xf8>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	461a      	mov	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	4293      	cmp	r3, r2
 8003080:	d3d5      	bcc.n	800302e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	3724      	adds	r7, #36	; 0x24
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	08009f08 	.word	0x08009f08

08003094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030a2:	4b89      	ldr	r3, [pc, #548]	; (80032c8 <HAL_GPIO_Init+0x234>)
 80030a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030a6:	e194      	b.n	80033d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8186 	beq.w	80033cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d005      	beq.n	80030d8 <HAL_GPIO_Init+0x44>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d130      	bne.n	800313a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800310e:	2201      	movs	r2, #1
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0201 	and.w	r2, r3, #1
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b03      	cmp	r3, #3
 8003144:	d017      	beq.n	8003176 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2203      	movs	r2, #3
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d123      	bne.n	80031ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	08da      	lsrs	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3208      	adds	r2, #8
 80031c4:	69b9      	ldr	r1, [r7, #24]
 80031c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	2203      	movs	r2, #3
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0203 	and.w	r2, r3, #3
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80e0 	beq.w	80033cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320c:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <HAL_GPIO_Init+0x238>)
 800320e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003212:	4a2e      	ldr	r2, [pc, #184]	; (80032cc <HAL_GPIO_Init+0x238>)
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800321c:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_GPIO_Init+0x238>)
 800321e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800322a:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <HAL_GPIO_Init+0x23c>)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <HAL_GPIO_Init+0x240>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d052      	beq.n	80032fc <HAL_GPIO_Init+0x268>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1f      	ldr	r2, [pc, #124]	; (80032d8 <HAL_GPIO_Init+0x244>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d031      	beq.n	80032c2 <HAL_GPIO_Init+0x22e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1e      	ldr	r2, [pc, #120]	; (80032dc <HAL_GPIO_Init+0x248>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02b      	beq.n	80032be <HAL_GPIO_Init+0x22a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <HAL_GPIO_Init+0x24c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d025      	beq.n	80032ba <HAL_GPIO_Init+0x226>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_GPIO_Init+0x250>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01f      	beq.n	80032b6 <HAL_GPIO_Init+0x222>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <HAL_GPIO_Init+0x254>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d019      	beq.n	80032b2 <HAL_GPIO_Init+0x21e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1a      	ldr	r2, [pc, #104]	; (80032ec <HAL_GPIO_Init+0x258>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_Init+0x21a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <HAL_GPIO_Init+0x25c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_Init+0x216>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_GPIO_Init+0x260>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_Init+0x212>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_GPIO_Init+0x264>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_Init+0x20e>
 800329e:	2309      	movs	r3, #9
 80032a0:	e02d      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032a2:	230a      	movs	r3, #10
 80032a4:	e02b      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032a6:	2308      	movs	r3, #8
 80032a8:	e029      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032aa:	2307      	movs	r3, #7
 80032ac:	e027      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032ae:	2306      	movs	r3, #6
 80032b0:	e025      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032b2:	2305      	movs	r3, #5
 80032b4:	e023      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032b6:	2304      	movs	r3, #4
 80032b8:	e021      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e01f      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032be:	2302      	movs	r3, #2
 80032c0:	e01d      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e01b      	b.n	80032fe <HAL_GPIO_Init+0x26a>
 80032c6:	bf00      	nop
 80032c8:	58000080 	.word	0x58000080
 80032cc:	58024400 	.word	0x58024400
 80032d0:	58000400 	.word	0x58000400
 80032d4:	58020000 	.word	0x58020000
 80032d8:	58020400 	.word	0x58020400
 80032dc:	58020800 	.word	0x58020800
 80032e0:	58020c00 	.word	0x58020c00
 80032e4:	58021000 	.word	0x58021000
 80032e8:	58021400 	.word	0x58021400
 80032ec:	58021800 	.word	0x58021800
 80032f0:	58021c00 	.word	0x58021c00
 80032f4:	58022000 	.word	0x58022000
 80032f8:	58022400 	.word	0x58022400
 80032fc:	2300      	movs	r3, #0
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	f002 0203 	and.w	r2, r2, #3
 8003304:	0092      	lsls	r2, r2, #2
 8003306:	4093      	lsls	r3, r2
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800330e:	4938      	ldr	r1, [pc, #224]	; (80033f0 <HAL_GPIO_Init+0x35c>)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	3302      	adds	r3, #2
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	3301      	adds	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f47f ae63 	bne.w	80030a8 <HAL_GPIO_Init+0x14>
  }
}
 80033e2:	bf00      	nop
 80033e4:	bf00      	nop
 80033e6:	3724      	adds	r7, #36	; 0x24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	58000400 	.word	0x58000400

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	4613      	mov	r3, r2
 8003402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003404:	787b      	ldrb	r3, [r7, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003410:	e003      	b.n	800341a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	041a      	lsls	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003438:	887a      	ldrh	r2, [r7, #2]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4013      	ands	r3, r2
 800343e:	041a      	lsls	r2, r3, #16
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	43d9      	mvns	r1, r3
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	400b      	ands	r3, r1
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	619a      	str	r2, [r3, #24]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003464:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_PWREx_ConfigSupply+0xb0>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	2b06      	cmp	r3, #6
 800346e:	d00a      	beq.n	8003486 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003470:	4b26      	ldr	r3, [pc, #152]	; (800350c <HAL_PWREx_ConfigSupply+0xb0>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d001      	beq.n	8003482 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e040      	b.n	8003504 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e03e      	b.n	8003504 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <HAL_PWREx_ConfigSupply+0xb0>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800348e:	491f      	ldr	r1, [pc, #124]	; (800350c <HAL_PWREx_ConfigSupply+0xb0>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4313      	orrs	r3, r2
 8003494:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003496:	f7fe fafd 	bl	8001a94 <HAL_GetTick>
 800349a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800349c:	e009      	b.n	80034b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800349e:	f7fe faf9 	bl	8001a94 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ac:	d901      	bls.n	80034b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e028      	b.n	8003504 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_PWREx_ConfigSupply+0xb0>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034be:	d1ee      	bne.n	800349e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b1e      	cmp	r3, #30
 80034c4:	d008      	beq.n	80034d8 <HAL_PWREx_ConfigSupply+0x7c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b2e      	cmp	r3, #46	; 0x2e
 80034ca:	d005      	beq.n	80034d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b1d      	cmp	r3, #29
 80034d0:	d002      	beq.n	80034d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b2d      	cmp	r3, #45	; 0x2d
 80034d6:	d114      	bne.n	8003502 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80034d8:	f7fe fadc 	bl	8001a94 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034de:	e009      	b.n	80034f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034e0:	f7fe fad8 	bl	8001a94 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ee:	d901      	bls.n	80034f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e007      	b.n	8003504 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_PWREx_ConfigSupply+0xb0>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d1ee      	bne.n	80034e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	58024800 	.word	0x58024800

08003510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	; 0x30
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f000 bc48 	b.w	8003db4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8088 	beq.w	8003642 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003532:	4b99      	ldr	r3, [pc, #612]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800353c:	4b96      	ldr	r3, [pc, #600]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	2b10      	cmp	r3, #16
 8003546:	d007      	beq.n	8003558 <HAL_RCC_OscConfig+0x48>
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	2b18      	cmp	r3, #24
 800354c:	d111      	bne.n	8003572 <HAL_RCC_OscConfig+0x62>
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d10c      	bne.n	8003572 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d06d      	beq.n	8003640 <HAL_RCC_OscConfig+0x130>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d169      	bne.n	8003640 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f000 bc21 	b.w	8003db4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x7a>
 800357c:	4b86      	ldr	r3, [pc, #536]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a85      	ldr	r2, [pc, #532]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e02e      	b.n	80035e8 <HAL_RCC_OscConfig+0xd8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x9c>
 8003592:	4b81      	ldr	r3, [pc, #516]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a80      	ldr	r2, [pc, #512]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b7e      	ldr	r3, [pc, #504]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a7d      	ldr	r2, [pc, #500]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e01d      	b.n	80035e8 <HAL_RCC_OscConfig+0xd8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0xc0>
 80035b6:	4b78      	ldr	r3, [pc, #480]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a77      	ldr	r2, [pc, #476]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b75      	ldr	r3, [pc, #468]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a74      	ldr	r2, [pc, #464]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0xd8>
 80035d0:	4b71      	ldr	r3, [pc, #452]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a70      	ldr	r2, [pc, #448]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b6e      	ldr	r3, [pc, #440]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6d      	ldr	r2, [pc, #436]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fa50 	bl	8001a94 <HAL_GetTick>
 80035f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fa4c 	bl	8001a94 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e3d4      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800360a:	4b63      	ldr	r3, [pc, #396]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0xe8>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe fa3c 	bl	8001a94 <HAL_GetTick>
 800361c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe fa38 	bl	8001a94 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e3c0      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003632:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x110>
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80ca 	beq.w	80037e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003650:	4b51      	ldr	r3, [pc, #324]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003658:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800365a:	4b4f      	ldr	r3, [pc, #316]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_RCC_OscConfig+0x166>
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	2b18      	cmp	r3, #24
 800366a:	d156      	bne.n	800371a <HAL_RCC_OscConfig+0x20a>
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d151      	bne.n	800371a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003676:	4b48      	ldr	r3, [pc, #288]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_RCC_OscConfig+0x17e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e392      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800368e:	4b42      	ldr	r3, [pc, #264]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 0219 	bic.w	r2, r3, #25
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	493f      	ldr	r1, [pc, #252]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe f9f8 	bl	8001a94 <HAL_GetTick>
 80036a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fe f9f4 	bl	8001a94 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e37c      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036ba:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c6:	f7fe f9f1 	bl	8001aac <HAL_GetREVID>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d817      	bhi.n	8003704 <HAL_RCC_OscConfig+0x1f4>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d108      	bne.n	80036ee <HAL_RCC_OscConfig+0x1de>
 80036dc:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036e4:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ec:	e07a      	b.n	80037e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	031b      	lsls	r3, r3, #12
 80036fc:	4926      	ldr	r1, [pc, #152]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003702:	e06f      	b.n	80037e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	4921      	ldr	r1, [pc, #132]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003718:	e064      	b.n	80037e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d047      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 0219 	bic.w	r2, r3, #25
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	491a      	ldr	r1, [pc, #104]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe f9ae 	bl	8001a94 <HAL_GetTick>
 8003738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fe f9aa 	bl	8001a94 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e332      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375a:	f7fe f9a7 	bl	8001aac <HAL_GetREVID>
 800375e:	4603      	mov	r3, r0
 8003760:	f241 0203 	movw	r2, #4099	; 0x1003
 8003764:	4293      	cmp	r3, r2
 8003766:	d819      	bhi.n	800379c <HAL_RCC_OscConfig+0x28c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d108      	bne.n	8003782 <HAL_RCC_OscConfig+0x272>
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003778:	4a07      	ldr	r2, [pc, #28]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377e:	6053      	str	r3, [r2, #4]
 8003780:	e030      	b.n	80037e4 <HAL_RCC_OscConfig+0x2d4>
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	031b      	lsls	r3, r3, #12
 8003790:	4901      	ldr	r1, [pc, #4]	; (8003798 <HAL_RCC_OscConfig+0x288>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
 8003796:	e025      	b.n	80037e4 <HAL_RCC_OscConfig+0x2d4>
 8003798:	58024400 	.word	0x58024400
 800379c:	4b9a      	ldr	r3, [pc, #616]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	4997      	ldr	r1, [pc, #604]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
 80037b0:	e018      	b.n	80037e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b2:	4b95      	ldr	r3, [pc, #596]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a94      	ldr	r2, [pc, #592]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7fe f969 	bl	8001a94 <HAL_GetTick>
 80037c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c6:	f7fe f965 	bl	8001a94 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e2ed      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037d8:	4b8b      	ldr	r3, [pc, #556]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a9 	beq.w	8003944 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f2:	4b85      	ldr	r3, [pc, #532]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037fc:	4b82      	ldr	r3, [pc, #520]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d007      	beq.n	8003818 <HAL_RCC_OscConfig+0x308>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b18      	cmp	r3, #24
 800380c:	d13a      	bne.n	8003884 <HAL_RCC_OscConfig+0x374>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d135      	bne.n	8003884 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003818:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_OscConfig+0x320>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	2b80      	cmp	r3, #128	; 0x80
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e2c1      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003830:	f7fe f93c 	bl	8001aac <HAL_GetREVID>
 8003834:	4603      	mov	r3, r0
 8003836:	f241 0203 	movw	r2, #4099	; 0x1003
 800383a:	4293      	cmp	r3, r2
 800383c:	d817      	bhi.n	800386e <HAL_RCC_OscConfig+0x35e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	2b20      	cmp	r3, #32
 8003844:	d108      	bne.n	8003858 <HAL_RCC_OscConfig+0x348>
 8003846:	4b70      	ldr	r3, [pc, #448]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800384e:	4a6e      	ldr	r2, [pc, #440]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 8003850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003854:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003856:	e075      	b.n	8003944 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003858:	4b6b      	ldr	r3, [pc, #428]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	069b      	lsls	r3, r3, #26
 8003866:	4968      	ldr	r1, [pc, #416]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800386c:	e06a      	b.n	8003944 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800386e:	4b66      	ldr	r3, [pc, #408]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	061b      	lsls	r3, r3, #24
 800387c:	4962      	ldr	r1, [pc, #392]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003882:	e05f      	b.n	8003944 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d042      	beq.n	8003912 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800388c:	4b5e      	ldr	r3, [pc, #376]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a5d      	ldr	r2, [pc, #372]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 8003892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe f8fc 	bl	8001a94 <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038a0:	f7fe f8f8 	bl	8001a94 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e280      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038b2:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038be:	f7fe f8f5 	bl	8001aac <HAL_GetREVID>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d817      	bhi.n	80038fc <HAL_RCC_OscConfig+0x3ec>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d108      	bne.n	80038e6 <HAL_RCC_OscConfig+0x3d6>
 80038d4:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038dc:	4a4a      	ldr	r2, [pc, #296]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80038de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e2:	6053      	str	r3, [r2, #4]
 80038e4:	e02e      	b.n	8003944 <HAL_RCC_OscConfig+0x434>
 80038e6:	4b48      	ldr	r3, [pc, #288]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	069b      	lsls	r3, r3, #26
 80038f4:	4944      	ldr	r1, [pc, #272]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
 80038fa:	e023      	b.n	8003944 <HAL_RCC_OscConfig+0x434>
 80038fc:	4b42      	ldr	r3, [pc, #264]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	493f      	ldr	r1, [pc, #252]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800390c:	4313      	orrs	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
 8003910:	e018      	b.n	8003944 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003912:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a3c      	ldr	r2, [pc, #240]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 8003918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fe f8b9 	bl	8001a94 <HAL_GetTick>
 8003922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003926:	f7fe f8b5 	bl	8001a94 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e23d      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003938:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f0      	bne.n	8003926 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d036      	beq.n	80039be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d019      	beq.n	800398c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe f896 	bl	8001a94 <HAL_GetTick>
 8003968:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396c:	f7fe f892 	bl	8001a94 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e21a      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x45c>
 800398a:	e018      	b.n	80039be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398c:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 800398e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003990:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fe f87c 	bl	8001a94 <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a0:	f7fe f878 	bl	8001a94 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e200      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80039b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d039      	beq.n	8003a3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01c      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80039d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039de:	f7fe f859 	bl	8001a94 <HAL_GetTick>
 80039e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e6:	f7fe f855 	bl	8001a94 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1dd      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_RCC_OscConfig+0x4f8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x4d6>
 8003a04:	e01b      	b.n	8003a3e <HAL_RCC_OscConfig+0x52e>
 8003a06:	bf00      	nop
 8003a08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a0c:	4b9b      	ldr	r3, [pc, #620]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a9a      	ldr	r2, [pc, #616]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a18:	f7fe f83c 	bl	8001a94 <HAL_GetTick>
 8003a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a20:	f7fe f838 	bl	8001a94 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e1c0      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a32:	4b92      	ldr	r3, [pc, #584]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8081 	beq.w	8003b4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a4c:	4b8c      	ldr	r3, [pc, #560]	; (8003c80 <HAL_RCC_OscConfig+0x770>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a8b      	ldr	r2, [pc, #556]	; (8003c80 <HAL_RCC_OscConfig+0x770>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a58:	f7fe f81c 	bl	8001a94 <HAL_GetTick>
 8003a5c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a60:	f7fe f818 	bl	8001a94 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1a0      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a72:	4b83      	ldr	r3, [pc, #524]	; (8003c80 <HAL_RCC_OscConfig+0x770>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d106      	bne.n	8003a94 <HAL_RCC_OscConfig+0x584>
 8003a86:	4b7d      	ldr	r3, [pc, #500]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	e02d      	b.n	8003af0 <HAL_RCC_OscConfig+0x5e0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10c      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x5a6>
 8003a9c:	4b77      	ldr	r3, [pc, #476]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a76      	ldr	r2, [pc, #472]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	4b74      	ldr	r3, [pc, #464]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a73      	ldr	r2, [pc, #460]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003aae:	f023 0304 	bic.w	r3, r3, #4
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab4:	e01c      	b.n	8003af0 <HAL_RCC_OscConfig+0x5e0>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x5c8>
 8003abe:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a6e      	ldr	r2, [pc, #440]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003ac4:	f043 0304 	orr.w	r3, r3, #4
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aca:	4b6c      	ldr	r3, [pc, #432]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a6b      	ldr	r2, [pc, #428]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad6:	e00b      	b.n	8003af0 <HAL_RCC_OscConfig+0x5e0>
 8003ad8:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a67      	ldr	r2, [pc, #412]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae4:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	4a64      	ldr	r2, [pc, #400]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003aea:	f023 0304 	bic.w	r3, r3, #4
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fd ffcc 	bl	8001a94 <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b00:	f7fd ffc8 	bl	8001a94 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e14e      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b16:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ee      	beq.n	8003b00 <HAL_RCC_OscConfig+0x5f0>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd ffb6 	bl	8001a94 <HAL_GetTick>
 8003b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2c:	f7fd ffb2 	bl	8001a94 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e138      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b42:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1ee      	bne.n	8003b2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 812d 	beq.w	8003db2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b58:	4b48      	ldr	r3, [pc, #288]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b60:	2b18      	cmp	r3, #24
 8003b62:	f000 80bd 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	f040 809e 	bne.w	8003cac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b70:	4b42      	ldr	r3, [pc, #264]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a41      	ldr	r2, [pc, #260]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fd ff8a 	bl	8001a94 <HAL_GetTick>
 8003b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fd ff86 	bl	8001a94 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e10e      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b96:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <HAL_RCC_OscConfig+0x774>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	4931      	ldr	r1, [pc, #196]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	628b      	str	r3, [r1, #40]	; 0x28
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	025b      	lsls	r3, r3, #9
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	3b01      	subs	r3, #1
 8003be6:	061b      	lsls	r3, r3, #24
 8003be8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bec:	4923      	ldr	r1, [pc, #140]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bfe:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_RCC_OscConfig+0x778>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c0a:	00d2      	lsls	r2, r2, #3
 8003c0c:	491b      	ldr	r1, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	f023 020c 	bic.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4917      	ldr	r1, [pc, #92]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c24:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	f023 0202 	bic.w	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	4912      	ldr	r1, [pc, #72]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c42:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <HAL_RCC_OscConfig+0x76c>)
 8003c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd ff0f 	bl	8001a94 <HAL_GetTick>
 8003c76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c78:	e011      	b.n	8003c9e <HAL_RCC_OscConfig+0x78e>
 8003c7a:	bf00      	nop
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	58024800 	.word	0x58024800
 8003c84:	fffffc0c 	.word	0xfffffc0c
 8003c88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd ff02 	bl	8001a94 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e08a      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c9e:	4b47      	ldr	r3, [pc, #284]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x77c>
 8003caa:	e082      	b.n	8003db2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4b43      	ldr	r3, [pc, #268]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a42      	ldr	r2, [pc, #264]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd feec 	bl	8001a94 <HAL_GetTick>
 8003cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fd fee8 	bl	8001a94 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e070      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cd2:	4b3a      	ldr	r3, [pc, #232]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x7b0>
 8003cde:	e068      	b.n	8003db2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ce0:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ce6:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d031      	beq.n	8003d58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f003 0203 	and.w	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d12a      	bne.n	8003d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d122      	bne.n	8003d58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d11a      	bne.n	8003d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0a5b      	lsrs	r3, r3, #9
 8003d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d111      	bne.n	8003d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0c1b      	lsrs	r3, r3, #16
 8003d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d108      	bne.n	8003d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0e1b      	lsrs	r3, r3, #24
 8003d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e02b      	b.n	8003db4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d5c:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d60:	08db      	lsrs	r3, r3, #3
 8003d62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d01f      	beq.n	8003db2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a11      	ldr	r2, [pc, #68]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d7e:	f7fd fe89 	bl	8001a94 <HAL_GetTick>
 8003d82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d84:	bf00      	nop
 8003d86:	f7fd fe85 	bl	8001a94 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d0f9      	beq.n	8003d86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <HAL_RCC_OscConfig+0x8b0>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d9e:	00d2      	lsls	r2, r2, #3
 8003da0:	4906      	ldr	r1, [pc, #24]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <HAL_RCC_OscConfig+0x8ac>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3730      	adds	r7, #48	; 0x30
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	58024400 	.word	0x58024400
 8003dc0:	ffff0007 	.word	0xffff0007

08003dc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e19c      	b.n	8004112 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b8a      	ldr	r3, [pc, #552]	; (8004004 <HAL_RCC_ClockConfig+0x240>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d910      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b87      	ldr	r3, [pc, #540]	; (8004004 <HAL_RCC_ClockConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 020f 	bic.w	r2, r3, #15
 8003dee:	4985      	ldr	r1, [pc, #532]	; (8004004 <HAL_RCC_ClockConfig+0x240>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b83      	ldr	r3, [pc, #524]	; (8004004 <HAL_RCC_ClockConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e184      	b.n	8004112 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	4b7b      	ldr	r3, [pc, #492]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d908      	bls.n	8003e36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e24:	4b78      	ldr	r3, [pc, #480]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4975      	ldr	r1, [pc, #468]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d010      	beq.n	8003e64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	4b70      	ldr	r3, [pc, #448]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d908      	bls.n	8003e64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e52:	4b6d      	ldr	r3, [pc, #436]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	496a      	ldr	r1, [pc, #424]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	4b64      	ldr	r3, [pc, #400]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d908      	bls.n	8003e92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e80:	4b61      	ldr	r3, [pc, #388]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	495e      	ldr	r1, [pc, #376]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d010      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	4b59      	ldr	r3, [pc, #356]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d908      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003eae:	4b56      	ldr	r3, [pc, #344]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	4953      	ldr	r1, [pc, #332]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	4b4d      	ldr	r3, [pc, #308]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d908      	bls.n	8003eee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b4a      	ldr	r3, [pc, #296]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f023 020f 	bic.w	r2, r3, #15
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4947      	ldr	r1, [pc, #284]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d055      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003efa:	4b43      	ldr	r3, [pc, #268]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	4940      	ldr	r1, [pc, #256]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d107      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f14:	4b3c      	ldr	r3, [pc, #240]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d121      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0f6      	b.n	8004112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d107      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f2c:	4b36      	ldr	r3, [pc, #216]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d115      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0ea      	b.n	8004112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f44:	4b30      	ldr	r3, [pc, #192]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0de      	b.n	8004112 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f54:	4b2c      	ldr	r3, [pc, #176]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0d6      	b.n	8004112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f64:	4b28      	ldr	r3, [pc, #160]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f023 0207 	bic.w	r2, r3, #7
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4925      	ldr	r1, [pc, #148]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f76:	f7fd fd8d 	bl	8001a94 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7e:	f7fd fd89 	bl	8001a94 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0be      	b.n	8004112 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f94:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d1eb      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d010      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d208      	bcs.n	8003fd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f023 020f 	bic.w	r2, r3, #15
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	490e      	ldr	r1, [pc, #56]	; (8004008 <HAL_RCC_ClockConfig+0x244>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_ClockConfig+0x240>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d214      	bcs.n	800400c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_RCC_ClockConfig+0x240>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 020f 	bic.w	r2, r3, #15
 8003fea:	4906      	ldr	r1, [pc, #24]	; (8004004 <HAL_RCC_ClockConfig+0x240>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b04      	ldr	r3, [pc, #16]	; (8004004 <HAL_RCC_ClockConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e086      	b.n	8004112 <HAL_RCC_ClockConfig+0x34e>
 8004004:	52002000 	.word	0x52002000
 8004008:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	4b3f      	ldr	r3, [pc, #252]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004024:	429a      	cmp	r2, r3
 8004026:	d208      	bcs.n	800403a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004028:	4b3c      	ldr	r3, [pc, #240]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	4939      	ldr	r1, [pc, #228]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 8004036:	4313      	orrs	r3, r2
 8004038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d010      	beq.n	8004068 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004052:	429a      	cmp	r2, r3
 8004054:	d208      	bcs.n	8004068 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004056:	4b31      	ldr	r3, [pc, #196]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	492e      	ldr	r1, [pc, #184]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 8004064:	4313      	orrs	r3, r2
 8004066:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004080:	429a      	cmp	r2, r3
 8004082:	d208      	bcs.n	8004096 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	4922      	ldr	r1, [pc, #136]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 8004092:	4313      	orrs	r3, r2
 8004094:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d010      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d208      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040b2:	4b1a      	ldr	r3, [pc, #104]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4917      	ldr	r1, [pc, #92]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040c4:	f000 f834 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b14      	ldr	r3, [pc, #80]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	4912      	ldr	r1, [pc, #72]	; (8004120 <HAL_RCC_ClockConfig+0x35c>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040e2:	4b0e      	ldr	r3, [pc, #56]	; (800411c <HAL_RCC_ClockConfig+0x358>)
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	4a0d      	ldr	r2, [pc, #52]	; (8004120 <HAL_RCC_ClockConfig+0x35c>)
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <HAL_RCC_ClockConfig+0x360>)
 80040fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <HAL_RCC_ClockConfig+0x364>)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_RCC_ClockConfig+0x368>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd fbbe 	bl	8001888 <HAL_InitTick>
 800410c:	4603      	mov	r3, r0
 800410e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	58024400 	.word	0x58024400
 8004120:	08009ef8 	.word	0x08009ef8
 8004124:	24000004 	.word	0x24000004
 8004128:	24000000 	.word	0x24000000
 800412c:	24000014 	.word	0x24000014

08004130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004136:	4bb3      	ldr	r3, [pc, #716]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800413e:	2b18      	cmp	r3, #24
 8004140:	f200 8155 	bhi.w	80043ee <HAL_RCC_GetSysClockFreq+0x2be>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	080041b1 	.word	0x080041b1
 8004150:	080043ef 	.word	0x080043ef
 8004154:	080043ef 	.word	0x080043ef
 8004158:	080043ef 	.word	0x080043ef
 800415c:	080043ef 	.word	0x080043ef
 8004160:	080043ef 	.word	0x080043ef
 8004164:	080043ef 	.word	0x080043ef
 8004168:	080043ef 	.word	0x080043ef
 800416c:	080041d7 	.word	0x080041d7
 8004170:	080043ef 	.word	0x080043ef
 8004174:	080043ef 	.word	0x080043ef
 8004178:	080043ef 	.word	0x080043ef
 800417c:	080043ef 	.word	0x080043ef
 8004180:	080043ef 	.word	0x080043ef
 8004184:	080043ef 	.word	0x080043ef
 8004188:	080043ef 	.word	0x080043ef
 800418c:	080041dd 	.word	0x080041dd
 8004190:	080043ef 	.word	0x080043ef
 8004194:	080043ef 	.word	0x080043ef
 8004198:	080043ef 	.word	0x080043ef
 800419c:	080043ef 	.word	0x080043ef
 80041a0:	080043ef 	.word	0x080043ef
 80041a4:	080043ef 	.word	0x080043ef
 80041a8:	080043ef 	.word	0x080043ef
 80041ac:	080041e3 	.word	0x080041e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041b0:	4b94      	ldr	r3, [pc, #592]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041bc:	4b91      	ldr	r3, [pc, #580]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	08db      	lsrs	r3, r3, #3
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	4a90      	ldr	r2, [pc, #576]	; (8004408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
 80041cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80041ce:	e111      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041d0:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041d2:	61bb      	str	r3, [r7, #24]
      break;
 80041d4:	e10e      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80041d6:	4b8d      	ldr	r3, [pc, #564]	; (800440c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041d8:	61bb      	str	r3, [r7, #24]
      break;
 80041da:	e10b      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80041dc:	4b8c      	ldr	r3, [pc, #560]	; (8004410 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80041de:	61bb      	str	r3, [r7, #24]
      break;
 80041e0:	e108      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041e2:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80041ec:	4b85      	ldr	r3, [pc, #532]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041f8:	4b82      	ldr	r3, [pc, #520]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004202:	4b80      	ldr	r3, [pc, #512]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	08db      	lsrs	r3, r3, #3
 8004208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80e1 	beq.w	80043e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b02      	cmp	r3, #2
 800422a:	f000 8083 	beq.w	8004334 <HAL_RCC_GetSysClockFreq+0x204>
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b02      	cmp	r3, #2
 8004232:	f200 80a1 	bhi.w	8004378 <HAL_RCC_GetSysClockFreq+0x248>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x114>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d056      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004242:	e099      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004244:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02d      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	08db      	lsrs	r3, r3, #3
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	4a6b      	ldr	r2, [pc, #428]	; (8004408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
 8004260:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427a:	4b62      	ldr	r3, [pc, #392]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428a:	ed97 6a02 	vldr	s12, [r7, #8]
 800428e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004414 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800429e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042aa:	e087      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004418 <HAL_RCC_GetSysClockFreq+0x2e8>
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b51      	ldr	r3, [pc, #324]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80042d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042ee:	e065      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800441c <HAL_RCC_GetSysClockFreq+0x2ec>
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b40      	ldr	r3, [pc, #256]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a02 	vldr	s12, [r7, #8]
 8004316:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004332:	e043      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004420 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a02 	vldr	s12, [r7, #8]
 800435a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004376:	e021      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a26 	vldr	s13, [pc, #152]	; 800441c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a02 	vldr	s12, [r7, #8]
 800439e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	0a5b      	lsrs	r3, r3, #9
 80043c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c6:	3301      	adds	r3, #1
 80043c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	ee07 3a90 	vmov	s15, r3
 80043d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80043d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e0:	ee17 3a90 	vmov	r3, s15
 80043e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80043e6:	e005      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
      break;
 80043ec:	e002      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80043ee:	4b07      	ldr	r3, [pc, #28]	; (800440c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043f0:	61bb      	str	r3, [r7, #24]
      break;
 80043f2:	bf00      	nop
  }

  return sysclockfreq;
 80043f4:	69bb      	ldr	r3, [r7, #24]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3724      	adds	r7, #36	; 0x24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	58024400 	.word	0x58024400
 8004408:	03d09000 	.word	0x03d09000
 800440c:	003d0900 	.word	0x003d0900
 8004410:	017d7840 	.word	0x017d7840
 8004414:	46000000 	.word	0x46000000
 8004418:	4c742400 	.word	0x4c742400
 800441c:	4a742400 	.word	0x4a742400
 8004420:	4bbebc20 	.word	0x4bbebc20

08004424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800442a:	f7ff fe81 	bl	8004130 <HAL_RCC_GetSysClockFreq>
 800442e:	4602      	mov	r2, r0
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_RCC_GetHCLKFreq+0x50>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	0a1b      	lsrs	r3, r3, #8
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	490f      	ldr	r1, [pc, #60]	; (8004478 <HAL_RCC_GetHCLKFreq+0x54>)
 800443c:	5ccb      	ldrb	r3, [r1, r3]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	fa22 f303 	lsr.w	r3, r2, r3
 8004446:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <HAL_RCC_GetHCLKFreq+0x50>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	4a09      	ldr	r2, [pc, #36]	; (8004478 <HAL_RCC_GetHCLKFreq+0x54>)
 8004452:	5cd3      	ldrb	r3, [r2, r3]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	fa22 f303 	lsr.w	r3, r2, r3
 800445e:	4a07      	ldr	r2, [pc, #28]	; (800447c <HAL_RCC_GetHCLKFreq+0x58>)
 8004460:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004462:	4a07      	ldr	r2, [pc, #28]	; (8004480 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <HAL_RCC_GetHCLKFreq+0x58>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	58024400 	.word	0x58024400
 8004478:	08009ef8 	.word	0x08009ef8
 800447c:	24000004 	.word	0x24000004
 8004480:	24000000 	.word	0x24000000

08004484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004488:	f7ff ffcc 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4904      	ldr	r1, [pc, #16]	; (80044ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	58024400 	.word	0x58024400
 80044ac:	08009ef8 	.word	0x08009ef8

080044b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	223f      	movs	r2, #63	; 0x3f
 80044be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCC_GetClockConfig+0x7c>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0207 	and.w	r2, r3, #7
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80044cc:	4b17      	ldr	r3, [pc, #92]	; (800452c <HAL_RCC_GetClockConfig+0x7c>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80044d8:	4b14      	ldr	r3, [pc, #80]	; (800452c <HAL_RCC_GetClockConfig+0x7c>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f003 020f 	and.w	r2, r3, #15
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80044e4:	4b11      	ldr	r3, [pc, #68]	; (800452c <HAL_RCC_GetClockConfig+0x7c>)
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80044f0:	4b0e      	ldr	r3, [pc, #56]	; (800452c <HAL_RCC_GetClockConfig+0x7c>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_GetClockConfig+0x7c>)
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004508:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_RCC_GetClockConfig+0x7c>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCC_GetClockConfig+0x80>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	601a      	str	r2, [r3, #0]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	58024400 	.word	0x58024400
 8004530:	52002000 	.word	0x52002000

08004534 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004538:	b0ca      	sub	sp, #296	; 0x128
 800453a:	af00      	add	r7, sp, #0
 800453c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004540:	2300      	movs	r3, #0
 8004542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004546:	2300      	movs	r3, #0
 8004548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004558:	2500      	movs	r5, #0
 800455a:	ea54 0305 	orrs.w	r3, r4, r5
 800455e:	d049      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004566:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800456a:	d02f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800456c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004570:	d828      	bhi.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004576:	d01a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800457c:	d822      	bhi.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004586:	d007      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004588:	e01c      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458a:	4bb8      	ldr	r3, [pc, #736]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	4ab7      	ldr	r2, [pc, #732]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004594:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004596:	e01a      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459c:	3308      	adds	r3, #8
 800459e:	2102      	movs	r1, #2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f001 f9d1 	bl	8005948 <RCCEx_PLL2_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045ac:	e00f      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b2:	3328      	adds	r3, #40	; 0x28
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 fa78 	bl	8005aac <RCCEx_PLL3_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80045c2:	e004      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80045cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045d6:	4ba5      	ldr	r3, [pc, #660]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e4:	4aa1      	ldr	r2, [pc, #644]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045e6:	430b      	orrs	r3, r1
 80045e8:	6513      	str	r3, [r2, #80]	; 0x50
 80045ea:	e003      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004600:	f04f 0900 	mov.w	r9, #0
 8004604:	ea58 0309 	orrs.w	r3, r8, r9
 8004608:	d047      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	2b04      	cmp	r3, #4
 8004612:	d82a      	bhi.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004631 	.word	0x08004631
 8004620:	0800463f 	.word	0x0800463f
 8004624:	08004655 	.word	0x08004655
 8004628:	08004673 	.word	0x08004673
 800462c:	08004673 	.word	0x08004673
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004630:	4b8e      	ldr	r3, [pc, #568]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	4a8d      	ldr	r2, [pc, #564]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800463c:	e01a      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004642:	3308      	adds	r3, #8
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f001 f97e 	bl	8005948 <RCCEx_PLL2_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004652:	e00f      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004658:	3328      	adds	r3, #40	; 0x28
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f001 fa25 	bl	8005aac <RCCEx_PLL3_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004668:	e004      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800467c:	4b7b      	ldr	r3, [pc, #492]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	f023 0107 	bic.w	r1, r3, #7
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	4a78      	ldr	r2, [pc, #480]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800468c:	430b      	orrs	r3, r1
 800468e:	6513      	str	r3, [r2, #80]	; 0x50
 8004690:	e003      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80046a6:	f04f 0b00 	mov.w	fp, #0
 80046aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80046ae:	d04c      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ba:	d030      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80046bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c0:	d829      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046c2:	2bc0      	cmp	r3, #192	; 0xc0
 80046c4:	d02d      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80046c6:	2bc0      	cmp	r3, #192	; 0xc0
 80046c8:	d825      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046ca:	2b80      	cmp	r3, #128	; 0x80
 80046cc:	d018      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d821      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80046d6:	2b40      	cmp	r3, #64	; 0x40
 80046d8:	d007      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80046da:	e01c      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046dc:	4b63      	ldr	r3, [pc, #396]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	4a62      	ldr	r2, [pc, #392]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046e8:	e01c      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ee:	3308      	adds	r3, #8
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 f928 	bl	8005948 <RCCEx_PLL2_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80046fe:	e011      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004704:	3328      	adds	r3, #40	; 0x28
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f001 f9cf 	bl	8005aac <RCCEx_PLL3_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004714:	e006      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800471c:	e002      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800472c:	4b4f      	ldr	r3, [pc, #316]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800472e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004730:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	4a4c      	ldr	r2, [pc, #304]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800473c:	430b      	orrs	r3, r1
 800473e:	6513      	str	r3, [r2, #80]	; 0x50
 8004740:	e003      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004756:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800475a:	2300      	movs	r3, #0
 800475c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004760:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004764:	460b      	mov	r3, r1
 8004766:	4313      	orrs	r3, r2
 8004768:	d053      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800476e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004772:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004776:	d035      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800477c:	d82e      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800477e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004782:	d031      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004784:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004788:	d828      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800478a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478e:	d01a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004794:	d822      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800479a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800479e:	d007      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80047a0:	e01c      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047a2:	4b32      	ldr	r3, [pc, #200]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	4a31      	ldr	r2, [pc, #196]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047ae:	e01c      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b4:	3308      	adds	r3, #8
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 f8c5 	bl	8005948 <RCCEx_PLL2_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80047c4:	e011      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ca:	3328      	adds	r3, #40	; 0x28
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f96c 	bl	8005aac <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047da:	e006      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047e2:	e002      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80047e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004802:	4a1a      	ldr	r2, [pc, #104]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004804:	430b      	orrs	r3, r1
 8004806:	6593      	str	r3, [r2, #88]	; 0x58
 8004808:	e003      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800480e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800481e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004822:	2300      	movs	r3, #0
 8004824:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004828:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d056      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004836:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800483a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800483e:	d038      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004844:	d831      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800484a:	d034      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800484c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004850:	d82b      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004856:	d01d      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800485c:	d825      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004868:	e01f      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004870:	4ba2      	ldr	r3, [pc, #648]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4aa1      	ldr	r2, [pc, #644]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800487c:	e01c      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004882:	3308      	adds	r3, #8
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f001 f85e 	bl	8005948 <RCCEx_PLL2_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004892:	e011      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004898:	3328      	adds	r3, #40	; 0x28
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f001 f905 	bl	8005aac <RCCEx_PLL3_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048c0:	4b8e      	ldr	r3, [pc, #568]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048d0:	4a8a      	ldr	r2, [pc, #552]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6593      	str	r3, [r2, #88]	; 0x58
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80048ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d03a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	2b30      	cmp	r3, #48	; 0x30
 8004908:	d01f      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800490a:	2b30      	cmp	r3, #48	; 0x30
 800490c:	d819      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800490e:	2b20      	cmp	r3, #32
 8004910:	d00c      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004912:	2b20      	cmp	r3, #32
 8004914:	d815      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d019      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800491a:	2b10      	cmp	r3, #16
 800491c:	d111      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491e:	4b77      	ldr	r3, [pc, #476]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	4a76      	ldr	r2, [pc, #472]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004928:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800492a:	e011      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004930:	3308      	adds	r3, #8
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f001 f807 	bl	8005948 <RCCEx_PLL2_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004940:	e006      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004948:	e002      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800494e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004950:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004958:	4b68      	ldr	r3, [pc, #416]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004966:	4a65      	ldr	r2, [pc, #404]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004968:	430b      	orrs	r3, r1
 800496a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800496c:	e003      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004972:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004982:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800498c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d051      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a0:	d035      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80049a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a6:	d82e      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80049a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049ac:	d031      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80049ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049b2:	d828      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b8:	d01a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80049ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049be:	d822      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80049c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c8:	d007      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80049ca:	e01c      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	4a4a      	ldr	r2, [pc, #296]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049d8:	e01c      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049de:	3308      	adds	r3, #8
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 ffb0 	bl	8005948 <RCCEx_PLL2_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80049ee:	e011      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f4:	3328      	adds	r3, #40	; 0x28
 80049f6:	2100      	movs	r1, #0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f857 	bl	8005aac <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004a04:	e006      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a0c:	e002      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a1c:	4b37      	ldr	r3, [pc, #220]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2a:	4a34      	ldr	r2, [pc, #208]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6513      	str	r3, [r2, #80]	; 0x50
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d056      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a64:	d033      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004a66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a6a:	d82c      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a70:	d02f      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a76:	d826      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a7c:	d02b      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004a7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a82:	d820      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a88:	d012      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8e:	d81a      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d022      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d115      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 ff50 	bl	8005948 <RCCEx_PLL2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004aae:	e015      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab4:	3328      	adds	r3, #40	; 0x28
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fff7 	bl	8005aac <RCCEx_PLL3_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ac4:	e00a      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004acc:	e006      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e004      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e002      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004adc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af2:	4a02      	ldr	r2, [pc, #8]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af4:	430b      	orrs	r3, r1
 8004af6:	6513      	str	r3, [r2, #80]	; 0x50
 8004af8:	e006      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004afa:	bf00      	nop
 8004afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	d055      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b34:	d033      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b3a:	d82c      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b40:	d02f      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b46:	d826      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b4c:	d02b      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004b4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b52:	d820      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b58:	d012      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5e:	d81a      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d022      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b68:	d115      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b6e:	3308      	adds	r3, #8
 8004b70:	2101      	movs	r1, #1
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fee8 	bl	8005948 <RCCEx_PLL2_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b7e:	e015      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b84:	3328      	adds	r3, #40	; 0x28
 8004b86:	2101      	movs	r1, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 ff8f 	bl	8005aac <RCCEx_PLL3_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b94:	e00a      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004bb4:	4ba3      	ldr	r3, [pc, #652]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bc4:	4a9f      	ldr	r2, [pc, #636]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bca:	e003      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004be0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	d037      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfe:	d00e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c04:	d816      	bhi.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c0e:	d111      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c10:	4b8c      	ldr	r3, [pc, #560]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	4a8b      	ldr	r2, [pc, #556]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c1c:	e00f      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c22:	3308      	adds	r3, #8
 8004c24:	2101      	movs	r1, #1
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fe8e 	bl	8005948 <RCCEx_PLL2_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004c32:	e004      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c3a:	e000      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10a      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c46:	4b7f      	ldr	r3, [pc, #508]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	4a7b      	ldr	r2, [pc, #492]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6513      	str	r3, [r2, #80]	; 0x50
 8004c5a:	e003      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d039      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d81c      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004c8e:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c94:	08004cd1 	.word	0x08004cd1
 8004c98:	08004ca5 	.word	0x08004ca5
 8004c9c:	08004cb3 	.word	0x08004cb3
 8004ca0:	08004cd1 	.word	0x08004cd1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca4:	4b67      	ldr	r3, [pc, #412]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	4a66      	ldr	r2, [pc, #408]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cb0:	e00f      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fe44 	bl	8005948 <RCCEx_PLL2_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004cc6:	e004      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cce:	e000      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004cda:	4b5a      	ldr	r3, [pc, #360]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	f023 0103 	bic.w	r1, r3, #3
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	4a56      	ldr	r2, [pc, #344]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cea:	430b      	orrs	r3, r1
 8004cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cee:	e003      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004d04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004d12:	460b      	mov	r3, r1
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f000 809f 	beq.w	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1a:	4b4b      	ldr	r3, [pc, #300]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a4a      	ldr	r2, [pc, #296]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d26:	f7fc feb5 	bl	8001a94 <HAL_GetTick>
 8004d2a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d30:	f7fc feb0 	bl	8001a94 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b64      	cmp	r3, #100	; 0x64
 8004d3e:	d903      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d46:	e005      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d48:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ed      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004d54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d179      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004d5c:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d68:	4053      	eors	r3, r2
 8004d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d72:	4b34      	ldr	r3, [pc, #208]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d7e:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a30      	ldr	r2, [pc, #192]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d88:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a2d      	ldr	r2, [pc, #180]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d96:	4a2b      	ldr	r2, [pc, #172]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004daa:	d118      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fc fe72 	bl	8001a94 <HAL_GetTick>
 8004db0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004db4:	e00d      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fc fe6d 	bl	8001a94 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004dc0:	1ad2      	subs	r2, r2, r3
 8004dc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d903      	bls.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004dd0:	e005      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0eb      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d129      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df6:	d10e      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004df8:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e08:	091a      	lsrs	r2, r3, #4
 8004e0a:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	4a0d      	ldr	r2, [pc, #52]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6113      	str	r3, [r2, #16]
 8004e14:	e005      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e20:	6113      	str	r3, [r2, #16]
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e32:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6713      	str	r3, [r2, #112]	; 0x70
 8004e38:	e00e      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004e42:	e009      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004e44:	58024400 	.word	0x58024400
 8004e48:	58024800 	.word	0x58024800
 8004e4c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f002 0301 	and.w	r3, r2, #1
 8004e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f000 8089 	beq.w	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e80:	2b28      	cmp	r3, #40	; 0x28
 8004e82:	d86b      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004f65 	.word	0x08004f65
 8004e90:	08004f5d 	.word	0x08004f5d
 8004e94:	08004f5d 	.word	0x08004f5d
 8004e98:	08004f5d 	.word	0x08004f5d
 8004e9c:	08004f5d 	.word	0x08004f5d
 8004ea0:	08004f5d 	.word	0x08004f5d
 8004ea4:	08004f5d 	.word	0x08004f5d
 8004ea8:	08004f5d 	.word	0x08004f5d
 8004eac:	08004f31 	.word	0x08004f31
 8004eb0:	08004f5d 	.word	0x08004f5d
 8004eb4:	08004f5d 	.word	0x08004f5d
 8004eb8:	08004f5d 	.word	0x08004f5d
 8004ebc:	08004f5d 	.word	0x08004f5d
 8004ec0:	08004f5d 	.word	0x08004f5d
 8004ec4:	08004f5d 	.word	0x08004f5d
 8004ec8:	08004f5d 	.word	0x08004f5d
 8004ecc:	08004f47 	.word	0x08004f47
 8004ed0:	08004f5d 	.word	0x08004f5d
 8004ed4:	08004f5d 	.word	0x08004f5d
 8004ed8:	08004f5d 	.word	0x08004f5d
 8004edc:	08004f5d 	.word	0x08004f5d
 8004ee0:	08004f5d 	.word	0x08004f5d
 8004ee4:	08004f5d 	.word	0x08004f5d
 8004ee8:	08004f5d 	.word	0x08004f5d
 8004eec:	08004f65 	.word	0x08004f65
 8004ef0:	08004f5d 	.word	0x08004f5d
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004f5d 	.word	0x08004f5d
 8004efc:	08004f5d 	.word	0x08004f5d
 8004f00:	08004f5d 	.word	0x08004f5d
 8004f04:	08004f5d 	.word	0x08004f5d
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004f65 	.word	0x08004f65
 8004f10:	08004f5d 	.word	0x08004f5d
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f5d 	.word	0x08004f5d
 8004f1c:	08004f5d 	.word	0x08004f5d
 8004f20:	08004f5d 	.word	0x08004f5d
 8004f24:	08004f5d 	.word	0x08004f5d
 8004f28:	08004f5d 	.word	0x08004f5d
 8004f2c:	08004f65 	.word	0x08004f65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f34:	3308      	adds	r3, #8
 8004f36:	2101      	movs	r1, #1
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fd05 	bl	8005948 <RCCEx_PLL2_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f44:	e00f      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4a:	3328      	adds	r3, #40	; 0x28
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fdac 	bl	8005aac <RCCEx_PLL3_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004f5a:	e004      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f62:	e000      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004f6e:	4bbf      	ldr	r3, [pc, #764]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7c:	4abb      	ldr	r2, [pc, #748]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	6553      	str	r3, [r2, #84]	; 0x54
 8004f82:	e003      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f002 0302 	and.w	r3, r2, #2
 8004f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004fa2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d041      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d824      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08005009 	.word	0x08005009
 8004fc0:	08004fd5 	.word	0x08004fd5
 8004fc4:	08004feb 	.word	0x08004feb
 8004fc8:	08005009 	.word	0x08005009
 8004fcc:	08005009 	.word	0x08005009
 8004fd0:	08005009 	.word	0x08005009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd8:	3308      	adds	r3, #8
 8004fda:	2101      	movs	r1, #1
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fcb3 	bl	8005948 <RCCEx_PLL2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004fe8:	e00f      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fee:	3328      	adds	r3, #40	; 0x28
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fd5a 	bl	8005aac <RCCEx_PLL3_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004ffe:	e004      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005006:	e000      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005012:	4b96      	ldr	r3, [pc, #600]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	f023 0107 	bic.w	r1, r3, #7
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005020:	4a92      	ldr	r2, [pc, #584]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005022:	430b      	orrs	r3, r1
 8005024:	6553      	str	r3, [r2, #84]	; 0x54
 8005026:	e003      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800502c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f002 0304 	and.w	r3, r2, #4
 800503c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005046:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d044      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005058:	2b05      	cmp	r3, #5
 800505a:	d825      	bhi.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	080050b1 	.word	0x080050b1
 8005068:	0800507d 	.word	0x0800507d
 800506c:	08005093 	.word	0x08005093
 8005070:	080050b1 	.word	0x080050b1
 8005074:	080050b1 	.word	0x080050b1
 8005078:	080050b1 	.word	0x080050b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800507c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005080:	3308      	adds	r3, #8
 8005082:	2101      	movs	r1, #1
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fc5f 	bl	8005948 <RCCEx_PLL2_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005090:	e00f      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005096:	3328      	adds	r3, #40	; 0x28
 8005098:	2101      	movs	r1, #1
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fd06 	bl	8005aac <RCCEx_PLL3_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80050a6:	e004      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050ae:	e000      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80050b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050ba:	4b6c      	ldr	r3, [pc, #432]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050be:	f023 0107 	bic.w	r1, r3, #7
 80050c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ca:	4a68      	ldr	r2, [pc, #416]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6593      	str	r3, [r2, #88]	; 0x58
 80050d0:	e003      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	f002 0320 	and.w	r3, r2, #32
 80050e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ea:	2300      	movs	r3, #0
 80050ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050f4:	460b      	mov	r3, r1
 80050f6:	4313      	orrs	r3, r2
 80050f8:	d055      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005106:	d033      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800510c:	d82c      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d02f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d826      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800511a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800511e:	d02b      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005124:	d820      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800512a:	d012      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800512c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005130:	d81a      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d022      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800513a:	d115      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005140:	3308      	adds	r3, #8
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fbff 	bl	8005948 <RCCEx_PLL2_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005150:	e015      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005156:	3328      	adds	r3, #40	; 0x28
 8005158:	2102      	movs	r1, #2
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fca6 	bl	8005aac <RCCEx_PLL3_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005166:	e00a      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800516e:	e006      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005170:	bf00      	nop
 8005172:	e004      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005174:	bf00      	nop
 8005176:	e002      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005178:	bf00      	nop
 800517a:	e000      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800517c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005186:	4b39      	ldr	r3, [pc, #228]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800518e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005196:	4a35      	ldr	r2, [pc, #212]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005198:	430b      	orrs	r3, r1
 800519a:	6553      	str	r3, [r2, #84]	; 0x54
 800519c:	e003      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80051a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80051b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051b6:	2300      	movs	r3, #0
 80051b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80051bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4313      	orrs	r3, r2
 80051c4:	d058      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051d2:	d033      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80051d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051d8:	d82c      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051de:	d02f      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d826      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ea:	d02b      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80051ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051f0:	d820      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f6:	d012      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fc:	d81a      	bhi.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d022      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005206:	d115      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520c:	3308      	adds	r3, #8
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fb99 	bl	8005948 <RCCEx_PLL2_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800521c:	e015      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800521e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005222:	3328      	adds	r3, #40	; 0x28
 8005224:	2102      	movs	r1, #2
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fc40 	bl	8005aac <RCCEx_PLL3_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005232:	e00a      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800523a:	e006      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800523c:	bf00      	nop
 800523e:	e004      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005240:	bf00      	nop
 8005242:	e002      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005244:	bf00      	nop
 8005246:	e000      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800524a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10e      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005262:	4a02      	ldr	r2, [pc, #8]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005264:	430b      	orrs	r3, r1
 8005266:	6593      	str	r3, [r2, #88]	; 0x58
 8005268:	e006      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800526a:	bf00      	nop
 800526c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005274:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800528e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d055      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052a4:	d033      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80052a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80052aa:	d82c      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b0:	d02f      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80052b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b6:	d826      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052bc:	d02b      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80052be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80052c2:	d820      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052c8:	d012      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80052ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ce:	d81a      	bhi.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d022      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80052d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d8:	d115      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052de:	3308      	adds	r3, #8
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fb30 	bl	8005948 <RCCEx_PLL2_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80052ee:	e015      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f4:	3328      	adds	r3, #40	; 0x28
 80052f6:	2102      	movs	r1, #2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fbd7 	bl	8005aac <RCCEx_PLL3_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005304:	e00a      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800530c:	e006      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800530e:	bf00      	nop
 8005310:	e004      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800531a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10b      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005324:	4ba1      	ldr	r3, [pc, #644]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005334:	4a9d      	ldr	r2, [pc, #628]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005336:	430b      	orrs	r3, r1
 8005338:	6593      	str	r3, [r2, #88]	; 0x58
 800533a:	e003      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005340:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f002 0308 	and.w	r3, r2, #8
 8005350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800535a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d01e      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005370:	d10c      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005376:	3328      	adds	r3, #40	; 0x28
 8005378:	2102      	movs	r1, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fb96 	bl	8005aac <RCCEx_PLL3_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800538c:	4b87      	ldr	r3, [pc, #540]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539c:	4a83      	ldr	r2, [pc, #524]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800539e:	430b      	orrs	r3, r1
 80053a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f002 0310 	and.w	r3, r2, #16
 80053ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053b2:	2300      	movs	r3, #0
 80053b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80053b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80053bc:	460b      	mov	r3, r1
 80053be:	4313      	orrs	r3, r2
 80053c0:	d01e      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ce:	d10c      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d4:	3328      	adds	r3, #40	; 0x28
 80053d6:	2102      	movs	r1, #2
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fb67 	bl	8005aac <RCCEx_PLL3_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ea:	4b70      	ldr	r3, [pc, #448]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fa:	4a6c      	ldr	r2, [pc, #432]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800540c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005410:	2300      	movs	r3, #0
 8005412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005416:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800541a:	460b      	mov	r3, r1
 800541c:	4313      	orrs	r3, r2
 800541e:	d03e      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800542c:	d022      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800542e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005432:	d81b      	bhi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543c:	d00b      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800543e:	e015      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005444:	3308      	adds	r3, #8
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fa7d 	bl	8005948 <RCCEx_PLL2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005454:	e00f      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545a:	3328      	adds	r3, #40	; 0x28
 800545c:	2102      	movs	r1, #2
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fb24 	bl	8005aac <RCCEx_PLL3_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800546a:	e004      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10b      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800547e:	4b4b      	ldr	r3, [pc, #300]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800548e:	4a47      	ldr	r2, [pc, #284]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005490:	430b      	orrs	r3, r1
 8005492:	6593      	str	r3, [r2, #88]	; 0x58
 8005494:	e003      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800549a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80054aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ac:	2300      	movs	r3, #0
 80054ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80054b4:	460b      	mov	r3, r1
 80054b6:	4313      	orrs	r3, r2
 80054b8:	d03b      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054c6:	d01f      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80054c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054cc:	d818      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d2:	d003      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80054d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054d8:	d007      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80054da:	e011      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054dc:	4b33      	ldr	r3, [pc, #204]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	4a32      	ldr	r2, [pc, #200]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80054e8:	e00f      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ee:	3328      	adds	r3, #40	; 0x28
 80054f0:	2101      	movs	r1, #1
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fada 	bl	8005aac <RCCEx_PLL3_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80054fe:	e004      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005506:	e000      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	4a22      	ldr	r2, [pc, #136]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005524:	430b      	orrs	r3, r1
 8005526:	6553      	str	r3, [r2, #84]	; 0x54
 8005528:	e003      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800552e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800553e:	673b      	str	r3, [r7, #112]	; 0x70
 8005540:	2300      	movs	r3, #0
 8005542:	677b      	str	r3, [r7, #116]	; 0x74
 8005544:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d034      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555c:	d007      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800555e:	e011      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b12      	ldr	r3, [pc, #72]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4a11      	ldr	r2, [pc, #68]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800556c:	e00e      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005572:	3308      	adds	r3, #8
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f9e6 	bl	8005948 <RCCEx_PLL2_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005582:	e003      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800558a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10d      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005598:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a2:	4a02      	ldr	r2, [pc, #8]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80055aa:	bf00      	nop
 80055ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80055c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80055c6:	2300      	movs	r3, #0
 80055c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	d00c      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d8:	3328      	adds	r3, #40	; 0x28
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fa65 	bl	8005aac <RCCEx_PLL3_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80055fa:	663b      	str	r3, [r7, #96]	; 0x60
 80055fc:	2300      	movs	r3, #0
 80055fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005600:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d038      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005616:	d018      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800561c:	d811      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800561e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005622:	d014      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005628:	d80b      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d011      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800562e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005632:	d106      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005634:	4bc3      	ldr	r3, [pc, #780]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	4ac2      	ldr	r2, [pc, #776]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800563a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005640:	e008      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005648:	e004      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800565c:	4bb9      	ldr	r3, [pc, #740]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800566c:	4ab5      	ldr	r2, [pc, #724]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800566e:	430b      	orrs	r3, r1
 8005670:	6553      	str	r3, [r2, #84]	; 0x54
 8005672:	e003      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005688:	65bb      	str	r3, [r7, #88]	; 0x58
 800568a:	2300      	movs	r3, #0
 800568c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800568e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005698:	4baa      	ldr	r3, [pc, #680]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a6:	4aa7      	ldr	r2, [pc, #668]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80056b8:	653b      	str	r3, [r7, #80]	; 0x50
 80056ba:	2300      	movs	r3, #0
 80056bc:	657b      	str	r3, [r7, #84]	; 0x54
 80056be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80056c2:	460b      	mov	r3, r1
 80056c4:	4313      	orrs	r3, r2
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056c8:	4b9e      	ldr	r3, [pc, #632]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80056d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056d8:	4a9a      	ldr	r2, [pc, #616]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056da:	430b      	orrs	r3, r1
 80056dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80056ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ec:	2300      	movs	r3, #0
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80056f4:	460b      	mov	r3, r1
 80056f6:	4313      	orrs	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056fa:	4b92      	ldr	r3, [pc, #584]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80056fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005708:	4a8e      	ldr	r2, [pc, #568]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800570a:	430b      	orrs	r3, r1
 800570c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800570e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800571a:	643b      	str	r3, [r7, #64]	; 0x40
 800571c:	2300      	movs	r3, #0
 800571e:	647b      	str	r3, [r7, #68]	; 0x44
 8005720:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005724:	460b      	mov	r3, r1
 8005726:	4313      	orrs	r3, r2
 8005728:	d00e      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800572a:	4b86      	ldr	r3, [pc, #536]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	4a85      	ldr	r2, [pc, #532]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005730:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005734:	6113      	str	r3, [r2, #16]
 8005736:	4b83      	ldr	r3, [pc, #524]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005738:	6919      	ldr	r1, [r3, #16]
 800573a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005742:	4a80      	ldr	r2, [pc, #512]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005744:	430b      	orrs	r3, r1
 8005746:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005754:	63bb      	str	r3, [r7, #56]	; 0x38
 8005756:	2300      	movs	r3, #0
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800575a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005764:	4b77      	ldr	r3, [pc, #476]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	4a74      	ldr	r2, [pc, #464]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005774:	430b      	orrs	r3, r1
 8005776:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005784:	633b      	str	r3, [r7, #48]	; 0x30
 8005786:	2300      	movs	r3, #0
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
 800578a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800578e:	460b      	mov	r3, r1
 8005790:	4313      	orrs	r3, r2
 8005792:	d00a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005794:	4b6b      	ldr	r3, [pc, #428]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005798:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a4:	4a67      	ldr	r2, [pc, #412]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057a6:	430b      	orrs	r3, r1
 80057a8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	2100      	movs	r1, #0
 80057b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80057c0:	460b      	mov	r3, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	d011      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ca:	3308      	adds	r3, #8
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f8ba 	bl	8005948 <RCCEx_PLL2_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80057da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	2100      	movs	r1, #0
 80057f4:	6239      	str	r1, [r7, #32]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
 80057fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005800:	460b      	mov	r3, r1
 8005802:	4313      	orrs	r3, r2
 8005804:	d011      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580a:	3308      	adds	r3, #8
 800580c:	2101      	movs	r1, #1
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f89a 	bl	8005948 <RCCEx_PLL2_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800581a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	2100      	movs	r1, #0
 8005834:	61b9      	str	r1, [r7, #24]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005840:	460b      	mov	r3, r1
 8005842:	4313      	orrs	r3, r2
 8005844:	d011      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584a:	3308      	adds	r3, #8
 800584c:	2102      	movs	r1, #2
 800584e:	4618      	mov	r0, r3
 8005850:	f000 f87a 	bl	8005948 <RCCEx_PLL2_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005866:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	2100      	movs	r1, #0
 8005874:	6139      	str	r1, [r7, #16]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d011      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800588a:	3328      	adds	r3, #40	; 0x28
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f90c 	bl	8005aac <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800589a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	2100      	movs	r1, #0
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d011      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ca:	3328      	adds	r3, #40	; 0x28
 80058cc:	2101      	movs	r1, #1
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f8ec 	bl	8005aac <RCCEx_PLL3_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80058da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	2100      	movs	r1, #0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	607b      	str	r3, [r7, #4]
 80058fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005900:	460b      	mov	r3, r1
 8005902:	4313      	orrs	r3, r2
 8005904:	d011      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800590a:	3328      	adds	r3, #40	; 0x28
 800590c:	2102      	movs	r1, #2
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f8cc 	bl	8005aac <RCCEx_PLL3_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800591a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005926:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800592a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
}
 8005938:	4618      	mov	r0, r3
 800593a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800593e:	46bd      	mov	sp, r7
 8005940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005944:	58024400 	.word	0x58024400

08005948 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005956:	4b53      	ldr	r3, [pc, #332]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b03      	cmp	r3, #3
 8005960:	d101      	bne.n	8005966 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e099      	b.n	8005a9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005966:	4b4f      	ldr	r3, [pc, #316]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a4e      	ldr	r2, [pc, #312]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 800596c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005972:	f7fc f88f 	bl	8001a94 <HAL_GetTick>
 8005976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005978:	e008      	b.n	800598c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800597a:	f7fc f88b 	bl	8001a94 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e086      	b.n	8005a9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800598c:	4b45      	ldr	r3, [pc, #276]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005998:	4b42      	ldr	r3, [pc, #264]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	031b      	lsls	r3, r3, #12
 80059a6:	493f      	ldr	r1, [pc, #252]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	628b      	str	r3, [r1, #40]	; 0x28
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	025b      	lsls	r3, r3, #9
 80059be:	b29b      	uxth	r3, r3
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	061b      	lsls	r3, r3, #24
 80059d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059dc:	4931      	ldr	r1, [pc, #196]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059e2:	4b30      	ldr	r3, [pc, #192]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	492d      	ldr	r1, [pc, #180]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059f4:	4b2b      	ldr	r3, [pc, #172]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	f023 0220 	bic.w	r2, r3, #32
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	4928      	ldr	r1, [pc, #160]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a06:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	4a26      	ldr	r2, [pc, #152]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a0c:	f023 0310 	bic.w	r3, r3, #16
 8005a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a12:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a16:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <RCCEx_PLL2_Config+0x160>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	69d2      	ldr	r2, [r2, #28]
 8005a1e:	00d2      	lsls	r2, r2, #3
 8005a20:	4920      	ldr	r1, [pc, #128]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a26:	4b1f      	ldr	r3, [pc, #124]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a2c:	f043 0310 	orr.w	r3, r3, #16
 8005a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a38:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a44:	e00f      	b.n	8005a66 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d106      	bne.n	8005a5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a4c:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a58:	e005      	b.n	8005a66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a5a:	4b12      	ldr	r3, [pc, #72]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	4a11      	ldr	r2, [pc, #68]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a66:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a0e      	ldr	r2, [pc, #56]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a72:	f7fc f80f 	bl	8001a94 <HAL_GetTick>
 8005a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a78:	e008      	b.n	8005a8c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a7a:	f7fc f80b 	bl	8001a94 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e006      	b.n	8005a9a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <RCCEx_PLL2_Config+0x15c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	ffff0007 	.word	0xffff0007

08005aac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005aba:	4b53      	ldr	r3, [pc, #332]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d101      	bne.n	8005aca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e099      	b.n	8005bfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005aca:	4b4f      	ldr	r3, [pc, #316]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a4e      	ldr	r2, [pc, #312]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad6:	f7fb ffdd 	bl	8001a94 <HAL_GetTick>
 8005ada:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005adc:	e008      	b.n	8005af0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ade:	f7fb ffd9 	bl	8001a94 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e086      	b.n	8005bfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005af0:	4b45      	ldr	r3, [pc, #276]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f0      	bne.n	8005ade <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005afc:	4b42      	ldr	r3, [pc, #264]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	051b      	lsls	r3, r3, #20
 8005b0a:	493f      	ldr	r1, [pc, #252]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	025b      	lsls	r3, r3, #9
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	061b      	lsls	r3, r3, #24
 8005b3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b40:	4931      	ldr	r1, [pc, #196]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b46:	4b30      	ldr	r3, [pc, #192]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	492d      	ldr	r1, [pc, #180]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b58:	4b2b      	ldr	r3, [pc, #172]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	4928      	ldr	r1, [pc, #160]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b6a:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7a:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <RCCEx_PLL3_Config+0x160>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	69d2      	ldr	r2, [r2, #28]
 8005b82:	00d2      	lsls	r2, r2, #3
 8005b84:	4920      	ldr	r1, [pc, #128]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	4a1e      	ldr	r2, [pc, #120]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b9c:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005ba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ba8:	e00f      	b.n	8005bca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d106      	bne.n	8005bbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bb0:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005bb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bbc:	e005      	b.n	8005bca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005bbe:	4b12      	ldr	r3, [pc, #72]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bca:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a0e      	ldr	r2, [pc, #56]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd6:	f7fb ff5d 	bl	8001a94 <HAL_GetTick>
 8005bda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bdc:	e008      	b.n	8005bf0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bde:	f7fb ff59 	bl	8001a94 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e006      	b.n	8005bfe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <RCCEx_PLL3_Config+0x15c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0f0      	beq.n	8005bde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	ffff0007 	.word	0xffff0007

08005c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e049      	b.n	8005cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fa fdba 	bl	80007b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f000 faee 	bl	8006230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d001      	beq.n	8005cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e054      	b.n	8005d82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a26      	ldr	r2, [pc, #152]	; (8005d90 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d022      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x80>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d02:	d01d      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x80>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a22      	ldr	r2, [pc, #136]	; (8005d94 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d018      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x80>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a21      	ldr	r2, [pc, #132]	; (8005d98 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d013      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x80>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <HAL_TIM_Base_Start_IT+0xdc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00e      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x80>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x80>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x80>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1b      	ldr	r2, [pc, #108]	; (8005da8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d115      	bne.n	8005d6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	4b19      	ldr	r3, [pc, #100]	; (8005dac <HAL_TIM_Base_Start_IT+0xec>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b06      	cmp	r3, #6
 8005d50:	d015      	beq.n	8005d7e <HAL_TIM_Base_Start_IT+0xbe>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d58:	d011      	beq.n	8005d7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0201 	orr.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6a:	e008      	b.n	8005d7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e000      	b.n	8005d80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40010400 	.word	0x40010400
 8005da4:	40001800 	.word	0x40001800
 8005da8:	40014000 	.word	0x40014000
 8005dac:	00010007 	.word	0x00010007

08005db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d122      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d11b      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0202 	mvn.w	r2, #2
 8005ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9fe 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8005df8:	e005      	b.n	8005e06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f9f0 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fa01 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d122      	bne.n	8005e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d11b      	bne.n	8005e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0204 	mvn.w	r2, #4
 8005e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f9d4 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8005e4c:	e005      	b.n	8005e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f9c6 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f9d7 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d122      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d11b      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0208 	mvn.w	r2, #8
 8005e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9aa 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8005ea0:	e005      	b.n	8005eae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f99c 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f9ad 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d122      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d11b      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0210 	mvn.w	r2, #16
 8005ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2208      	movs	r2, #8
 8005ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f980 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f972 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f983 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d10e      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d107      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0201 	mvn.w	r2, #1
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb fc74 	bl	800181c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b80      	cmp	r3, #128	; 0x80
 8005f40:	d10e      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4c:	2b80      	cmp	r3, #128	; 0x80
 8005f4e:	d107      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fb38 	bl	80065d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f6e:	d10e      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b80      	cmp	r3, #128	; 0x80
 8005f7c:	d107      	bne.n	8005f8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fb2b 	bl	80065e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d10e      	bne.n	8005fba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d107      	bne.n	8005fba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f931 	bl	800621c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d10e      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d107      	bne.n	8005fe6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f06f 0220 	mvn.w	r2, #32
 8005fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 faeb 	bl	80065bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_TIM_ConfigClockSource+0x1c>
 8006008:	2302      	movs	r3, #2
 800600a:	e0dc      	b.n	80061c6 <HAL_TIM_ConfigClockSource+0x1d6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	4b6a      	ldr	r3, [pc, #424]	; (80061d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006028:	4013      	ands	r3, r2
 800602a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a64      	ldr	r2, [pc, #400]	; (80061d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	f000 80a9 	beq.w	800619a <HAL_TIM_ConfigClockSource+0x1aa>
 8006048:	4a62      	ldr	r2, [pc, #392]	; (80061d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	f200 80ae 	bhi.w	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006050:	4a61      	ldr	r2, [pc, #388]	; (80061d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	f000 80a1 	beq.w	800619a <HAL_TIM_ConfigClockSource+0x1aa>
 8006058:	4a5f      	ldr	r2, [pc, #380]	; (80061d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	f200 80a6 	bhi.w	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006060:	4a5e      	ldr	r2, [pc, #376]	; (80061dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006062:	4293      	cmp	r3, r2
 8006064:	f000 8099 	beq.w	800619a <HAL_TIM_ConfigClockSource+0x1aa>
 8006068:	4a5c      	ldr	r2, [pc, #368]	; (80061dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800606a:	4293      	cmp	r3, r2
 800606c:	f200 809e 	bhi.w	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006070:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006074:	f000 8091 	beq.w	800619a <HAL_TIM_ConfigClockSource+0x1aa>
 8006078:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800607c:	f200 8096 	bhi.w	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006084:	f000 8089 	beq.w	800619a <HAL_TIM_ConfigClockSource+0x1aa>
 8006088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608c:	f200 808e 	bhi.w	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 8006090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006094:	d03e      	beq.n	8006114 <HAL_TIM_ConfigClockSource+0x124>
 8006096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800609a:	f200 8087 	bhi.w	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 800609e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a2:	f000 8086 	beq.w	80061b2 <HAL_TIM_ConfigClockSource+0x1c2>
 80060a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060aa:	d87f      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 80060ac:	2b70      	cmp	r3, #112	; 0x70
 80060ae:	d01a      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0xf6>
 80060b0:	2b70      	cmp	r3, #112	; 0x70
 80060b2:	d87b      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 80060b4:	2b60      	cmp	r3, #96	; 0x60
 80060b6:	d050      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x16a>
 80060b8:	2b60      	cmp	r3, #96	; 0x60
 80060ba:	d877      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 80060bc:	2b50      	cmp	r3, #80	; 0x50
 80060be:	d03c      	beq.n	800613a <HAL_TIM_ConfigClockSource+0x14a>
 80060c0:	2b50      	cmp	r3, #80	; 0x50
 80060c2:	d873      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d058      	beq.n	800617a <HAL_TIM_ConfigClockSource+0x18a>
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d86f      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 80060cc:	2b30      	cmp	r3, #48	; 0x30
 80060ce:	d064      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x1aa>
 80060d0:	2b30      	cmp	r3, #48	; 0x30
 80060d2:	d86b      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d060      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x1aa>
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d867      	bhi.n	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d05c      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x1aa>
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d05a      	beq.n	800619a <HAL_TIM_ConfigClockSource+0x1aa>
 80060e4:	e062      	b.n	80061ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6899      	ldr	r1, [r3, #8]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f000 f9b3 	bl	8006460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	609a      	str	r2, [r3, #8]
      break;
 8006112:	e04f      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	6899      	ldr	r1, [r3, #8]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f000 f99c 	bl	8006460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006136:	609a      	str	r2, [r3, #8]
      break;
 8006138:	e03c      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	461a      	mov	r2, r3
 8006148:	f000 f90c 	bl	8006364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2150      	movs	r1, #80	; 0x50
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f966 	bl	8006424 <TIM_ITRx_SetConfig>
      break;
 8006158:	e02c      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6859      	ldr	r1, [r3, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	461a      	mov	r2, r3
 8006168:	f000 f92b 	bl	80063c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2160      	movs	r1, #96	; 0x60
 8006172:	4618      	mov	r0, r3
 8006174:	f000 f956 	bl	8006424 <TIM_ITRx_SetConfig>
      break;
 8006178:	e01c      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6859      	ldr	r1, [r3, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	461a      	mov	r2, r3
 8006188:	f000 f8ec 	bl	8006364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2140      	movs	r1, #64	; 0x40
 8006192:	4618      	mov	r0, r3
 8006194:	f000 f946 	bl	8006424 <TIM_ITRx_SetConfig>
      break;
 8006198:	e00c      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f000 f93d 	bl	8006424 <TIM_ITRx_SetConfig>
      break;
 80061aa:	e003      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
      break;
 80061b0:	e000      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80061b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	ffceff88 	.word	0xffceff88
 80061d4:	00100040 	.word	0x00100040
 80061d8:	00100030 	.word	0x00100030
 80061dc:	00100020 	.word	0x00100020

080061e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a40      	ldr	r2, [pc, #256]	; (8006344 <TIM_Base_SetConfig+0x114>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d013      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624e:	d00f      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3d      	ldr	r2, [pc, #244]	; (8006348 <TIM_Base_SetConfig+0x118>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00b      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a3c      	ldr	r2, [pc, #240]	; (800634c <TIM_Base_SetConfig+0x11c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d007      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a3b      	ldr	r2, [pc, #236]	; (8006350 <TIM_Base_SetConfig+0x120>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a3a      	ldr	r2, [pc, #232]	; (8006354 <TIM_Base_SetConfig+0x124>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d108      	bne.n	8006282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2f      	ldr	r2, [pc, #188]	; (8006344 <TIM_Base_SetConfig+0x114>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01f      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006290:	d01b      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2c      	ldr	r2, [pc, #176]	; (8006348 <TIM_Base_SetConfig+0x118>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d017      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a2b      	ldr	r2, [pc, #172]	; (800634c <TIM_Base_SetConfig+0x11c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <TIM_Base_SetConfig+0x120>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00f      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a29      	ldr	r2, [pc, #164]	; (8006354 <TIM_Base_SetConfig+0x124>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00b      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a28      	ldr	r2, [pc, #160]	; (8006358 <TIM_Base_SetConfig+0x128>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d007      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a27      	ldr	r2, [pc, #156]	; (800635c <TIM_Base_SetConfig+0x12c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_Base_SetConfig+0x9a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a26      	ldr	r2, [pc, #152]	; (8006360 <TIM_Base_SetConfig+0x130>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d108      	bne.n	80062dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a10      	ldr	r2, [pc, #64]	; (8006344 <TIM_Base_SetConfig+0x114>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00f      	beq.n	8006328 <TIM_Base_SetConfig+0xf8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a12      	ldr	r2, [pc, #72]	; (8006354 <TIM_Base_SetConfig+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_Base_SetConfig+0xf8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a11      	ldr	r2, [pc, #68]	; (8006358 <TIM_Base_SetConfig+0x128>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_Base_SetConfig+0xf8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a10      	ldr	r2, [pc, #64]	; (800635c <TIM_Base_SetConfig+0x12c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0xf8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a0f      	ldr	r2, [pc, #60]	; (8006360 <TIM_Base_SetConfig+0x130>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d103      	bne.n	8006330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	615a      	str	r2, [r3, #20]
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40010000 	.word	0x40010000
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800
 8006350:	40000c00 	.word	0x40000c00
 8006354:	40010400 	.word	0x40010400
 8006358:	40014000 	.word	0x40014000
 800635c:	40014400 	.word	0x40014400
 8006360:	40014800 	.word	0x40014800

08006364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800638e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 030a 	bic.w	r3, r3, #10
 80063a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b087      	sub	sp, #28
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0210 	bic.w	r2, r3, #16
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4b09      	ldr	r3, [pc, #36]	; (800645c <TIM_ITRx_SetConfig+0x38>)
 8006438:	4013      	ands	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	f043 0307 	orr.w	r3, r3, #7
 8006446:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	609a      	str	r2, [r3, #8]
}
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	ffcfff8f 	.word	0xffcfff8f

08006460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800647a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	021a      	lsls	r2, r3, #8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	431a      	orrs	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4313      	orrs	r3, r2
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	609a      	str	r2, [r3, #8]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e06d      	b.n	8006594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a30      	ldr	r2, [pc, #192]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2f      	ldr	r2, [pc, #188]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d108      	bne.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a20      	ldr	r2, [pc, #128]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d022      	beq.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652a:	d01d      	beq.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1d      	ldr	r2, [pc, #116]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d018      	beq.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1a      	ldr	r2, [pc, #104]	; (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00e      	beq.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d009      	beq.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10c      	bne.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800656e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	4313      	orrs	r3, r2
 8006578:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	40010000 	.word	0x40010000
 80065a4:	40010400 	.word	0x40010400
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40000800 	.word	0x40000800
 80065b0:	40000c00 	.word	0x40000c00
 80065b4:	40001800 	.word	0x40001800
 80065b8:	40014000 	.word	0x40014000

080065bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <__NVIC_SetPriority>:
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	6039      	str	r1, [r7, #0]
 8006602:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	db0a      	blt.n	8006622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	490c      	ldr	r1, [pc, #48]	; (8006644 <__NVIC_SetPriority+0x4c>)
 8006612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006616:	0112      	lsls	r2, r2, #4
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	440b      	add	r3, r1
 800661c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006620:	e00a      	b.n	8006638 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	b2da      	uxtb	r2, r3
 8006626:	4908      	ldr	r1, [pc, #32]	; (8006648 <__NVIC_SetPriority+0x50>)
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	3b04      	subs	r3, #4
 8006630:	0112      	lsls	r2, r2, #4
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	440b      	add	r3, r1
 8006636:	761a      	strb	r2, [r3, #24]
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	e000e100 	.word	0xe000e100
 8006648:	e000ed00 	.word	0xe000ed00

0800664c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006650:	4b05      	ldr	r3, [pc, #20]	; (8006668 <SysTick_Handler+0x1c>)
 8006652:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006654:	f002 fce4 	bl	8009020 <xTaskGetSchedulerState>
 8006658:	4603      	mov	r3, r0
 800665a:	2b01      	cmp	r3, #1
 800665c:	d001      	beq.n	8006662 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800665e:	f000 ffc3 	bl	80075e8 <xPortSysTickHandler>
  }
}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	e000e010 	.word	0xe000e010

0800666c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006670:	2100      	movs	r1, #0
 8006672:	f06f 0004 	mvn.w	r0, #4
 8006676:	f7ff ffbf 	bl	80065f8 <__NVIC_SetPriority>
#endif
}
 800667a:	bf00      	nop
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006686:	f3ef 8305 	mrs	r3, IPSR
 800668a:	603b      	str	r3, [r7, #0]
  return(result);
 800668c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006692:	f06f 0305 	mvn.w	r3, #5
 8006696:	607b      	str	r3, [r7, #4]
 8006698:	e00c      	b.n	80066b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <osKernelInitialize+0x44>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d105      	bne.n	80066ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <osKernelInitialize+0x44>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	e002      	b.n	80066b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066ae:	f04f 33ff 	mov.w	r3, #4294967295
 80066b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066b4:	687b      	ldr	r3, [r7, #4]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	24000358 	.word	0x24000358

080066c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ce:	f3ef 8305 	mrs	r3, IPSR
 80066d2:	603b      	str	r3, [r7, #0]
  return(result);
 80066d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80066da:	f06f 0305 	mvn.w	r3, #5
 80066de:	607b      	str	r3, [r7, #4]
 80066e0:	e010      	b.n	8006704 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80066e2:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <osKernelStart+0x48>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d109      	bne.n	80066fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80066ea:	f7ff ffbf 	bl	800666c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066ee:	4b08      	ldr	r3, [pc, #32]	; (8006710 <osKernelStart+0x48>)
 80066f0:	2202      	movs	r2, #2
 80066f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80066f4:	f002 f838 	bl	8008768 <vTaskStartScheduler>
      stat = osOK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	e002      	b.n	8006704 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006704:	687b      	ldr	r3, [r7, #4]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	24000358 	.word	0x24000358

08006714 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b08e      	sub	sp, #56	; 0x38
 8006718:	af04      	add	r7, sp, #16
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006724:	f3ef 8305 	mrs	r3, IPSR
 8006728:	617b      	str	r3, [r7, #20]
  return(result);
 800672a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800672c:	2b00      	cmp	r3, #0
 800672e:	d17e      	bne.n	800682e <osThreadNew+0x11a>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d07b      	beq.n	800682e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006736:	2380      	movs	r3, #128	; 0x80
 8006738:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800673a:	2318      	movs	r3, #24
 800673c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006742:	f04f 33ff 	mov.w	r3, #4294967295
 8006746:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d045      	beq.n	80067da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <osThreadNew+0x48>
        name = attr->name;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <osThreadNew+0x6e>
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2b38      	cmp	r3, #56	; 0x38
 8006774:	d805      	bhi.n	8006782 <osThreadNew+0x6e>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <osThreadNew+0x72>
        return (NULL);
 8006782:	2300      	movs	r3, #0
 8006784:	e054      	b.n	8006830 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	089b      	lsrs	r3, r3, #2
 8006794:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00e      	beq.n	80067bc <osThreadNew+0xa8>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2bbb      	cmp	r3, #187	; 0xbb
 80067a4:	d90a      	bls.n	80067bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d006      	beq.n	80067bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <osThreadNew+0xa8>
        mem = 1;
 80067b6:	2301      	movs	r3, #1
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e010      	b.n	80067de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10c      	bne.n	80067de <osThreadNew+0xca>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d108      	bne.n	80067de <osThreadNew+0xca>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d104      	bne.n	80067de <osThreadNew+0xca>
          mem = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	e001      	b.n	80067de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d110      	bne.n	8006806 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067ec:	9202      	str	r2, [sp, #8]
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6a3a      	ldr	r2, [r7, #32]
 80067f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f001 fd2a 	bl	8008254 <xTaskCreateStatic>
 8006800:	4603      	mov	r3, r0
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	e013      	b.n	800682e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d110      	bne.n	800682e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	b29a      	uxth	r2, r3
 8006810:	f107 0310 	add.w	r3, r7, #16
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f001 fd75 	bl	800830e <xTaskCreate>
 8006824:	4603      	mov	r3, r0
 8006826:	2b01      	cmp	r3, #1
 8006828:	d001      	beq.n	800682e <osThreadNew+0x11a>
            hTask = NULL;
 800682a:	2300      	movs	r3, #0
 800682c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800682e:	693b      	ldr	r3, [r7, #16]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3728      	adds	r7, #40	; 0x28
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006846:	f3ef 8305 	mrs	r3, IPSR
 800684a:	60fb      	str	r3, [r7, #12]
  return(result);
 800684c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8006852:	f06f 0305 	mvn.w	r3, #5
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	e013      	b.n	8006882 <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <osThreadSetPriority+0x34>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dd02      	ble.n	800686c <osThreadSetPriority+0x34>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b38      	cmp	r3, #56	; 0x38
 800686a:	dd03      	ble.n	8006874 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 800686c:	f06f 0303 	mvn.w	r3, #3
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e006      	b.n	8006882 <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	4619      	mov	r1, r3
 800687c:	6938      	ldr	r0, [r7, #16]
 800687e:	f001 fed5 	bl	800862c <vTaskPrioritySet>
  }

  return (stat);
 8006882:	697b      	ldr	r3, [r7, #20]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af02      	add	r7, sp, #8
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <osThreadFlagsSet+0x1a>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da03      	bge.n	80068ae <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80068a6:	f06f 0303 	mvn.w	r3, #3
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	e035      	b.n	800691a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295
 80068b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b4:	f3ef 8305 	mrs	r3, IPSR
 80068b8:	613b      	str	r3, [r7, #16]
  return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01f      	beq.n	8006900 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80068c4:	f107 0308 	add.w	r3, r7, #8
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	2300      	movs	r3, #0
 80068cc:	2201      	movs	r2, #1
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6978      	ldr	r0, [r7, #20]
 80068d2:	f002 fd4f 	bl	8009374 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	2200      	movs	r2, #0
 80068dc:	9200      	str	r2, [sp, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	2100      	movs	r1, #0
 80068e2:	6978      	ldr	r0, [r7, #20]
 80068e4:	f002 fd46 	bl	8009374 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d015      	beq.n	800691a <osThreadFlagsSet+0x8e>
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <osThreadFlagsSet+0x98>)
 80068f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	e00c      	b.n	800691a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8006900:	2300      	movs	r3, #0
 8006902:	2201      	movs	r2, #1
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6978      	ldr	r0, [r7, #20]
 8006908:	f002 fc76 	bl	80091f8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800690c:	f107 030c 	add.w	r3, r7, #12
 8006910:	2200      	movs	r2, #0
 8006912:	2100      	movs	r1, #0
 8006914:	6978      	ldr	r0, [r7, #20]
 8006916:	f002 fc6f 	bl	80091f8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800691a:	68fb      	ldr	r3, [r7, #12]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b08c      	sub	sp, #48	; 0x30
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006934:	f3ef 8305 	mrs	r3, IPSR
 8006938:	617b      	str	r3, [r7, #20]
  return(result);
 800693a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8006940:	f06f 0305 	mvn.w	r3, #5
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006946:	e06b      	b.n	8006a20 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	da03      	bge.n	8006956 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800694e:	f06f 0303 	mvn.w	r3, #3
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006954:	e064      	b.n	8006a20 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
 8006964:	e001      	b.n	800696a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8006972:	f002 f815 	bl	80089a0 <xTaskGetTickCount>
 8006976:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8006978:	f107 0210 	add.w	r2, r7, #16
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006980:	2000      	movs	r0, #0
 8006982:	f002 fbd9 	bl	8009138 <xTaskNotifyWait>
 8006986:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d137      	bne.n	80069fe <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800698e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4013      	ands	r3, r2
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800699a:	4313      	orrs	r3, r2
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00c      	beq.n	80069c2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	4013      	ands	r3, r2
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d032      	beq.n	8006a1a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10f      	bne.n	80069da <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80069ba:	f06f 0302 	mvn.w	r3, #2
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80069c0:	e02e      	b.n	8006a20 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	4013      	ands	r3, r2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d128      	bne.n	8006a1e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d103      	bne.n	80069da <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80069d2:	f06f 0302 	mvn.w	r3, #2
 80069d6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80069d8:	e022      	b.n	8006a20 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80069da:	f001 ffe1 	bl	80089a0 <xTaskGetTickCount>
 80069de:	4602      	mov	r2, r0
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d902      	bls.n	80069f4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
 80069f2:	e00e      	b.n	8006a12 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80069f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
 80069fc:	e009      	b.n	8006a12 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d103      	bne.n	8006a0c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8006a04:	f06f 0302 	mvn.w	r3, #2
 8006a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a0a:	e002      	b.n	8006a12 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8006a0c:	f06f 0301 	mvn.w	r3, #1
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1af      	bne.n	8006978 <osThreadFlagsWait+0x50>
 8006a18:	e002      	b.n	8006a20 <osThreadFlagsWait+0xf8>
            break;
 8006a1a:	bf00      	nop
 8006a1c:	e000      	b.n	8006a20 <osThreadFlagsWait+0xf8>
            break;
 8006a1e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3730      	adds	r7, #48	; 0x30
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a32:	f3ef 8305 	mrs	r3, IPSR
 8006a36:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <osDelay+0x1c>
    stat = osErrorISR;
 8006a3e:	f06f 0305 	mvn.w	r3, #5
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e007      	b.n	8006a56 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fdb7 	bl	80085c4 <vTaskDelay>
    }
  }

  return (stat);
 8006a56:	68fb      	ldr	r3, [r7, #12]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a70:	f3ef 8305 	mrs	r3, IPSR
 8006a74:	613b      	str	r3, [r7, #16]
  return(result);
 8006a76:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d15f      	bne.n	8006b3c <osMessageQueueNew+0xdc>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d05c      	beq.n	8006b3c <osMessageQueueNew+0xdc>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d059      	beq.n	8006b3c <osMessageQueueNew+0xdc>
    mem = -1;
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d029      	beq.n	8006ae8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d012      	beq.n	8006ac2 <osMessageQueueNew+0x62>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b4f      	cmp	r3, #79	; 0x4f
 8006aa2:	d90e      	bls.n	8006ac2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695a      	ldr	r2, [r3, #20]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d302      	bcc.n	8006ac2 <osMessageQueueNew+0x62>
        mem = 1;
 8006abc:	2301      	movs	r3, #1
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e014      	b.n	8006aec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d110      	bne.n	8006aec <osMessageQueueNew+0x8c>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10c      	bne.n	8006aec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d108      	bne.n	8006aec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <osMessageQueueNew+0x8c>
          mem = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	e001      	b.n	8006aec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d10b      	bne.n	8006b0a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691a      	ldr	r2, [r3, #16]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2100      	movs	r1, #0
 8006afc:	9100      	str	r1, [sp, #0]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fe69 	bl	80077d8 <xQueueGenericCreateStatic>
 8006b06:	61f8      	str	r0, [r7, #28]
 8006b08:	e008      	b.n	8006b1c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006b10:	2200      	movs	r2, #0
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fed7 	bl	80078c8 <xQueueGenericCreate>
 8006b1a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00c      	beq.n	8006b3c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e001      	b.n	8006b34 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006b34:	6979      	ldr	r1, [r7, #20]
 8006b36:	69f8      	ldr	r0, [r7, #28]
 8006b38:	f001 fb2e 	bl	8008198 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006b3c:	69fb      	ldr	r3, [r7, #28]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3720      	adds	r7, #32
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	4613      	mov	r3, r2
 8006b56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b60:	f3ef 8305 	mrs	r3, IPSR
 8006b64:	617b      	str	r3, [r7, #20]
  return(result);
 8006b66:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d028      	beq.n	8006bbe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <osMessageQueuePut+0x36>
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <osMessageQueuePut+0x36>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006b7e:	f06f 0303 	mvn.w	r3, #3
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	e038      	b.n	8006bf8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006b8a:	f107 0210 	add.w	r2, r7, #16
 8006b8e:	2300      	movs	r3, #0
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	69b8      	ldr	r0, [r7, #24]
 8006b94:	f000 fff4 	bl	8007b80 <xQueueGenericSendFromISR>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d003      	beq.n	8006ba6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006b9e:	f06f 0302 	mvn.w	r3, #2
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	e028      	b.n	8006bf8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d025      	beq.n	8006bf8 <osMessageQueuePut+0xb0>
 8006bac:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <osMessageQueuePut+0xbc>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	e01c      	b.n	8006bf8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <osMessageQueuePut+0x82>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006bca:	f06f 0303 	mvn.w	r3, #3
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e012      	b.n	8006bf8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	69b8      	ldr	r0, [r7, #24]
 8006bda:	f000 fed3 	bl	8007984 <xQueueGenericSend>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d009      	beq.n	8006bf8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006bea:	f06f 0301 	mvn.w	r3, #1
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	e002      	b.n	8006bf8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006bf2:	f06f 0302 	mvn.w	r3, #2
 8006bf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006bf8:	69fb      	ldr	r3, [r7, #28]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c1e:	f3ef 8305 	mrs	r3, IPSR
 8006c22:	617b      	str	r3, [r7, #20]
  return(result);
 8006c24:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d028      	beq.n	8006c7c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <osMessageQueueGet+0x34>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <osMessageQueueGet+0x34>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006c3c:	f06f 0303 	mvn.w	r3, #3
 8006c40:	61fb      	str	r3, [r7, #28]
 8006c42:	e037      	b.n	8006cb4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006c48:	f107 0310 	add.w	r3, r7, #16
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68b9      	ldr	r1, [r7, #8]
 8006c50:	69b8      	ldr	r0, [r7, #24]
 8006c52:	f001 f911 	bl	8007e78 <xQueueReceiveFromISR>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d003      	beq.n	8006c64 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006c5c:	f06f 0302 	mvn.w	r3, #2
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	e027      	b.n	8006cb4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d024      	beq.n	8006cb4 <osMessageQueueGet+0xac>
 8006c6a:	4b15      	ldr	r3, [pc, #84]	; (8006cc0 <osMessageQueueGet+0xb8>)
 8006c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	e01b      	b.n	8006cb4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <osMessageQueueGet+0x80>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d103      	bne.n	8006c90 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006c88:	f06f 0303 	mvn.w	r3, #3
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e011      	b.n	8006cb4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	69b8      	ldr	r0, [r7, #24]
 8006c96:	f001 f80f 	bl	8007cb8 <xQueueReceive>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d009      	beq.n	8006cb4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006ca6:	f06f 0301 	mvn.w	r3, #1
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e002      	b.n	8006cb4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006cae:	f06f 0302 	mvn.w	r3, #2
 8006cb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006cb4:	69fb      	ldr	r3, [r7, #28]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a07      	ldr	r2, [pc, #28]	; (8006cf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006cd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4a06      	ldr	r2, [pc, #24]	; (8006cf4 <vApplicationGetIdleTaskMemory+0x30>)
 8006cda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2280      	movs	r2, #128	; 0x80
 8006ce0:	601a      	str	r2, [r3, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	2400035c 	.word	0x2400035c
 8006cf4:	24000418 	.word	0x24000418

08006cf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4a07      	ldr	r2, [pc, #28]	; (8006d24 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	4a06      	ldr	r2, [pc, #24]	; (8006d28 <vApplicationGetTimerTaskMemory+0x30>)
 8006d0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d16:	601a      	str	r2, [r3, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	24000618 	.word	0x24000618
 8006d28:	240006d4 	.word	0x240006d4

08006d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d38:	f001 fd86 	bl	8008848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d3c:	4b5b      	ldr	r3, [pc, #364]	; (8006eac <pvPortMalloc+0x180>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d44:	f000 f920 	bl	8006f88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d48:	4b59      	ldr	r3, [pc, #356]	; (8006eb0 <pvPortMalloc+0x184>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 8093 	bne.w	8006e7c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01d      	beq.n	8006d98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4413      	add	r3, r2
 8006d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d014      	beq.n	8006d98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f023 0307 	bic.w	r3, r3, #7
 8006d74:	3308      	adds	r3, #8
 8006d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d06e      	beq.n	8006e7c <pvPortMalloc+0x150>
 8006d9e:	4b45      	ldr	r3, [pc, #276]	; (8006eb4 <pvPortMalloc+0x188>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d869      	bhi.n	8006e7c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006da8:	4b43      	ldr	r3, [pc, #268]	; (8006eb8 <pvPortMalloc+0x18c>)
 8006daa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dac:	4b42      	ldr	r3, [pc, #264]	; (8006eb8 <pvPortMalloc+0x18c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006db2:	e004      	b.n	8006dbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d903      	bls.n	8006dd0 <pvPortMalloc+0xa4>
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1f1      	bne.n	8006db4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dd0:	4b36      	ldr	r3, [pc, #216]	; (8006eac <pvPortMalloc+0x180>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d050      	beq.n	8006e7c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2208      	movs	r2, #8
 8006de0:	4413      	add	r3, r2
 8006de2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	1ad2      	subs	r2, r2, r3
 8006df4:	2308      	movs	r3, #8
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d91f      	bls.n	8006e3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4413      	add	r3, r2
 8006e02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <pvPortMalloc+0xf8>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	613b      	str	r3, [r7, #16]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e36:	69b8      	ldr	r0, [r7, #24]
 8006e38:	f000 f908 	bl	800704c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e3c:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <pvPortMalloc+0x188>)
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	4a1b      	ldr	r2, [pc, #108]	; (8006eb4 <pvPortMalloc+0x188>)
 8006e48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e4a:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <pvPortMalloc+0x188>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b1b      	ldr	r3, [pc, #108]	; (8006ebc <pvPortMalloc+0x190>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d203      	bcs.n	8006e5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e56:	4b17      	ldr	r3, [pc, #92]	; (8006eb4 <pvPortMalloc+0x188>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a18      	ldr	r2, [pc, #96]	; (8006ebc <pvPortMalloc+0x190>)
 8006e5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <pvPortMalloc+0x184>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e72:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <pvPortMalloc+0x194>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	4a11      	ldr	r2, [pc, #68]	; (8006ec0 <pvPortMalloc+0x194>)
 8006e7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e7c:	f001 fcf2 	bl	8008864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <pvPortMalloc+0x174>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	60fb      	str	r3, [r7, #12]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <pvPortMalloc+0x172>
	return pvReturn;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3728      	adds	r7, #40	; 0x28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	240046dc 	.word	0x240046dc
 8006eb0:	240046f0 	.word	0x240046f0
 8006eb4:	240046e0 	.word	0x240046e0
 8006eb8:	240046d4 	.word	0x240046d4
 8006ebc:	240046e4 	.word	0x240046e4
 8006ec0:	240046e8 	.word	0x240046e8

08006ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d04d      	beq.n	8006f72 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ed6:	2308      	movs	r3, #8
 8006ed8:	425b      	negs	r3, r3
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4413      	add	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4b24      	ldr	r3, [pc, #144]	; (8006f7c <vPortFree+0xb8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <vPortFree+0x44>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	60fb      	str	r3, [r7, #12]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <vPortFree+0x62>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60bb      	str	r3, [r7, #8]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <vPortFree+0xb8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01e      	beq.n	8006f72 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d11a      	bne.n	8006f72 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <vPortFree+0xb8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	43db      	mvns	r3, r3
 8006f46:	401a      	ands	r2, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f4c:	f001 fc7c 	bl	8008848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <vPortFree+0xbc>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4413      	add	r3, r2
 8006f5a:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <vPortFree+0xbc>)
 8006f5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f5e:	6938      	ldr	r0, [r7, #16]
 8006f60:	f000 f874 	bl	800704c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <vPortFree+0xc0>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	4a06      	ldr	r2, [pc, #24]	; (8006f84 <vPortFree+0xc0>)
 8006f6c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f6e:	f001 fc79 	bl	8008864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f72:	bf00      	nop
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	240046f0 	.word	0x240046f0
 8006f80:	240046e0 	.word	0x240046e0
 8006f84:	240046ec 	.word	0x240046ec

08006f88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f8e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f94:	4b27      	ldr	r3, [pc, #156]	; (8007034 <prvHeapInit+0xac>)
 8006f96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00c      	beq.n	8006fbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3307      	adds	r3, #7
 8006fa6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0307 	bic.w	r3, r3, #7
 8006fae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <prvHeapInit+0xac>)
 8006fb8:	4413      	add	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fc0:	4a1d      	ldr	r2, [pc, #116]	; (8007038 <prvHeapInit+0xb0>)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <prvHeapInit+0xb0>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0307 	bic.w	r3, r3, #7
 8006fe2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4a15      	ldr	r2, [pc, #84]	; (800703c <prvHeapInit+0xb4>)
 8006fe8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fea:	4b14      	ldr	r3, [pc, #80]	; (800703c <prvHeapInit+0xb4>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <prvHeapInit+0xb4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <prvHeapInit+0xb4>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <prvHeapInit+0xb8>)
 8007016:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a09      	ldr	r2, [pc, #36]	; (8007044 <prvHeapInit+0xbc>)
 800701e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007020:	4b09      	ldr	r3, [pc, #36]	; (8007048 <prvHeapInit+0xc0>)
 8007022:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007026:	601a      	str	r2, [r3, #0]
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	24000ad4 	.word	0x24000ad4
 8007038:	240046d4 	.word	0x240046d4
 800703c:	240046dc 	.word	0x240046dc
 8007040:	240046e4 	.word	0x240046e4
 8007044:	240046e0 	.word	0x240046e0
 8007048:	240046f0 	.word	0x240046f0

0800704c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007054:	4b28      	ldr	r3, [pc, #160]	; (80070f8 <prvInsertBlockIntoFreeList+0xac>)
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e002      	b.n	8007060 <prvInsertBlockIntoFreeList+0x14>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d8f7      	bhi.n	800705a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	4413      	add	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d108      	bne.n	800708e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	441a      	add	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d118      	bne.n	80070d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <prvInsertBlockIntoFreeList+0xb0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d00d      	beq.n	80070ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e008      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070ca:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <prvInsertBlockIntoFreeList+0xb0>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e003      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d002      	beq.n	80070ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	240046d4 	.word	0x240046d4
 80070fc:	240046dc 	.word	0x240046dc

08007100 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f103 0208 	add.w	r2, r3, #8
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f04f 32ff 	mov.w	r2, #4294967295
 8007118:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f103 0208 	add.w	r2, r3, #8
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f103 0208 	add.w	r2, r3, #8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	601a      	str	r2, [r3, #0]
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d103      	bne.n	80071c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e00c      	b.n	80071dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3308      	adds	r3, #8
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e002      	b.n	80071d0 <vListInsert+0x2e>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d2f6      	bcs.n	80071ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	601a      	str	r2, [r3, #0]
}
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6892      	ldr	r2, [r2, #8]
 800722a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6852      	ldr	r2, [r2, #4]
 8007234:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	429a      	cmp	r2, r3
 800723e:	d103      	bne.n	8007248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	1e5a      	subs	r2, r3, #1
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3b04      	subs	r3, #4
 8007278:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3b04      	subs	r3, #4
 8007286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f023 0201 	bic.w	r2, r3, #1
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3b04      	subs	r3, #4
 8007296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007298:	4a0c      	ldr	r2, [pc, #48]	; (80072cc <pxPortInitialiseStack+0x64>)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3b14      	subs	r3, #20
 80072a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3b04      	subs	r3, #4
 80072ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f06f 0202 	mvn.w	r2, #2
 80072b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3b20      	subs	r3, #32
 80072bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072be:	68fb      	ldr	r3, [r7, #12]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	080072d1 	.word	0x080072d1

080072d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <prvTaskExitError+0x54>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e2:	d00a      	beq.n	80072fa <prvTaskExitError+0x2a>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	60fb      	str	r3, [r7, #12]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <prvTaskExitError+0x28>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	60bb      	str	r3, [r7, #8]
}
 800730c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800730e:	bf00      	nop
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0fc      	beq.n	8007310 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	2400001c 	.word	0x2400001c
	...

08007330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <pxCurrentTCBConst2>)
 8007332:	6819      	ldr	r1, [r3, #0]
 8007334:	6808      	ldr	r0, [r1, #0]
 8007336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733a:	f380 8809 	msr	PSP, r0
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f380 8811 	msr	BASEPRI, r0
 800734a:	4770      	bx	lr
 800734c:	f3af 8000 	nop.w

08007350 <pxCurrentTCBConst2>:
 8007350:	2400473c 	.word	0x2400473c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop

08007358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007358:	4808      	ldr	r0, [pc, #32]	; (800737c <prvPortStartFirstTask+0x24>)
 800735a:	6800      	ldr	r0, [r0, #0]
 800735c:	6800      	ldr	r0, [r0, #0]
 800735e:	f380 8808 	msr	MSP, r0
 8007362:	f04f 0000 	mov.w	r0, #0
 8007366:	f380 8814 	msr	CONTROL, r0
 800736a:	b662      	cpsie	i
 800736c:	b661      	cpsie	f
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	df00      	svc	0
 8007378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800737a:	bf00      	nop
 800737c:	e000ed08 	.word	0xe000ed08

08007380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007386:	4b46      	ldr	r3, [pc, #280]	; (80074a0 <xPortStartScheduler+0x120>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a46      	ldr	r2, [pc, #280]	; (80074a4 <xPortStartScheduler+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d10a      	bne.n	80073a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	613b      	str	r3, [r7, #16]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073a6:	4b3e      	ldr	r3, [pc, #248]	; (80074a0 <xPortStartScheduler+0x120>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a3f      	ldr	r2, [pc, #252]	; (80074a8 <xPortStartScheduler+0x128>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d10a      	bne.n	80073c6 <xPortStartScheduler+0x46>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073c6:	4b39      	ldr	r3, [pc, #228]	; (80074ac <xPortStartScheduler+0x12c>)
 80073c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	22ff      	movs	r2, #255	; 0xff
 80073d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	4b31      	ldr	r3, [pc, #196]	; (80074b0 <xPortStartScheduler+0x130>)
 80073ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ee:	4b31      	ldr	r3, [pc, #196]	; (80074b4 <xPortStartScheduler+0x134>)
 80073f0:	2207      	movs	r2, #7
 80073f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073f4:	e009      	b.n	800740a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80073f6:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <xPortStartScheduler+0x134>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	4a2d      	ldr	r2, [pc, #180]	; (80074b4 <xPortStartScheduler+0x134>)
 80073fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	b2db      	uxtb	r3, r3
 8007408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d0ef      	beq.n	80073f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007416:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <xPortStartScheduler+0x134>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1c3 0307 	rsb	r3, r3, #7
 800741e:	2b04      	cmp	r3, #4
 8007420:	d00a      	beq.n	8007438 <xPortStartScheduler+0xb8>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	60bb      	str	r3, [r7, #8]
}
 8007434:	bf00      	nop
 8007436:	e7fe      	b.n	8007436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007438:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <xPortStartScheduler+0x134>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <xPortStartScheduler+0x134>)
 8007440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <xPortStartScheduler+0x134>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800744a:	4a1a      	ldr	r2, [pc, #104]	; (80074b4 <xPortStartScheduler+0x134>)
 800744c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	b2da      	uxtb	r2, r3
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007456:	4b18      	ldr	r3, [pc, #96]	; (80074b8 <xPortStartScheduler+0x138>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <xPortStartScheduler+0x138>)
 800745c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <xPortStartScheduler+0x138>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a14      	ldr	r2, [pc, #80]	; (80074b8 <xPortStartScheduler+0x138>)
 8007468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800746c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800746e:	f000 f8dd 	bl	800762c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007472:	4b12      	ldr	r3, [pc, #72]	; (80074bc <xPortStartScheduler+0x13c>)
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007478:	f000 f8fc 	bl	8007674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <xPortStartScheduler+0x140>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0f      	ldr	r2, [pc, #60]	; (80074c0 <xPortStartScheduler+0x140>)
 8007482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007488:	f7ff ff66 	bl	8007358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800748c:	f001 fb52 	bl	8008b34 <vTaskSwitchContext>
	prvTaskExitError();
 8007490:	f7ff ff1e 	bl	80072d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	e000ed00 	.word	0xe000ed00
 80074a4:	410fc271 	.word	0x410fc271
 80074a8:	410fc270 	.word	0x410fc270
 80074ac:	e000e400 	.word	0xe000e400
 80074b0:	240046f4 	.word	0x240046f4
 80074b4:	240046f8 	.word	0x240046f8
 80074b8:	e000ed20 	.word	0xe000ed20
 80074bc:	2400001c 	.word	0x2400001c
 80074c0:	e000ef34 	.word	0xe000ef34

080074c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	607b      	str	r3, [r7, #4]
}
 80074dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074de:	4b0f      	ldr	r3, [pc, #60]	; (800751c <vPortEnterCritical+0x58>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	4a0d      	ldr	r2, [pc, #52]	; (800751c <vPortEnterCritical+0x58>)
 80074e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <vPortEnterCritical+0x58>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d10f      	bne.n	8007510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <vPortEnterCritical+0x5c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <vPortEnterCritical+0x4c>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	603b      	str	r3, [r7, #0]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <vPortEnterCritical+0x4a>
	}
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	2400001c 	.word	0x2400001c
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800752a:	4b12      	ldr	r3, [pc, #72]	; (8007574 <vPortExitCritical+0x50>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <vPortExitCritical+0x24>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	607b      	str	r3, [r7, #4]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007548:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <vPortExitCritical+0x50>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3b01      	subs	r3, #1
 800754e:	4a09      	ldr	r2, [pc, #36]	; (8007574 <vPortExitCritical+0x50>)
 8007550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007552:	4b08      	ldr	r3, [pc, #32]	; (8007574 <vPortExitCritical+0x50>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d105      	bne.n	8007566 <vPortExitCritical+0x42>
 800755a:	2300      	movs	r3, #0
 800755c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	2400001c 	.word	0x2400001c
	...

08007580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007580:	f3ef 8009 	mrs	r0, PSP
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <pxCurrentTCBConst>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	f01e 0f10 	tst.w	lr, #16
 8007590:	bf08      	it	eq
 8007592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	6010      	str	r0, [r2, #0]
 800759c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075a4:	f380 8811 	msr	BASEPRI, r0
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f001 fac0 	bl	8008b34 <vTaskSwitchContext>
 80075b4:	f04f 0000 	mov.w	r0, #0
 80075b8:	f380 8811 	msr	BASEPRI, r0
 80075bc:	bc09      	pop	{r0, r3}
 80075be:	6819      	ldr	r1, [r3, #0]
 80075c0:	6808      	ldr	r0, [r1, #0]
 80075c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c6:	f01e 0f10 	tst.w	lr, #16
 80075ca:	bf08      	it	eq
 80075cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075d0:	f380 8809 	msr	PSP, r0
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	f3af 8000 	nop.w

080075e0 <pxCurrentTCBConst>:
 80075e0:	2400473c 	.word	0x2400473c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075e4:	bf00      	nop
 80075e6:	bf00      	nop

080075e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007602:	f001 f9dd 	bl	80089c0 <xTaskIncrementTick>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <xPortSysTickHandler+0x40>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	2300      	movs	r3, #0
 8007616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f383 8811 	msr	BASEPRI, r3
}
 800761e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007630:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <vPortSetupTimerInterrupt+0x34>)
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007636:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <vPortSetupTimerInterrupt+0x38>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <vPortSetupTimerInterrupt+0x3c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <vPortSetupTimerInterrupt+0x40>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	099b      	lsrs	r3, r3, #6
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <vPortSetupTimerInterrupt+0x44>)
 800764a:	3b01      	subs	r3, #1
 800764c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800764e:	4b04      	ldr	r3, [pc, #16]	; (8007660 <vPortSetupTimerInterrupt+0x34>)
 8007650:	2207      	movs	r2, #7
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	e000e010 	.word	0xe000e010
 8007664:	e000e018 	.word	0xe000e018
 8007668:	24000000 	.word	0x24000000
 800766c:	10624dd3 	.word	0x10624dd3
 8007670:	e000e014 	.word	0xe000e014

08007674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007684 <vPortEnableVFP+0x10>
 8007678:	6801      	ldr	r1, [r0, #0]
 800767a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800767e:	6001      	str	r1, [r0, #0]
 8007680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007682:	bf00      	nop
 8007684:	e000ed88 	.word	0xe000ed88

08007688 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800768e:	f3ef 8305 	mrs	r3, IPSR
 8007692:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b0f      	cmp	r3, #15
 8007698:	d914      	bls.n	80076c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800769a:	4a17      	ldr	r2, [pc, #92]	; (80076f8 <vPortValidateInterruptPriority+0x70>)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076a4:	4b15      	ldr	r3, [pc, #84]	; (80076fc <vPortValidateInterruptPriority+0x74>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	7afa      	ldrb	r2, [r7, #11]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d20a      	bcs.n	80076c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	607b      	str	r3, [r7, #4]
}
 80076c0:	bf00      	nop
 80076c2:	e7fe      	b.n	80076c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076c4:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <vPortValidateInterruptPriority+0x78>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076cc:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <vPortValidateInterruptPriority+0x7c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d90a      	bls.n	80076ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	603b      	str	r3, [r7, #0]
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <vPortValidateInterruptPriority+0x60>
	}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	e000e3f0 	.word	0xe000e3f0
 80076fc:	240046f4 	.word	0x240046f4
 8007700:	e000ed0c 	.word	0xe000ed0c
 8007704:	240046f8 	.word	0x240046f8

08007708 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xQueueGenericReset+0x2a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	60bb      	str	r3, [r7, #8]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007732:	f7ff fec7 	bl	80074c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007742:	fb01 f303 	mul.w	r3, r1, r3
 8007746:	441a      	add	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007762:	3b01      	subs	r3, #1
 8007764:	68f9      	ldr	r1, [r7, #12]
 8007766:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	441a      	add	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	22ff      	movs	r2, #255	; 0xff
 8007776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	22ff      	movs	r2, #255	; 0xff
 800777e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d114      	bne.n	80077b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01a      	beq.n	80077c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3310      	adds	r3, #16
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fa81 	bl	8008c9c <xTaskRemoveFromEventList>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d012      	beq.n	80077c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80077a0:	4b0c      	ldr	r3, [pc, #48]	; (80077d4 <xQueueGenericReset+0xcc>)
 80077a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	e009      	b.n	80077c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3310      	adds	r3, #16
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff fca2 	bl	8007100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3324      	adds	r3, #36	; 0x24
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fc9d 	bl	8007100 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077c6:	f7ff fead 	bl	8007524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80077ca:	2301      	movs	r3, #1
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	e000ed04 	.word	0xe000ed04

080077d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08e      	sub	sp, #56	; 0x38
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10a      	bne.n	800781e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <xQueueGenericCreateStatic+0x52>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <xQueueGenericCreateStatic+0x56>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <xQueueGenericCreateStatic+0x58>
 800782e:	2300      	movs	r3, #0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	623b      	str	r3, [r7, #32]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <xQueueGenericCreateStatic+0x7e>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <xQueueGenericCreateStatic+0x82>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <xQueueGenericCreateStatic+0x84>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	61fb      	str	r3, [r7, #28]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007876:	2350      	movs	r3, #80	; 0x50
 8007878:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b50      	cmp	r3, #80	; 0x50
 800787e:	d00a      	beq.n	8007896 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	61bb      	str	r3, [r7, #24]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007896:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00d      	beq.n	80078be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	4613      	mov	r3, r2
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f83f 	bl	800793c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3730      	adds	r7, #48	; 0x30
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	613b      	str	r3, [r7, #16]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3350      	adds	r3, #80	; 0x50
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff fa13 	bl	8006d2c <pvPortMalloc>
 8007906:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d011      	beq.n	8007932 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	3350      	adds	r3, #80	; 0x50
 8007916:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007920:	79fa      	ldrb	r2, [r7, #7]
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	4613      	mov	r3, r2
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f805 	bl	800793c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007932:	69bb      	ldr	r3, [r7, #24]
	}
 8007934:	4618      	mov	r0, r3
 8007936:	3720      	adds	r7, #32
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d103      	bne.n	8007958 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e002      	b.n	800795e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800796a:	2101      	movs	r1, #1
 800796c:	69b8      	ldr	r0, [r7, #24]
 800796e:	f7ff fecb 	bl	8007708 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	78fa      	ldrb	r2, [r7, #3]
 8007976:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800797a:	bf00      	nop
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08e      	sub	sp, #56	; 0x38
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007992:	2300      	movs	r3, #0
 8007994:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <xQueueGenericSend+0x32>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d103      	bne.n	80079c4 <xQueueGenericSend+0x40>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <xQueueGenericSend+0x44>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e000      	b.n	80079ca <xQueueGenericSend+0x46>
 80079c8:	2300      	movs	r3, #0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <xQueueGenericSend+0x60>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d103      	bne.n	80079f2 <xQueueGenericSend+0x6e>
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <xQueueGenericSend+0x72>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <xQueueGenericSend+0x74>
 80079f6:	2300      	movs	r3, #0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xQueueGenericSend+0x8e>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	623b      	str	r3, [r7, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a12:	f001 fb05 	bl	8009020 <xTaskGetSchedulerState>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <xQueueGenericSend+0x9e>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <xQueueGenericSend+0xa2>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <xQueueGenericSend+0xa4>
 8007a26:	2300      	movs	r3, #0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <xQueueGenericSend+0xbe>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	61fb      	str	r3, [r7, #28]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a42:	f7ff fd3f 	bl	80074c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d302      	bcc.n	8007a58 <xQueueGenericSend+0xd4>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d129      	bne.n	8007aac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a5e:	f000 fa8b 	bl	8007f78 <prvCopyDataToQueue>
 8007a62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d010      	beq.n	8007a8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	3324      	adds	r3, #36	; 0x24
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 f913 	bl	8008c9c <xTaskRemoveFromEventList>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d013      	beq.n	8007aa4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a7c:	4b3f      	ldr	r3, [pc, #252]	; (8007b7c <xQueueGenericSend+0x1f8>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	e00a      	b.n	8007aa4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a94:	4b39      	ldr	r3, [pc, #228]	; (8007b7c <xQueueGenericSend+0x1f8>)
 8007a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007aa4:	f7ff fd3e 	bl	8007524 <vPortExitCritical>
				return pdPASS;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e063      	b.n	8007b74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d103      	bne.n	8007aba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ab2:	f7ff fd37 	bl	8007524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e05c      	b.n	8007b74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d106      	bne.n	8007ace <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ac0:	f107 0314 	add.w	r3, r7, #20
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 f94d 	bl	8008d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007aca:	2301      	movs	r3, #1
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ace:	f7ff fd29 	bl	8007524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ad2:	f000 feb9 	bl	8008848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ad6:	f7ff fcf5 	bl	80074c4 <vPortEnterCritical>
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ae0:	b25b      	sxtb	r3, r3
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d103      	bne.n	8007af0 <xQueueGenericSend+0x16c>
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007af6:	b25b      	sxtb	r3, r3
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d103      	bne.n	8007b06 <xQueueGenericSend+0x182>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b06:	f7ff fd0d 	bl	8007524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b0a:	1d3a      	adds	r2, r7, #4
 8007b0c:	f107 0314 	add.w	r3, r7, #20
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f001 f93c 	bl	8008d90 <xTaskCheckForTimeOut>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d124      	bne.n	8007b68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b20:	f000 fb22 	bl	8008168 <prvIsQueueFull>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d018      	beq.n	8007b5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	3310      	adds	r3, #16
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	4611      	mov	r1, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 f862 	bl	8008bfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b3a:	f000 faad 	bl	8008098 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b3e:	f000 fe91 	bl	8008864 <xTaskResumeAll>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f47f af7c 	bne.w	8007a42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007b4a:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <xQueueGenericSend+0x1f8>)
 8007b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	e772      	b.n	8007a42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b5e:	f000 fa9b 	bl	8008098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b62:	f000 fe7f 	bl	8008864 <xTaskResumeAll>
 8007b66:	e76c      	b.n	8007a42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b6a:	f000 fa95 	bl	8008098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b6e:	f000 fe79 	bl	8008864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3738      	adds	r7, #56	; 0x38
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	e000ed04 	.word	0xe000ed04

08007b80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b090      	sub	sp, #64	; 0x40
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d103      	bne.n	8007bbc <xQueueGenericSendFromISR+0x3c>
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <xQueueGenericSendFromISR+0x40>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e000      	b.n	8007bc2 <xQueueGenericSendFromISR+0x42>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bd8:	bf00      	nop
 8007bda:	e7fe      	b.n	8007bda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d103      	bne.n	8007bea <xQueueGenericSendFromISR+0x6a>
 8007be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d101      	bne.n	8007bee <xQueueGenericSendFromISR+0x6e>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e000      	b.n	8007bf0 <xQueueGenericSendFromISR+0x70>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10a      	bne.n	8007c0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	623b      	str	r3, [r7, #32]
}
 8007c06:	bf00      	nop
 8007c08:	e7fe      	b.n	8007c08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c0a:	f7ff fd3d 	bl	8007688 <vPortValidateInterruptPriority>
	__asm volatile
 8007c0e:	f3ef 8211 	mrs	r2, BASEPRI
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	61fa      	str	r2, [r7, #28]
 8007c24:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007c26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d302      	bcc.n	8007c3c <xQueueGenericSendFromISR+0xbc>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d12f      	bne.n	8007c9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c52:	f000 f991 	bl	8007f78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5e:	d112      	bne.n	8007c86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d016      	beq.n	8007c96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	3324      	adds	r3, #36	; 0x24
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 f815 	bl	8008c9c <xTaskRemoveFromEventList>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00e      	beq.n	8007c96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	e007      	b.n	8007c96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	b25a      	sxtb	r2, r3
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c96:	2301      	movs	r3, #1
 8007c98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c9a:	e001      	b.n	8007ca0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f383 8811 	msr	BASEPRI, r3
}
 8007caa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3740      	adds	r7, #64	; 0x40
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08c      	sub	sp, #48	; 0x30
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <xQueueReceive+0x30>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	623b      	str	r3, [r7, #32]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d103      	bne.n	8007cf6 <xQueueReceive+0x3e>
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <xQueueReceive+0x42>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <xQueueReceive+0x44>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <xQueueReceive+0x5e>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	61fb      	str	r3, [r7, #28]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d16:	f001 f983 	bl	8009020 <xTaskGetSchedulerState>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <xQueueReceive+0x6e>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <xQueueReceive+0x72>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <xQueueReceive+0x74>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <xQueueReceive+0x8e>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	61bb      	str	r3, [r7, #24]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d46:	f7ff fbbd 	bl	80074c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d01f      	beq.n	8007d96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d5a:	f000 f977 	bl	800804c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	1e5a      	subs	r2, r3, #1
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00f      	beq.n	8007d8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	3310      	adds	r3, #16
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 ff92 	bl	8008c9c <xTaskRemoveFromEventList>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d7e:	4b3d      	ldr	r3, [pc, #244]	; (8007e74 <xQueueReceive+0x1bc>)
 8007d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d8e:	f7ff fbc9 	bl	8007524 <vPortExitCritical>
				return pdPASS;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e069      	b.n	8007e6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d103      	bne.n	8007da4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d9c:	f7ff fbc2 	bl	8007524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007da0:	2300      	movs	r3, #0
 8007da2:	e062      	b.n	8007e6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d106      	bne.n	8007db8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007daa:	f107 0310 	add.w	r3, r7, #16
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 ffd8 	bl	8008d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007db4:	2301      	movs	r3, #1
 8007db6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007db8:	f7ff fbb4 	bl	8007524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dbc:	f000 fd44 	bl	8008848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dc0:	f7ff fb80 	bl	80074c4 <vPortEnterCritical>
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dca:	b25b      	sxtb	r3, r3
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d103      	bne.n	8007dda <xQueueReceive+0x122>
 8007dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007de0:	b25b      	sxtb	r3, r3
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de6:	d103      	bne.n	8007df0 <xQueueReceive+0x138>
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007df0:	f7ff fb98 	bl	8007524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007df4:	1d3a      	adds	r2, r7, #4
 8007df6:	f107 0310 	add.w	r3, r7, #16
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 ffc7 	bl	8008d90 <xTaskCheckForTimeOut>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d123      	bne.n	8007e50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0a:	f000 f997 	bl	800813c <prvIsQueueEmpty>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d017      	beq.n	8007e44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	3324      	adds	r3, #36	; 0x24
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 feed 	bl	8008bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e24:	f000 f938 	bl	8008098 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e28:	f000 fd1c 	bl	8008864 <xTaskResumeAll>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d189      	bne.n	8007d46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007e32:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <xQueueReceive+0x1bc>)
 8007e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	e780      	b.n	8007d46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e46:	f000 f927 	bl	8008098 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e4a:	f000 fd0b 	bl	8008864 <xTaskResumeAll>
 8007e4e:	e77a      	b.n	8007d46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e52:	f000 f921 	bl	8008098 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e56:	f000 fd05 	bl	8008864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e5c:	f000 f96e 	bl	800813c <prvIsQueueEmpty>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f43f af6f 	beq.w	8007d46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3730      	adds	r7, #48	; 0x30
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	e000ed04 	.word	0xe000ed04

08007e78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08e      	sub	sp, #56	; 0x38
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	623b      	str	r3, [r7, #32]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <xQueueReceiveFromISR+0x3a>
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <xQueueReceiveFromISR+0x3e>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <xQueueReceiveFromISR+0x40>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	61fb      	str	r3, [r7, #28]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ed2:	f7ff fbd9 	bl	8007688 <vPortValidateInterruptPriority>
	__asm volatile
 8007ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	61ba      	str	r2, [r7, #24]
 8007eec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007eee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d02f      	beq.n	8007f5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f0c:	f000 f89e 	bl	800804c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	1e5a      	subs	r2, r3, #1
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f20:	d112      	bne.n	8007f48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d016      	beq.n	8007f58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 feb4 	bl	8008c9c <xTaskRemoveFromEventList>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00e      	beq.n	8007f58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e007      	b.n	8007f58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	b25a      	sxtb	r2, r3
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f5c:	e001      	b.n	8007f62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	637b      	str	r3, [r7, #52]	; 0x34
 8007f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f383 8811 	msr	BASEPRI, r3
}
 8007f6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3738      	adds	r7, #56	; 0x38
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10d      	bne.n	8007fb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d14d      	bne.n	800803a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 f85a 	bl	800905c <xTaskPriorityDisinherit>
 8007fa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	609a      	str	r2, [r3, #8]
 8007fb0:	e043      	b.n	800803a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d119      	bne.n	8007fec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6858      	ldr	r0, [r3, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	f001 fe82 	bl	8009ccc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d32b      	bcc.n	800803a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	605a      	str	r2, [r3, #4]
 8007fea:	e026      	b.n	800803a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68d8      	ldr	r0, [r3, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	f001 fe68 	bl	8009ccc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	425b      	negs	r3, r3
 8008006:	441a      	add	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d207      	bcs.n	8008028 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008020:	425b      	negs	r3, r3
 8008022:	441a      	add	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b02      	cmp	r3, #2
 800802c:	d105      	bne.n	800803a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	3b01      	subs	r3, #1
 8008038:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008042:	697b      	ldr	r3, [r7, #20]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d018      	beq.n	8008090 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	441a      	add	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	429a      	cmp	r2, r3
 8008076:	d303      	bcc.n	8008080 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68d9      	ldr	r1, [r3, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008088:	461a      	mov	r2, r3
 800808a:	6838      	ldr	r0, [r7, #0]
 800808c:	f001 fe1e 	bl	8009ccc <memcpy>
	}
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080a0:	f7ff fa10 	bl	80074c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080ac:	e011      	b.n	80080d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d012      	beq.n	80080dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3324      	adds	r3, #36	; 0x24
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fdee 	bl	8008c9c <xTaskRemoveFromEventList>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080c6:	f000 fec5 	bl	8008e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dce9      	bgt.n	80080ae <prvUnlockQueue+0x16>
 80080da:	e000      	b.n	80080de <prvUnlockQueue+0x46>
					break;
 80080dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	22ff      	movs	r2, #255	; 0xff
 80080e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080e6:	f7ff fa1d 	bl	8007524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080ea:	f7ff f9eb 	bl	80074c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080f6:	e011      	b.n	800811c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d012      	beq.n	8008126 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3310      	adds	r3, #16
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fdc9 	bl	8008c9c <xTaskRemoveFromEventList>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008110:	f000 fea0 	bl	8008e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	3b01      	subs	r3, #1
 8008118:	b2db      	uxtb	r3, r3
 800811a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800811c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008120:	2b00      	cmp	r3, #0
 8008122:	dce9      	bgt.n	80080f8 <prvUnlockQueue+0x60>
 8008124:	e000      	b.n	8008128 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008126:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	22ff      	movs	r2, #255	; 0xff
 800812c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008130:	f7ff f9f8 	bl	8007524 <vPortExitCritical>
}
 8008134:	bf00      	nop
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008144:	f7ff f9be 	bl	80074c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008150:	2301      	movs	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e001      	b.n	800815a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800815a:	f7ff f9e3 	bl	8007524 <vPortExitCritical>

	return xReturn;
 800815e:	68fb      	ldr	r3, [r7, #12]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008170:	f7ff f9a8 	bl	80074c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817c:	429a      	cmp	r2, r3
 800817e:	d102      	bne.n	8008186 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008180:	2301      	movs	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e001      	b.n	800818a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800818a:	f7ff f9cb 	bl	8007524 <vPortExitCritical>

	return xReturn;
 800818e:	68fb      	ldr	r3, [r7, #12]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	e014      	b.n	80081d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081a8:	4a0f      	ldr	r2, [pc, #60]	; (80081e8 <vQueueAddToRegistry+0x50>)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10b      	bne.n	80081cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081b4:	490c      	ldr	r1, [pc, #48]	; (80081e8 <vQueueAddToRegistry+0x50>)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081be:	4a0a      	ldr	r2, [pc, #40]	; (80081e8 <vQueueAddToRegistry+0x50>)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	4413      	add	r3, r2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081ca:	e006      	b.n	80081da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b07      	cmp	r3, #7
 80081d6:	d9e7      	bls.n	80081a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	240046fc 	.word	0x240046fc

080081ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081fc:	f7ff f962 	bl	80074c4 <vPortEnterCritical>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008206:	b25b      	sxtb	r3, r3
 8008208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820c:	d103      	bne.n	8008216 <vQueueWaitForMessageRestricted+0x2a>
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800821c:	b25b      	sxtb	r3, r3
 800821e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008222:	d103      	bne.n	800822c <vQueueWaitForMessageRestricted+0x40>
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800822c:	f7ff f97a 	bl	8007524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	2b00      	cmp	r3, #0
 8008236:	d106      	bne.n	8008246 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	3324      	adds	r3, #36	; 0x24
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fcff 	bl	8008c44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008246:	6978      	ldr	r0, [r7, #20]
 8008248:	f7ff ff26 	bl	8008098 <prvUnlockQueue>
	}
 800824c:	bf00      	nop
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08e      	sub	sp, #56	; 0x38
 8008258:	af04      	add	r7, sp, #16
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	623b      	str	r3, [r7, #32]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <xTaskCreateStatic+0x46>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	61fb      	str	r3, [r7, #28]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800829a:	23bc      	movs	r3, #188	; 0xbc
 800829c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2bbc      	cmp	r3, #188	; 0xbc
 80082a2:	d00a      	beq.n	80082ba <xTaskCreateStatic+0x66>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	61bb      	str	r3, [r7, #24]
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01e      	beq.n	8008300 <xTaskCreateStatic+0xac>
 80082c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01b      	beq.n	8008300 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	2202      	movs	r2, #2
 80082d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082da:	2300      	movs	r3, #0
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	9302      	str	r3, [sp, #8]
 80082e2:	f107 0314 	add.w	r3, r7, #20
 80082e6:	9301      	str	r3, [sp, #4]
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	68b9      	ldr	r1, [r7, #8]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f850 	bl	8008398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082fa:	f000 f8f3 	bl	80084e4 <prvAddNewTaskToReadyList>
 80082fe:	e001      	b.n	8008304 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008304:	697b      	ldr	r3, [r7, #20]
	}
 8008306:	4618      	mov	r0, r3
 8008308:	3728      	adds	r7, #40	; 0x28
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800830e:	b580      	push	{r7, lr}
 8008310:	b08c      	sub	sp, #48	; 0x30
 8008312:	af04      	add	r7, sp, #16
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	4613      	mov	r3, r2
 800831c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe fd02 	bl	8006d2c <pvPortMalloc>
 8008328:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00e      	beq.n	800834e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008330:	20bc      	movs	r0, #188	; 0xbc
 8008332:	f7fe fcfb 	bl	8006d2c <pvPortMalloc>
 8008336:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	631a      	str	r2, [r3, #48]	; 0x30
 8008344:	e005      	b.n	8008352 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008346:	6978      	ldr	r0, [r7, #20]
 8008348:	f7fe fdbc 	bl	8006ec4 <vPortFree>
 800834c:	e001      	b.n	8008352 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d017      	beq.n	8008388 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008360:	88fa      	ldrh	r2, [r7, #6]
 8008362:	2300      	movs	r3, #0
 8008364:	9303      	str	r3, [sp, #12]
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	9302      	str	r3, [sp, #8]
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 f80e 	bl	8008398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800837c:	69f8      	ldr	r0, [r7, #28]
 800837e:	f000 f8b1 	bl	80084e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008382:	2301      	movs	r3, #1
 8008384:	61bb      	str	r3, [r7, #24]
 8008386:	e002      	b.n	800838e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008388:	f04f 33ff 	mov.w	r3, #4294967295
 800838c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800838e:	69bb      	ldr	r3, [r7, #24]
	}
 8008390:	4618      	mov	r0, r3
 8008392:	3720      	adds	r7, #32
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	461a      	mov	r2, r3
 80083b0:	21a5      	movs	r1, #165	; 0xa5
 80083b2:	f001 fc99 	bl	8009ce8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80083c0:	440b      	add	r3, r1
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	f023 0307 	bic.w	r3, r3, #7
 80083ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	617b      	str	r3, [r7, #20]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d01f      	beq.n	8008436 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083f6:	2300      	movs	r3, #0
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	e012      	b.n	8008422 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	7819      	ldrb	r1, [r3, #0]
 8008404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	4413      	add	r3, r2
 800840a:	3334      	adds	r3, #52	; 0x34
 800840c:	460a      	mov	r2, r1
 800840e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	4413      	add	r3, r2
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d006      	beq.n	800842a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	3301      	adds	r3, #1
 8008420:	61fb      	str	r3, [r7, #28]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	2b0f      	cmp	r3, #15
 8008426:	d9e9      	bls.n	80083fc <prvInitialiseNewTask+0x64>
 8008428:	e000      	b.n	800842c <prvInitialiseNewTask+0x94>
			{
				break;
 800842a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008434:	e003      	b.n	800843e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	2b37      	cmp	r3, #55	; 0x37
 8008442:	d901      	bls.n	8008448 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008444:	2337      	movs	r3, #55	; 0x37
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800844c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008452:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	2200      	movs	r2, #0
 8008458:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	3304      	adds	r3, #4
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe fe6e 	bl	8007140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	3318      	adds	r3, #24
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe fe69 	bl	8007140 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008472:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008482:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	2200      	movs	r2, #0
 8008490:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	3354      	adds	r3, #84	; 0x54
 8008498:	2260      	movs	r2, #96	; 0x60
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f001 fc23 	bl	8009ce8 <memset>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	4a0c      	ldr	r2, [pc, #48]	; (80084d8 <prvInitialiseNewTask+0x140>)
 80084a6:	659a      	str	r2, [r3, #88]	; 0x58
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <prvInitialiseNewTask+0x144>)
 80084ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	4a0b      	ldr	r2, [pc, #44]	; (80084e0 <prvInitialiseNewTask+0x148>)
 80084b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	69b8      	ldr	r0, [r7, #24]
 80084ba:	f7fe fed5 	bl	8007268 <pxPortInitialiseStack>
 80084be:	4602      	mov	r2, r0
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084d0:	bf00      	nop
 80084d2:	3720      	adds	r7, #32
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	08009f38 	.word	0x08009f38
 80084dc:	08009f58 	.word	0x08009f58
 80084e0:	08009f18 	.word	0x08009f18

080084e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084ec:	f7fe ffea 	bl	80074c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084f0:	4b2d      	ldr	r3, [pc, #180]	; (80085a8 <prvAddNewTaskToReadyList+0xc4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3301      	adds	r3, #1
 80084f6:	4a2c      	ldr	r2, [pc, #176]	; (80085a8 <prvAddNewTaskToReadyList+0xc4>)
 80084f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084fa:	4b2c      	ldr	r3, [pc, #176]	; (80085ac <prvAddNewTaskToReadyList+0xc8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008502:	4a2a      	ldr	r2, [pc, #168]	; (80085ac <prvAddNewTaskToReadyList+0xc8>)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008508:	4b27      	ldr	r3, [pc, #156]	; (80085a8 <prvAddNewTaskToReadyList+0xc4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d110      	bne.n	8008532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008510:	f000 fcc4 	bl	8008e9c <prvInitialiseTaskLists>
 8008514:	e00d      	b.n	8008532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008516:	4b26      	ldr	r3, [pc, #152]	; (80085b0 <prvAddNewTaskToReadyList+0xcc>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800851e:	4b23      	ldr	r3, [pc, #140]	; (80085ac <prvAddNewTaskToReadyList+0xc8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	429a      	cmp	r2, r3
 800852a:	d802      	bhi.n	8008532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800852c:	4a1f      	ldr	r2, [pc, #124]	; (80085ac <prvAddNewTaskToReadyList+0xc8>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008532:	4b20      	ldr	r3, [pc, #128]	; (80085b4 <prvAddNewTaskToReadyList+0xd0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3301      	adds	r3, #1
 8008538:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <prvAddNewTaskToReadyList+0xd0>)
 800853a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800853c:	4b1d      	ldr	r3, [pc, #116]	; (80085b4 <prvAddNewTaskToReadyList+0xd0>)
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008548:	4b1b      	ldr	r3, [pc, #108]	; (80085b8 <prvAddNewTaskToReadyList+0xd4>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d903      	bls.n	8008558 <prvAddNewTaskToReadyList+0x74>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <prvAddNewTaskToReadyList+0xd4>)
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4a15      	ldr	r2, [pc, #84]	; (80085bc <prvAddNewTaskToReadyList+0xd8>)
 8008566:	441a      	add	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3304      	adds	r3, #4
 800856c:	4619      	mov	r1, r3
 800856e:	4610      	mov	r0, r2
 8008570:	f7fe fdf3 	bl	800715a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008574:	f7fe ffd6 	bl	8007524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008578:	4b0d      	ldr	r3, [pc, #52]	; (80085b0 <prvAddNewTaskToReadyList+0xcc>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00e      	beq.n	800859e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <prvAddNewTaskToReadyList+0xc8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	429a      	cmp	r2, r3
 800858c:	d207      	bcs.n	800859e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800858e:	4b0c      	ldr	r3, [pc, #48]	; (80085c0 <prvAddNewTaskToReadyList+0xdc>)
 8008590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	24004c10 	.word	0x24004c10
 80085ac:	2400473c 	.word	0x2400473c
 80085b0:	24004c1c 	.word	0x24004c1c
 80085b4:	24004c2c 	.word	0x24004c2c
 80085b8:	24004c18 	.word	0x24004c18
 80085bc:	24004740 	.word	0x24004740
 80085c0:	e000ed04 	.word	0xe000ed04

080085c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d017      	beq.n	8008606 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085d6:	4b13      	ldr	r3, [pc, #76]	; (8008624 <vTaskDelay+0x60>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <vTaskDelay+0x30>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	60bb      	str	r3, [r7, #8]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085f4:	f000 f928 	bl	8008848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085f8:	2100      	movs	r1, #0
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 ff9e 	bl	800953c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008600:	f000 f930 	bl	8008864 <xTaskResumeAll>
 8008604:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d107      	bne.n	800861c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <vTaskDelay+0x64>)
 800860e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800861c:	bf00      	nop
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	24004c38 	.word	0x24004c38
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8008636:	2300      	movs	r3, #0
 8008638:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b37      	cmp	r3, #55	; 0x37
 800863e:	d90a      	bls.n	8008656 <vTaskPrioritySet+0x2a>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	60fb      	str	r3, [r7, #12]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b37      	cmp	r3, #55	; 0x37
 800865a:	d901      	bls.n	8008660 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800865c:	2337      	movs	r3, #55	; 0x37
 800865e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8008660:	f7fe ff30 	bl	80074c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <vTaskPrioritySet+0x44>
 800866a:	4b3b      	ldr	r3, [pc, #236]	; (8008758 <vTaskPrioritySet+0x12c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	e000      	b.n	8008672 <vTaskPrioritySet+0x46>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008678:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d063      	beq.n	800874a <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	429a      	cmp	r2, r3
 8008688:	d90d      	bls.n	80086a6 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800868a:	4b33      	ldr	r3, [pc, #204]	; (8008758 <vTaskPrioritySet+0x12c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	429a      	cmp	r2, r3
 8008692:	d00f      	beq.n	80086b4 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8008694:	4b30      	ldr	r3, [pc, #192]	; (8008758 <vTaskPrioritySet+0x12c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d309      	bcc.n	80086b4 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 80086a0:	2301      	movs	r3, #1
 80086a2:	61fb      	str	r3, [r7, #28]
 80086a4:	e006      	b.n	80086b4 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80086a6:	4b2c      	ldr	r3, [pc, #176]	; (8008758 <vTaskPrioritySet+0x12c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d101      	bne.n	80086b4 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d102      	bne.n	80086cc <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	db04      	blt.n	80086e4 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	6959      	ldr	r1, [r3, #20]
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4a1a      	ldr	r2, [pc, #104]	; (800875c <vTaskPrioritySet+0x130>)
 80086f4:	4413      	add	r3, r2
 80086f6:	4299      	cmp	r1, r3
 80086f8:	d11c      	bne.n	8008734 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	3304      	adds	r3, #4
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fd88 	bl	8007214 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008708:	4b15      	ldr	r3, [pc, #84]	; (8008760 <vTaskPrioritySet+0x134>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	d903      	bls.n	8008718 <vTaskPrioritySet+0xec>
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	4a12      	ldr	r2, [pc, #72]	; (8008760 <vTaskPrioritySet+0x134>)
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4a0d      	ldr	r2, [pc, #52]	; (800875c <vTaskPrioritySet+0x130>)
 8008726:	441a      	add	r2, r3
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	3304      	adds	r3, #4
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	f7fe fd13 	bl	800715a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d007      	beq.n	800874a <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800873a:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <vTaskPrioritySet+0x138>)
 800873c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800874a:	f7fe feeb 	bl	8007524 <vPortExitCritical>
	}
 800874e:	bf00      	nop
 8008750:	3720      	adds	r7, #32
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	2400473c 	.word	0x2400473c
 800875c:	24004740 	.word	0x24004740
 8008760:	24004c18 	.word	0x24004c18
 8008764:	e000ed04 	.word	0xe000ed04

08008768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	; 0x28
 800876c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008776:	463a      	mov	r2, r7
 8008778:	1d39      	adds	r1, r7, #4
 800877a:	f107 0308 	add.w	r3, r7, #8
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe faa0 	bl	8006cc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	9202      	str	r2, [sp, #8]
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	2300      	movs	r3, #0
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	2300      	movs	r3, #0
 8008794:	460a      	mov	r2, r1
 8008796:	4924      	ldr	r1, [pc, #144]	; (8008828 <vTaskStartScheduler+0xc0>)
 8008798:	4824      	ldr	r0, [pc, #144]	; (800882c <vTaskStartScheduler+0xc4>)
 800879a:	f7ff fd5b 	bl	8008254 <xTaskCreateStatic>
 800879e:	4603      	mov	r3, r0
 80087a0:	4a23      	ldr	r2, [pc, #140]	; (8008830 <vTaskStartScheduler+0xc8>)
 80087a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087a4:	4b22      	ldr	r3, [pc, #136]	; (8008830 <vTaskStartScheduler+0xc8>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087ac:	2301      	movs	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e001      	b.n	80087b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d102      	bne.n	80087c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087bc:	f000 ff12 	bl	80095e4 <xTimerCreateTimerTask>
 80087c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d11b      	bne.n	8008800 <vTaskStartScheduler+0x98>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	613b      	str	r3, [r7, #16]
}
 80087da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087dc:	4b15      	ldr	r3, [pc, #84]	; (8008834 <vTaskStartScheduler+0xcc>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3354      	adds	r3, #84	; 0x54
 80087e2:	4a15      	ldr	r2, [pc, #84]	; (8008838 <vTaskStartScheduler+0xd0>)
 80087e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087e6:	4b15      	ldr	r3, [pc, #84]	; (800883c <vTaskStartScheduler+0xd4>)
 80087e8:	f04f 32ff 	mov.w	r2, #4294967295
 80087ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087ee:	4b14      	ldr	r3, [pc, #80]	; (8008840 <vTaskStartScheduler+0xd8>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087f4:	4b13      	ldr	r3, [pc, #76]	; (8008844 <vTaskStartScheduler+0xdc>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087fa:	f7fe fdc1 	bl	8007380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087fe:	e00e      	b.n	800881e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d10a      	bne.n	800881e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	60fb      	str	r3, [r7, #12]
}
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <vTaskStartScheduler+0xb4>
}
 800881e:	bf00      	nop
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	08009ee0 	.word	0x08009ee0
 800882c:	08008e6d 	.word	0x08008e6d
 8008830:	24004c34 	.word	0x24004c34
 8008834:	2400473c 	.word	0x2400473c
 8008838:	24000020 	.word	0x24000020
 800883c:	24004c30 	.word	0x24004c30
 8008840:	24004c1c 	.word	0x24004c1c
 8008844:	24004c14 	.word	0x24004c14

08008848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800884c:	4b04      	ldr	r3, [pc, #16]	; (8008860 <vTaskSuspendAll+0x18>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3301      	adds	r3, #1
 8008852:	4a03      	ldr	r2, [pc, #12]	; (8008860 <vTaskSuspendAll+0x18>)
 8008854:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008856:	bf00      	nop
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	24004c38 	.word	0x24004c38

08008864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800886e:	2300      	movs	r3, #0
 8008870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008872:	4b42      	ldr	r3, [pc, #264]	; (800897c <xTaskResumeAll+0x118>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10a      	bne.n	8008890 <xTaskResumeAll+0x2c>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	603b      	str	r3, [r7, #0]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008890:	f7fe fe18 	bl	80074c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008894:	4b39      	ldr	r3, [pc, #228]	; (800897c <xTaskResumeAll+0x118>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3b01      	subs	r3, #1
 800889a:	4a38      	ldr	r2, [pc, #224]	; (800897c <xTaskResumeAll+0x118>)
 800889c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800889e:	4b37      	ldr	r3, [pc, #220]	; (800897c <xTaskResumeAll+0x118>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d162      	bne.n	800896c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088a6:	4b36      	ldr	r3, [pc, #216]	; (8008980 <xTaskResumeAll+0x11c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d05e      	beq.n	800896c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088ae:	e02f      	b.n	8008910 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b0:	4b34      	ldr	r3, [pc, #208]	; (8008984 <xTaskResumeAll+0x120>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3318      	adds	r3, #24
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fca9 	bl	8007214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe fca4 	bl	8007214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d0:	4b2d      	ldr	r3, [pc, #180]	; (8008988 <xTaskResumeAll+0x124>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d903      	bls.n	80088e0 <xTaskResumeAll+0x7c>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	4a2a      	ldr	r2, [pc, #168]	; (8008988 <xTaskResumeAll+0x124>)
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4a27      	ldr	r2, [pc, #156]	; (800898c <xTaskResumeAll+0x128>)
 80088ee:	441a      	add	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3304      	adds	r3, #4
 80088f4:	4619      	mov	r1, r3
 80088f6:	4610      	mov	r0, r2
 80088f8:	f7fe fc2f 	bl	800715a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	4b23      	ldr	r3, [pc, #140]	; (8008990 <xTaskResumeAll+0x12c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	429a      	cmp	r2, r3
 8008908:	d302      	bcc.n	8008910 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800890a:	4b22      	ldr	r3, [pc, #136]	; (8008994 <xTaskResumeAll+0x130>)
 800890c:	2201      	movs	r2, #1
 800890e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008910:	4b1c      	ldr	r3, [pc, #112]	; (8008984 <xTaskResumeAll+0x120>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1cb      	bne.n	80088b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800891e:	f000 fb5f 	bl	8008fe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008922:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <xTaskResumeAll+0x134>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d010      	beq.n	8008950 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800892e:	f000 f847 	bl	80089c0 <xTaskIncrementTick>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008938:	4b16      	ldr	r3, [pc, #88]	; (8008994 <xTaskResumeAll+0x130>)
 800893a:	2201      	movs	r2, #1
 800893c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3b01      	subs	r3, #1
 8008942:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f1      	bne.n	800892e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800894a:	4b13      	ldr	r3, [pc, #76]	; (8008998 <xTaskResumeAll+0x134>)
 800894c:	2200      	movs	r2, #0
 800894e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008950:	4b10      	ldr	r3, [pc, #64]	; (8008994 <xTaskResumeAll+0x130>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d009      	beq.n	800896c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008958:	2301      	movs	r3, #1
 800895a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800895c:	4b0f      	ldr	r3, [pc, #60]	; (800899c <xTaskResumeAll+0x138>)
 800895e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800896c:	f7fe fdda 	bl	8007524 <vPortExitCritical>

	return xAlreadyYielded;
 8008970:	68bb      	ldr	r3, [r7, #8]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	24004c38 	.word	0x24004c38
 8008980:	24004c10 	.word	0x24004c10
 8008984:	24004bd0 	.word	0x24004bd0
 8008988:	24004c18 	.word	0x24004c18
 800898c:	24004740 	.word	0x24004740
 8008990:	2400473c 	.word	0x2400473c
 8008994:	24004c24 	.word	0x24004c24
 8008998:	24004c20 	.word	0x24004c20
 800899c:	e000ed04 	.word	0xe000ed04

080089a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089a6:	4b05      	ldr	r3, [pc, #20]	; (80089bc <xTaskGetTickCount+0x1c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089ac:	687b      	ldr	r3, [r7, #4]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	24004c14 	.word	0x24004c14

080089c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089ca:	4b4f      	ldr	r3, [pc, #316]	; (8008b08 <xTaskIncrementTick+0x148>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 808f 	bne.w	8008af2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089d4:	4b4d      	ldr	r3, [pc, #308]	; (8008b0c <xTaskIncrementTick+0x14c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3301      	adds	r3, #1
 80089da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089dc:	4a4b      	ldr	r2, [pc, #300]	; (8008b0c <xTaskIncrementTick+0x14c>)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d120      	bne.n	8008a2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80089e8:	4b49      	ldr	r3, [pc, #292]	; (8008b10 <xTaskIncrementTick+0x150>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <xTaskIncrementTick+0x48>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	603b      	str	r3, [r7, #0]
}
 8008a04:	bf00      	nop
 8008a06:	e7fe      	b.n	8008a06 <xTaskIncrementTick+0x46>
 8008a08:	4b41      	ldr	r3, [pc, #260]	; (8008b10 <xTaskIncrementTick+0x150>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	4b41      	ldr	r3, [pc, #260]	; (8008b14 <xTaskIncrementTick+0x154>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a3f      	ldr	r2, [pc, #252]	; (8008b10 <xTaskIncrementTick+0x150>)
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	4a3f      	ldr	r2, [pc, #252]	; (8008b14 <xTaskIncrementTick+0x154>)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	4b3e      	ldr	r3, [pc, #248]	; (8008b18 <xTaskIncrementTick+0x158>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3301      	adds	r3, #1
 8008a22:	4a3d      	ldr	r2, [pc, #244]	; (8008b18 <xTaskIncrementTick+0x158>)
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	f000 fadb 	bl	8008fe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a2a:	4b3c      	ldr	r3, [pc, #240]	; (8008b1c <xTaskIncrementTick+0x15c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d349      	bcc.n	8008ac8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a34:	4b36      	ldr	r3, [pc, #216]	; (8008b10 <xTaskIncrementTick+0x150>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d104      	bne.n	8008a48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a3e:	4b37      	ldr	r3, [pc, #220]	; (8008b1c <xTaskIncrementTick+0x15c>)
 8008a40:	f04f 32ff 	mov.w	r2, #4294967295
 8008a44:	601a      	str	r2, [r3, #0]
					break;
 8008a46:	e03f      	b.n	8008ac8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a48:	4b31      	ldr	r3, [pc, #196]	; (8008b10 <xTaskIncrementTick+0x150>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d203      	bcs.n	8008a68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a60:	4a2e      	ldr	r2, [pc, #184]	; (8008b1c <xTaskIncrementTick+0x15c>)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a66:	e02f      	b.n	8008ac8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fe fbd1 	bl	8007214 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d004      	beq.n	8008a84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	3318      	adds	r3, #24
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fbc8 	bl	8007214 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a88:	4b25      	ldr	r3, [pc, #148]	; (8008b20 <xTaskIncrementTick+0x160>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d903      	bls.n	8008a98 <xTaskIncrementTick+0xd8>
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	4a22      	ldr	r2, [pc, #136]	; (8008b20 <xTaskIncrementTick+0x160>)
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4a1f      	ldr	r2, [pc, #124]	; (8008b24 <xTaskIncrementTick+0x164>)
 8008aa6:	441a      	add	r2, r3
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	4619      	mov	r1, r3
 8008aae:	4610      	mov	r0, r2
 8008ab0:	f7fe fb53 	bl	800715a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab8:	4b1b      	ldr	r3, [pc, #108]	; (8008b28 <xTaskIncrementTick+0x168>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d3b8      	bcc.n	8008a34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ac6:	e7b5      	b.n	8008a34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ac8:	4b17      	ldr	r3, [pc, #92]	; (8008b28 <xTaskIncrementTick+0x168>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ace:	4915      	ldr	r1, [pc, #84]	; (8008b24 <xTaskIncrementTick+0x164>)
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d901      	bls.n	8008ae4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ae4:	4b11      	ldr	r3, [pc, #68]	; (8008b2c <xTaskIncrementTick+0x16c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d007      	beq.n	8008afc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008aec:	2301      	movs	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e004      	b.n	8008afc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008af2:	4b0f      	ldr	r3, [pc, #60]	; (8008b30 <xTaskIncrementTick+0x170>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3301      	adds	r3, #1
 8008af8:	4a0d      	ldr	r2, [pc, #52]	; (8008b30 <xTaskIncrementTick+0x170>)
 8008afa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008afc:	697b      	ldr	r3, [r7, #20]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	24004c38 	.word	0x24004c38
 8008b0c:	24004c14 	.word	0x24004c14
 8008b10:	24004bc8 	.word	0x24004bc8
 8008b14:	24004bcc 	.word	0x24004bcc
 8008b18:	24004c28 	.word	0x24004c28
 8008b1c:	24004c30 	.word	0x24004c30
 8008b20:	24004c18 	.word	0x24004c18
 8008b24:	24004740 	.word	0x24004740
 8008b28:	2400473c 	.word	0x2400473c
 8008b2c:	24004c24 	.word	0x24004c24
 8008b30:	24004c20 	.word	0x24004c20

08008b34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b3a:	4b2a      	ldr	r3, [pc, #168]	; (8008be4 <vTaskSwitchContext+0xb0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b42:	4b29      	ldr	r3, [pc, #164]	; (8008be8 <vTaskSwitchContext+0xb4>)
 8008b44:	2201      	movs	r2, #1
 8008b46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b48:	e046      	b.n	8008bd8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008b4a:	4b27      	ldr	r3, [pc, #156]	; (8008be8 <vTaskSwitchContext+0xb4>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b50:	4b26      	ldr	r3, [pc, #152]	; (8008bec <vTaskSwitchContext+0xb8>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	e010      	b.n	8008b7a <vTaskSwitchContext+0x46>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <vTaskSwitchContext+0x40>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	607b      	str	r3, [r7, #4]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <vTaskSwitchContext+0x3e>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	491d      	ldr	r1, [pc, #116]	; (8008bf0 <vTaskSwitchContext+0xbc>)
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0e4      	beq.n	8008b58 <vTaskSwitchContext+0x24>
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4613      	mov	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4a15      	ldr	r2, [pc, #84]	; (8008bf0 <vTaskSwitchContext+0xbc>)
 8008b9a:	4413      	add	r3, r2
 8008b9c:	60bb      	str	r3, [r7, #8]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	605a      	str	r2, [r3, #4]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	3308      	adds	r3, #8
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d104      	bne.n	8008bbe <vTaskSwitchContext+0x8a>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	605a      	str	r2, [r3, #4]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	4a0b      	ldr	r2, [pc, #44]	; (8008bf4 <vTaskSwitchContext+0xc0>)
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	4a08      	ldr	r2, [pc, #32]	; (8008bec <vTaskSwitchContext+0xb8>)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bce:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <vTaskSwitchContext+0xc0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3354      	adds	r3, #84	; 0x54
 8008bd4:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <vTaskSwitchContext+0xc4>)
 8008bd6:	6013      	str	r3, [r2, #0]
}
 8008bd8:	bf00      	nop
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	24004c38 	.word	0x24004c38
 8008be8:	24004c24 	.word	0x24004c24
 8008bec:	24004c18 	.word	0x24004c18
 8008bf0:	24004740 	.word	0x24004740
 8008bf4:	2400473c 	.word	0x2400473c
 8008bf8:	24000020 	.word	0x24000020

08008bfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c22:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <vTaskPlaceOnEventList+0x44>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3318      	adds	r3, #24
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7fe fab9 	bl	80071a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c30:	2101      	movs	r1, #1
 8008c32:	6838      	ldr	r0, [r7, #0]
 8008c34:	f000 fc82 	bl	800953c <prvAddCurrentTaskToDelayedList>
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	2400473c 	.word	0x2400473c

08008c44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	617b      	str	r3, [r7, #20]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3318      	adds	r3, #24
 8008c72:	4619      	mov	r1, r3
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7fe fa70 	bl	800715a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008c80:	f04f 33ff 	mov.w	r3, #4294967295
 8008c84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	68b8      	ldr	r0, [r7, #8]
 8008c8a:	f000 fc57 	bl	800953c <prvAddCurrentTaskToDelayedList>
	}
 8008c8e:	bf00      	nop
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	2400473c 	.word	0x2400473c

08008c9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	60fb      	str	r3, [r7, #12]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	3318      	adds	r3, #24
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fe faa1 	bl	8007214 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cd2:	4b1e      	ldr	r3, [pc, #120]	; (8008d4c <xTaskRemoveFromEventList+0xb0>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d11d      	bne.n	8008d16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fa98 	bl	8007214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce8:	4b19      	ldr	r3, [pc, #100]	; (8008d50 <xTaskRemoveFromEventList+0xb4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d903      	bls.n	8008cf8 <xTaskRemoveFromEventList+0x5c>
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <xTaskRemoveFromEventList+0xb4>)
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4a13      	ldr	r2, [pc, #76]	; (8008d54 <xTaskRemoveFromEventList+0xb8>)
 8008d06:	441a      	add	r2, r3
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f7fe fa23 	bl	800715a <vListInsertEnd>
 8008d14:	e005      	b.n	8008d22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	3318      	adds	r3, #24
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	480e      	ldr	r0, [pc, #56]	; (8008d58 <xTaskRemoveFromEventList+0xbc>)
 8008d1e:	f7fe fa1c 	bl	800715a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <xTaskRemoveFromEventList+0xc0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d905      	bls.n	8008d3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d34:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <xTaskRemoveFromEventList+0xc4>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	e001      	b.n	8008d40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d40:	697b      	ldr	r3, [r7, #20]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	24004c38 	.word	0x24004c38
 8008d50:	24004c18 	.word	0x24004c18
 8008d54:	24004740 	.word	0x24004740
 8008d58:	24004bd0 	.word	0x24004bd0
 8008d5c:	2400473c 	.word	0x2400473c
 8008d60:	24004c24 	.word	0x24004c24

08008d64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d6c:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <vTaskInternalSetTimeOutState+0x24>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d74:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <vTaskInternalSetTimeOutState+0x28>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	605a      	str	r2, [r3, #4]
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	24004c28 	.word	0x24004c28
 8008d8c:	24004c14 	.word	0x24004c14

08008d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10a      	bne.n	8008dd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	60fb      	str	r3, [r7, #12]
}
 8008dce:	bf00      	nop
 8008dd0:	e7fe      	b.n	8008dd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008dd2:	f7fe fb77 	bl	80074c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <xTaskCheckForTimeOut+0xbc>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dee:	d102      	bne.n	8008df6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
 8008df4:	e023      	b.n	8008e3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <xTaskCheckForTimeOut+0xc0>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d007      	beq.n	8008e12 <xTaskCheckForTimeOut+0x82>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d302      	bcc.n	8008e12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e015      	b.n	8008e3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d20b      	bcs.n	8008e34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	1ad2      	subs	r2, r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff ff9b 	bl	8008d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	e004      	b.n	8008e3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e3e:	f7fe fb71 	bl	8007524 <vPortExitCritical>

	return xReturn;
 8008e42:	69fb      	ldr	r3, [r7, #28]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	24004c14 	.word	0x24004c14
 8008e50:	24004c28 	.word	0x24004c28

08008e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <vTaskMissedYield+0x14>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
}
 8008e5e:	bf00      	nop
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	24004c24 	.word	0x24004c24

08008e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e74:	f000 f852 	bl	8008f1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e78:	4b06      	ldr	r3, [pc, #24]	; (8008e94 <prvIdleTask+0x28>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d9f9      	bls.n	8008e74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e80:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <prvIdleTask+0x2c>)
 8008e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e90:	e7f0      	b.n	8008e74 <prvIdleTask+0x8>
 8008e92:	bf00      	nop
 8008e94:	24004740 	.word	0x24004740
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	607b      	str	r3, [r7, #4]
 8008ea6:	e00c      	b.n	8008ec2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4a12      	ldr	r2, [pc, #72]	; (8008efc <prvInitialiseTaskLists+0x60>)
 8008eb4:	4413      	add	r3, r2
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe f922 	bl	8007100 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	607b      	str	r3, [r7, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b37      	cmp	r3, #55	; 0x37
 8008ec6:	d9ef      	bls.n	8008ea8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ec8:	480d      	ldr	r0, [pc, #52]	; (8008f00 <prvInitialiseTaskLists+0x64>)
 8008eca:	f7fe f919 	bl	8007100 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ece:	480d      	ldr	r0, [pc, #52]	; (8008f04 <prvInitialiseTaskLists+0x68>)
 8008ed0:	f7fe f916 	bl	8007100 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ed4:	480c      	ldr	r0, [pc, #48]	; (8008f08 <prvInitialiseTaskLists+0x6c>)
 8008ed6:	f7fe f913 	bl	8007100 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008eda:	480c      	ldr	r0, [pc, #48]	; (8008f0c <prvInitialiseTaskLists+0x70>)
 8008edc:	f7fe f910 	bl	8007100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ee0:	480b      	ldr	r0, [pc, #44]	; (8008f10 <prvInitialiseTaskLists+0x74>)
 8008ee2:	f7fe f90d 	bl	8007100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ee6:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <prvInitialiseTaskLists+0x78>)
 8008ee8:	4a05      	ldr	r2, [pc, #20]	; (8008f00 <prvInitialiseTaskLists+0x64>)
 8008eea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008eec:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <prvInitialiseTaskLists+0x7c>)
 8008eee:	4a05      	ldr	r2, [pc, #20]	; (8008f04 <prvInitialiseTaskLists+0x68>)
 8008ef0:	601a      	str	r2, [r3, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	24004740 	.word	0x24004740
 8008f00:	24004ba0 	.word	0x24004ba0
 8008f04:	24004bb4 	.word	0x24004bb4
 8008f08:	24004bd0 	.word	0x24004bd0
 8008f0c:	24004be4 	.word	0x24004be4
 8008f10:	24004bfc 	.word	0x24004bfc
 8008f14:	24004bc8 	.word	0x24004bc8
 8008f18:	24004bcc 	.word	0x24004bcc

08008f1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f22:	e019      	b.n	8008f58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f24:	f7fe face 	bl	80074c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f28:	4b10      	ldr	r3, [pc, #64]	; (8008f6c <prvCheckTasksWaitingTermination+0x50>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3304      	adds	r3, #4
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe f96d 	bl	8007214 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f3a:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <prvCheckTasksWaitingTermination+0x54>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	4a0b      	ldr	r2, [pc, #44]	; (8008f70 <prvCheckTasksWaitingTermination+0x54>)
 8008f42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f44:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <prvCheckTasksWaitingTermination+0x58>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <prvCheckTasksWaitingTermination+0x58>)
 8008f4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f4e:	f7fe fae9 	bl	8007524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f810 	bl	8008f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f58:	4b06      	ldr	r3, [pc, #24]	; (8008f74 <prvCheckTasksWaitingTermination+0x58>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e1      	bne.n	8008f24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f60:	bf00      	nop
 8008f62:	bf00      	nop
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	24004be4 	.word	0x24004be4
 8008f70:	24004c10 	.word	0x24004c10
 8008f74:	24004bf8 	.word	0x24004bf8

08008f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3354      	adds	r3, #84	; 0x54
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fec5 	bl	8009d14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d108      	bne.n	8008fa6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fd ff93 	bl	8006ec4 <vPortFree>
				vPortFree( pxTCB );
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fd ff90 	bl	8006ec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fa4:	e018      	b.n	8008fd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d103      	bne.n	8008fb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7fd ff87 	bl	8006ec4 <vPortFree>
	}
 8008fb6:	e00f      	b.n	8008fd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d00a      	beq.n	8008fd8 <prvDeleteTCB+0x60>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	60fb      	str	r3, [r7, #12]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <prvDeleteTCB+0x5e>
	}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fe6:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <prvResetNextTaskUnblockTime+0x38>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d104      	bne.n	8008ffa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <prvResetNextTaskUnblockTime+0x3c>)
 8008ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ff8:	e008      	b.n	800900c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ffa:	4b07      	ldr	r3, [pc, #28]	; (8009018 <prvResetNextTaskUnblockTime+0x38>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	4a04      	ldr	r2, [pc, #16]	; (800901c <prvResetNextTaskUnblockTime+0x3c>)
 800900a:	6013      	str	r3, [r2, #0]
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	24004bc8 	.word	0x24004bc8
 800901c:	24004c30 	.word	0x24004c30

08009020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009026:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <xTaskGetSchedulerState+0x34>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d102      	bne.n	8009034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800902e:	2301      	movs	r3, #1
 8009030:	607b      	str	r3, [r7, #4]
 8009032:	e008      	b.n	8009046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009034:	4b08      	ldr	r3, [pc, #32]	; (8009058 <xTaskGetSchedulerState+0x38>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800903c:	2302      	movs	r3, #2
 800903e:	607b      	str	r3, [r7, #4]
 8009040:	e001      	b.n	8009046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009042:	2300      	movs	r3, #0
 8009044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009046:	687b      	ldr	r3, [r7, #4]
	}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	24004c1c 	.word	0x24004c1c
 8009058:	24004c38 	.word	0x24004c38

0800905c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009068:	2300      	movs	r3, #0
 800906a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d056      	beq.n	8009120 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009072:	4b2e      	ldr	r3, [pc, #184]	; (800912c <xTaskPriorityDisinherit+0xd0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	429a      	cmp	r2, r3
 800907a:	d00a      	beq.n	8009092 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	60fb      	str	r3, [r7, #12]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10a      	bne.n	80090b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	60bb      	str	r3, [r7, #8]
}
 80090ac:	bf00      	nop
 80090ae:	e7fe      	b.n	80090ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b4:	1e5a      	subs	r2, r3, #1
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d02c      	beq.n	8009120 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d128      	bne.n	8009120 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe f89e 	bl	8007214 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <xTaskPriorityDisinherit+0xd4>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d903      	bls.n	8009100 <xTaskPriorityDisinherit+0xa4>
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	4a0c      	ldr	r2, [pc, #48]	; (8009130 <xTaskPriorityDisinherit+0xd4>)
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4a09      	ldr	r2, [pc, #36]	; (8009134 <xTaskPriorityDisinherit+0xd8>)
 800910e:	441a      	add	r2, r3
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7fe f81f 	bl	800715a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800911c:	2301      	movs	r3, #1
 800911e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009120:	697b      	ldr	r3, [r7, #20]
	}
 8009122:	4618      	mov	r0, r3
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	2400473c 	.word	0x2400473c
 8009130:	24004c18 	.word	0x24004c18
 8009134:	24004740 	.word	0x24004740

08009138 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009146:	f7fe f9bd 	bl	80074c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800914a:	4b29      	ldr	r3, [pc, #164]	; (80091f0 <xTaskNotifyWait+0xb8>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b02      	cmp	r3, #2
 8009156:	d01c      	beq.n	8009192 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009158:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <xTaskNotifyWait+0xb8>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	43d2      	mvns	r2, r2
 8009164:	400a      	ands	r2, r1
 8009166:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800916a:	4b21      	ldr	r3, [pc, #132]	; (80091f0 <xTaskNotifyWait+0xb8>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00b      	beq.n	8009192 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800917a:	2101      	movs	r1, #1
 800917c:	6838      	ldr	r0, [r7, #0]
 800917e:	f000 f9dd 	bl	800953c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009182:	4b1c      	ldr	r3, [pc, #112]	; (80091f4 <xTaskNotifyWait+0xbc>)
 8009184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009192:	f7fe f9c7 	bl	8007524 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009196:	f7fe f995 	bl	80074c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80091a0:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <xTaskNotifyWait+0xb8>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80091ac:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <xTaskNotifyWait+0xb8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d002      	beq.n	80091c0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]
 80091be:	e00a      	b.n	80091d6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80091c0:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <xTaskNotifyWait+0xb8>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	43d2      	mvns	r2, r2
 80091cc:	400a      	ands	r2, r1
 80091ce:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80091d2:	2301      	movs	r3, #1
 80091d4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091d6:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <xTaskNotifyWait+0xb8>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80091e0:	f7fe f9a0 	bl	8007524 <vPortExitCritical>

		return xReturn;
 80091e4:	697b      	ldr	r3, [r7, #20]
	}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	2400473c 	.word	0x2400473c
 80091f4:	e000ed04 	.word	0xe000ed04

080091f8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08a      	sub	sp, #40	; 0x28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	4613      	mov	r3, r2
 8009206:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009208:	2301      	movs	r3, #1
 800920a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <xTaskGenericNotify+0x30>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	61bb      	str	r3, [r7, #24]
}
 8009224:	bf00      	nop
 8009226:	e7fe      	b.n	8009226 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800922c:	f7fe f94a 	bl	80074c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d004      	beq.n	8009240 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009246:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	2b04      	cmp	r3, #4
 8009254:	d82d      	bhi.n	80092b2 <xTaskGenericNotify+0xba>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <xTaskGenericNotify+0x64>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	080092d5 	.word	0x080092d5
 8009260:	08009271 	.word	0x08009271
 8009264:	08009283 	.word	0x08009283
 8009268:	08009293 	.word	0x08009293
 800926c:	0800929d 	.word	0x0800929d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	431a      	orrs	r2, r3
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009280:	e02b      	b.n	80092da <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	6a3b      	ldr	r3, [r7, #32]
 800928c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009290:	e023      	b.n	80092da <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800929a:	e01e      	b.n	80092da <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800929c:	7ffb      	ldrb	r3, [r7, #31]
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d004      	beq.n	80092ac <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80092aa:	e016      	b.n	80092da <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80092ac:	2300      	movs	r3, #0
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80092b0:	e013      	b.n	80092da <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80092b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092bc:	d00c      	beq.n	80092d8 <xTaskGenericNotify+0xe0>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	617b      	str	r3, [r7, #20]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <xTaskGenericNotify+0xda>
					break;
 80092d4:	bf00      	nop
 80092d6:	e000      	b.n	80092da <xTaskGenericNotify+0xe2>

					break;
 80092d8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80092da:	7ffb      	ldrb	r3, [r7, #31]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d13a      	bne.n	8009356 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fd ff95 	bl	8007214 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ee:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <xTaskGenericNotify+0x16c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d903      	bls.n	80092fe <xTaskGenericNotify+0x106>
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fa:	4a1a      	ldr	r2, [pc, #104]	; (8009364 <xTaskGenericNotify+0x16c>)
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4a17      	ldr	r2, [pc, #92]	; (8009368 <xTaskGenericNotify+0x170>)
 800930c:	441a      	add	r2, r3
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	3304      	adds	r3, #4
 8009312:	4619      	mov	r1, r3
 8009314:	4610      	mov	r0, r2
 8009316:	f7fd ff20 	bl	800715a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00a      	beq.n	8009338 <xTaskGenericNotify+0x140>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	613b      	str	r3, [r7, #16]
}
 8009334:	bf00      	nop
 8009336:	e7fe      	b.n	8009336 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	4b0b      	ldr	r3, [pc, #44]	; (800936c <xTaskGenericNotify+0x174>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	429a      	cmp	r2, r3
 8009344:	d907      	bls.n	8009356 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009346:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <xTaskGenericNotify+0x178>)
 8009348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009356:	f7fe f8e5 	bl	8007524 <vPortExitCritical>

		return xReturn;
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800935c:	4618      	mov	r0, r3
 800935e:	3728      	adds	r7, #40	; 0x28
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	24004c18 	.word	0x24004c18
 8009368:	24004740 	.word	0x24004740
 800936c:	2400473c 	.word	0x2400473c
 8009370:	e000ed04 	.word	0xe000ed04

08009374 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08e      	sub	sp, #56	; 0x38
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	4613      	mov	r3, r2
 8009382:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009384:	2301      	movs	r3, #1
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093a4:	f7fe f970 	bl	8007688 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80093ac:	f3ef 8211 	mrs	r2, BASEPRI
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	623a      	str	r2, [r7, #32]
 80093c2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80093c4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d004      	beq.n	80093d8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80093de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	2202      	movs	r2, #2
 80093e6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d82f      	bhi.n	8009450 <xTaskGenericNotifyFromISR+0xdc>
 80093f0:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <xTaskGenericNotifyFromISR+0x84>)
 80093f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f6:	bf00      	nop
 80093f8:	08009473 	.word	0x08009473
 80093fc:	0800940d 	.word	0x0800940d
 8009400:	0800941f 	.word	0x0800941f
 8009404:	0800942f 	.word	0x0800942f
 8009408:	08009439 	.word	0x08009439
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	431a      	orrs	r2, r3
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800941c:	e02c      	b.n	8009478 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800942c:	e024      	b.n	8009478 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009436:	e01f      	b.n	8009478 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009438:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800943c:	2b02      	cmp	r3, #2
 800943e:	d004      	beq.n	800944a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009448:	e016      	b.n	8009478 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800944a:	2300      	movs	r3, #0
 800944c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800944e:	e013      	b.n	8009478 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d00c      	beq.n	8009476 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800945c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	61bb      	str	r3, [r7, #24]
}
 800946e:	bf00      	nop
 8009470:	e7fe      	b.n	8009470 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009472:	bf00      	nop
 8009474:	e000      	b.n	8009478 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009476:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009478:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800947c:	2b01      	cmp	r3, #1
 800947e:	d146      	bne.n	800950e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	617b      	str	r3, [r7, #20]
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949e:	4b21      	ldr	r3, [pc, #132]	; (8009524 <xTaskGenericNotifyFromISR+0x1b0>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d11d      	bne.n	80094e2 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	3304      	adds	r3, #4
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fd feb2 	bl	8007214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b4:	4b1c      	ldr	r3, [pc, #112]	; (8009528 <xTaskGenericNotifyFromISR+0x1b4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d903      	bls.n	80094c4 <xTaskGenericNotifyFromISR+0x150>
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	4a19      	ldr	r2, [pc, #100]	; (8009528 <xTaskGenericNotifyFromISR+0x1b4>)
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4a16      	ldr	r2, [pc, #88]	; (800952c <xTaskGenericNotifyFromISR+0x1b8>)
 80094d2:	441a      	add	r2, r3
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	3304      	adds	r3, #4
 80094d8:	4619      	mov	r1, r3
 80094da:	4610      	mov	r0, r2
 80094dc:	f7fd fe3d 	bl	800715a <vListInsertEnd>
 80094e0:	e005      	b.n	80094ee <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80094e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e4:	3318      	adds	r3, #24
 80094e6:	4619      	mov	r1, r3
 80094e8:	4811      	ldr	r0, [pc, #68]	; (8009530 <xTaskGenericNotifyFromISR+0x1bc>)
 80094ea:	f7fd fe36 	bl	800715a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f2:	4b10      	ldr	r3, [pc, #64]	; (8009534 <xTaskGenericNotifyFromISR+0x1c0>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d908      	bls.n	800950e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80094fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009504:	2201      	movs	r2, #1
 8009506:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009508:	4b0b      	ldr	r3, [pc, #44]	; (8009538 <xTaskGenericNotifyFromISR+0x1c4>)
 800950a:	2201      	movs	r2, #1
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f383 8811 	msr	BASEPRI, r3
}
 8009518:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800951a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800951c:	4618      	mov	r0, r3
 800951e:	3738      	adds	r7, #56	; 0x38
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	24004c38 	.word	0x24004c38
 8009528:	24004c18 	.word	0x24004c18
 800952c:	24004740 	.word	0x24004740
 8009530:	24004bd0 	.word	0x24004bd0
 8009534:	2400473c 	.word	0x2400473c
 8009538:	24004c24 	.word	0x24004c24

0800953c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009546:	4b21      	ldr	r3, [pc, #132]	; (80095cc <prvAddCurrentTaskToDelayedList+0x90>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800954c:	4b20      	ldr	r3, [pc, #128]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3304      	adds	r3, #4
 8009552:	4618      	mov	r0, r3
 8009554:	f7fd fe5e 	bl	8007214 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955e:	d10a      	bne.n	8009576 <prvAddCurrentTaskToDelayedList+0x3a>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d007      	beq.n	8009576 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009566:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3304      	adds	r3, #4
 800956c:	4619      	mov	r1, r3
 800956e:	4819      	ldr	r0, [pc, #100]	; (80095d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009570:	f7fd fdf3 	bl	800715a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009574:	e026      	b.n	80095c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4413      	add	r3, r2
 800957c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800957e:	4b14      	ldr	r3, [pc, #80]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	429a      	cmp	r2, r3
 800958c:	d209      	bcs.n	80095a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800958e:	4b12      	ldr	r3, [pc, #72]	; (80095d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3304      	adds	r3, #4
 8009598:	4619      	mov	r1, r3
 800959a:	4610      	mov	r0, r2
 800959c:	f7fd fe01 	bl	80071a2 <vListInsert>
}
 80095a0:	e010      	b.n	80095c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095a2:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f7fd fdf7 	bl	80071a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095b4:	4b0a      	ldr	r3, [pc, #40]	; (80095e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d202      	bcs.n	80095c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095be:	4a08      	ldr	r2, [pc, #32]	; (80095e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	6013      	str	r3, [r2, #0]
}
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	24004c14 	.word	0x24004c14
 80095d0:	2400473c 	.word	0x2400473c
 80095d4:	24004bfc 	.word	0x24004bfc
 80095d8:	24004bcc 	.word	0x24004bcc
 80095dc:	24004bc8 	.word	0x24004bc8
 80095e0:	24004c30 	.word	0x24004c30

080095e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08a      	sub	sp, #40	; 0x28
 80095e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095ee:	f000 fb07 	bl	8009c00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095f2:	4b1c      	ldr	r3, [pc, #112]	; (8009664 <xTimerCreateTimerTask+0x80>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d021      	beq.n	800963e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009602:	1d3a      	adds	r2, r7, #4
 8009604:	f107 0108 	add.w	r1, r7, #8
 8009608:	f107 030c 	add.w	r3, r7, #12
 800960c:	4618      	mov	r0, r3
 800960e:	f7fd fb73 	bl	8006cf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	9202      	str	r2, [sp, #8]
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	2302      	movs	r3, #2
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	2300      	movs	r3, #0
 8009622:	460a      	mov	r2, r1
 8009624:	4910      	ldr	r1, [pc, #64]	; (8009668 <xTimerCreateTimerTask+0x84>)
 8009626:	4811      	ldr	r0, [pc, #68]	; (800966c <xTimerCreateTimerTask+0x88>)
 8009628:	f7fe fe14 	bl	8008254 <xTaskCreateStatic>
 800962c:	4603      	mov	r3, r0
 800962e:	4a10      	ldr	r2, [pc, #64]	; (8009670 <xTimerCreateTimerTask+0x8c>)
 8009630:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009632:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <xTimerCreateTimerTask+0x8c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800963a:	2301      	movs	r3, #1
 800963c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	613b      	str	r3, [r7, #16]
}
 8009656:	bf00      	nop
 8009658:	e7fe      	b.n	8009658 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800965a:	697b      	ldr	r3, [r7, #20]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	24004c6c 	.word	0x24004c6c
 8009668:	08009ee8 	.word	0x08009ee8
 800966c:	080097a9 	.word	0x080097a9
 8009670:	24004c70 	.word	0x24004c70

08009674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08a      	sub	sp, #40	; 0x28
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009682:	2300      	movs	r3, #0
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	623b      	str	r3, [r7, #32]
}
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096a2:	4b1a      	ldr	r3, [pc, #104]	; (800970c <xTimerGenericCommand+0x98>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d02a      	beq.n	8009700 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2b05      	cmp	r3, #5
 80096ba:	dc18      	bgt.n	80096ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096bc:	f7ff fcb0 	bl	8009020 <xTaskGetSchedulerState>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d109      	bne.n	80096da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096c6:	4b11      	ldr	r3, [pc, #68]	; (800970c <xTimerGenericCommand+0x98>)
 80096c8:	6818      	ldr	r0, [r3, #0]
 80096ca:	f107 0110 	add.w	r1, r7, #16
 80096ce:	2300      	movs	r3, #0
 80096d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d2:	f7fe f957 	bl	8007984 <xQueueGenericSend>
 80096d6:	6278      	str	r0, [r7, #36]	; 0x24
 80096d8:	e012      	b.n	8009700 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096da:	4b0c      	ldr	r3, [pc, #48]	; (800970c <xTimerGenericCommand+0x98>)
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	f107 0110 	add.w	r1, r7, #16
 80096e2:	2300      	movs	r3, #0
 80096e4:	2200      	movs	r2, #0
 80096e6:	f7fe f94d 	bl	8007984 <xQueueGenericSend>
 80096ea:	6278      	str	r0, [r7, #36]	; 0x24
 80096ec:	e008      	b.n	8009700 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096ee:	4b07      	ldr	r3, [pc, #28]	; (800970c <xTimerGenericCommand+0x98>)
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	f107 0110 	add.w	r1, r7, #16
 80096f6:	2300      	movs	r3, #0
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	f7fe fa41 	bl	8007b80 <xQueueGenericSendFromISR>
 80096fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009702:	4618      	mov	r0, r3
 8009704:	3728      	adds	r7, #40	; 0x28
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	24004c6c 	.word	0x24004c6c

08009710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af02      	add	r7, sp, #8
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971a:	4b22      	ldr	r3, [pc, #136]	; (80097a4 <prvProcessExpiredTimer+0x94>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	3304      	adds	r3, #4
 8009728:	4618      	mov	r0, r3
 800972a:	f7fd fd73 	bl	8007214 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d022      	beq.n	8009782 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	699a      	ldr	r2, [r3, #24]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	18d1      	adds	r1, r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	6978      	ldr	r0, [r7, #20]
 800974a:	f000 f8d1 	bl	80098f0 <prvInsertTimerInActiveList>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01f      	beq.n	8009794 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009754:	2300      	movs	r3, #0
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	2300      	movs	r3, #0
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	2100      	movs	r1, #0
 800975e:	6978      	ldr	r0, [r7, #20]
 8009760:	f7ff ff88 	bl	8009674 <xTimerGenericCommand>
 8009764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d113      	bne.n	8009794 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	60fb      	str	r3, [r7, #12]
}
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009788:	f023 0301 	bic.w	r3, r3, #1
 800978c:	b2da      	uxtb	r2, r3
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	6978      	ldr	r0, [r7, #20]
 800979a:	4798      	blx	r3
}
 800979c:	bf00      	nop
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	24004c64 	.word	0x24004c64

080097a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097b0:	f107 0308 	add.w	r3, r7, #8
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 f857 	bl	8009868 <prvGetNextExpireTime>
 80097ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	4619      	mov	r1, r3
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 f803 	bl	80097cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097c6:	f000 f8d5 	bl	8009974 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097ca:	e7f1      	b.n	80097b0 <prvTimerTask+0x8>

080097cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097d6:	f7ff f837 	bl	8008848 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097da:	f107 0308 	add.w	r3, r7, #8
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 f866 	bl	80098b0 <prvSampleTimeNow>
 80097e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d130      	bne.n	800984e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <prvProcessTimerOrBlockTask+0x3c>
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d806      	bhi.n	8009808 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097fa:	f7ff f833 	bl	8008864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ff85 	bl	8009710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009806:	e024      	b.n	8009852 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d008      	beq.n	8009820 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800980e:	4b13      	ldr	r3, [pc, #76]	; (800985c <prvProcessTimerOrBlockTask+0x90>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <prvProcessTimerOrBlockTask+0x50>
 8009818:	2301      	movs	r3, #1
 800981a:	e000      	b.n	800981e <prvProcessTimerOrBlockTask+0x52>
 800981c:	2300      	movs	r3, #0
 800981e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <prvProcessTimerOrBlockTask+0x94>)
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4619      	mov	r1, r3
 800982e:	f7fe fcdd 	bl	80081ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009832:	f7ff f817 	bl	8008864 <xTaskResumeAll>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10a      	bne.n	8009852 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <prvProcessTimerOrBlockTask+0x98>)
 800983e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	f3bf 8f6f 	isb	sy
}
 800984c:	e001      	b.n	8009852 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800984e:	f7ff f809 	bl	8008864 <xTaskResumeAll>
}
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	24004c68 	.word	0x24004c68
 8009860:	24004c6c 	.word	0x24004c6c
 8009864:	e000ed04 	.word	0xe000ed04

08009868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009870:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <prvGetNextExpireTime+0x44>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <prvGetNextExpireTime+0x16>
 800987a:	2201      	movs	r2, #1
 800987c:	e000      	b.n	8009880 <prvGetNextExpireTime+0x18>
 800987e:	2200      	movs	r2, #0
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d105      	bne.n	8009898 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800988c:	4b07      	ldr	r3, [pc, #28]	; (80098ac <prvGetNextExpireTime+0x44>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	e001      	b.n	800989c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800989c:	68fb      	ldr	r3, [r7, #12]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	24004c64 	.word	0x24004c64

080098b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098b8:	f7ff f872 	bl	80089a0 <xTaskGetTickCount>
 80098bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098be:	4b0b      	ldr	r3, [pc, #44]	; (80098ec <prvSampleTimeNow+0x3c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d205      	bcs.n	80098d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098c8:	f000 f936 	bl	8009b38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	e002      	b.n	80098da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098da:	4a04      	ldr	r2, [pc, #16]	; (80098ec <prvSampleTimeNow+0x3c>)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098e0:	68fb      	ldr	r3, [r7, #12]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	24004c74 	.word	0x24004c74

080098f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098fe:	2300      	movs	r3, #0
 8009900:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d812      	bhi.n	800993c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	1ad2      	subs	r2, r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	429a      	cmp	r2, r3
 8009922:	d302      	bcc.n	800992a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009924:	2301      	movs	r3, #1
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	e01b      	b.n	8009962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800992a:	4b10      	ldr	r3, [pc, #64]	; (800996c <prvInsertTimerInActiveList+0x7c>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3304      	adds	r3, #4
 8009932:	4619      	mov	r1, r3
 8009934:	4610      	mov	r0, r2
 8009936:	f7fd fc34 	bl	80071a2 <vListInsert>
 800993a:	e012      	b.n	8009962 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	429a      	cmp	r2, r3
 8009942:	d206      	bcs.n	8009952 <prvInsertTimerInActiveList+0x62>
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	429a      	cmp	r2, r3
 800994a:	d302      	bcc.n	8009952 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800994c:	2301      	movs	r3, #1
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	e007      	b.n	8009962 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009952:	4b07      	ldr	r3, [pc, #28]	; (8009970 <prvInsertTimerInActiveList+0x80>)
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3304      	adds	r3, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f7fd fc20 	bl	80071a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009962:	697b      	ldr	r3, [r7, #20]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	24004c68 	.word	0x24004c68
 8009970:	24004c64 	.word	0x24004c64

08009974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08e      	sub	sp, #56	; 0x38
 8009978:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800997a:	e0ca      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	da18      	bge.n	80099b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009982:	1d3b      	adds	r3, r7, #4
 8009984:	3304      	adds	r3, #4
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10a      	bne.n	80099a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	61fb      	str	r3, [r7, #28]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099aa:	6850      	ldr	r0, [r2, #4]
 80099ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ae:	6892      	ldr	r2, [r2, #8]
 80099b0:	4611      	mov	r1, r2
 80099b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f2c0 80aa 	blt.w	8009b10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	3304      	adds	r3, #4
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fd fc21 	bl	8007214 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099d2:	463b      	mov	r3, r7
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff ff6b 	bl	80098b0 <prvSampleTimeNow>
 80099da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b09      	cmp	r3, #9
 80099e0:	f200 8097 	bhi.w	8009b12 <prvProcessReceivedCommands+0x19e>
 80099e4:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <prvProcessReceivedCommands+0x78>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a89 	.word	0x08009a89
 80099fc:	08009a9d 	.word	0x08009a9d
 8009a00:	08009ae7 	.word	0x08009ae7
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a15 	.word	0x08009a15
 8009a0c:	08009a89 	.word	0x08009a89
 8009a10:	08009a9d 	.word	0x08009a9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a1a:	f043 0301 	orr.w	r3, r3, #1
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	18d1      	adds	r1, r2, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a34:	f7ff ff5c 	bl	80098f0 <prvInsertTimerInActiveList>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d069      	beq.n	8009b12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d05e      	beq.n	8009b12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	441a      	add	r2, r3
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	2300      	movs	r3, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a66:	f7ff fe05 	bl	8009674 <xTimerGenericCommand>
 8009a6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d14f      	bne.n	8009b12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	61bb      	str	r3, [r7, #24]
}
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a8e:	f023 0301 	bic.w	r3, r3, #1
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a9a:	e03a      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aa2:	f043 0301 	orr.w	r3, r3, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10a      	bne.n	8009ad2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	617b      	str	r3, [r7, #20]
}
 8009ace:	bf00      	nop
 8009ad0:	e7fe      	b.n	8009ad0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	699a      	ldr	r2, [r3, #24]
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	18d1      	adds	r1, r2, r3
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ae0:	f7ff ff06 	bl	80098f0 <prvInsertTimerInActiveList>
					break;
 8009ae4:	e015      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aec:	f003 0302 	and.w	r3, r3, #2
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d103      	bne.n	8009afc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009af6:	f7fd f9e5 	bl	8006ec4 <vPortFree>
 8009afa:	e00a      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b02:	f023 0301 	bic.w	r3, r3, #1
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b0e:	e000      	b.n	8009b12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b12:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <prvProcessReceivedCommands+0x1c0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	1d39      	adds	r1, r7, #4
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe f8cc 	bl	8007cb8 <xQueueReceive>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f47f af2a 	bne.w	800997c <prvProcessReceivedCommands+0x8>
	}
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	3730      	adds	r7, #48	; 0x30
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	24004c6c 	.word	0x24004c6c

08009b38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b3e:	e048      	b.n	8009bd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b40:	4b2d      	ldr	r3, [pc, #180]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4a:	4b2b      	ldr	r3, [pc, #172]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3304      	adds	r3, #4
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fd fb5b 	bl	8007214 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d02e      	beq.n	8009bd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d90e      	bls.n	8009ba4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b92:	4b19      	ldr	r3, [pc, #100]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f7fd fb00 	bl	80071a2 <vListInsert>
 8009ba2:	e016      	b.n	8009bd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	2100      	movs	r1, #0
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff fd60 	bl	8009674 <xTimerGenericCommand>
 8009bb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	603b      	str	r3, [r7, #0]
}
 8009bce:	bf00      	nop
 8009bd0:	e7fe      	b.n	8009bd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bd2:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1b1      	bne.n	8009b40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bdc:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009be2:	4b06      	ldr	r3, [pc, #24]	; (8009bfc <prvSwitchTimerLists+0xc4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a04      	ldr	r2, [pc, #16]	; (8009bf8 <prvSwitchTimerLists+0xc0>)
 8009be8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bea:	4a04      	ldr	r2, [pc, #16]	; (8009bfc <prvSwitchTimerLists+0xc4>)
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	6013      	str	r3, [r2, #0]
}
 8009bf0:	bf00      	nop
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	24004c64 	.word	0x24004c64
 8009bfc:	24004c68 	.word	0x24004c68

08009c00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c06:	f7fd fc5d 	bl	80074c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c0a:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <prvCheckForValidListAndQueue+0x60>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d120      	bne.n	8009c54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c12:	4814      	ldr	r0, [pc, #80]	; (8009c64 <prvCheckForValidListAndQueue+0x64>)
 8009c14:	f7fd fa74 	bl	8007100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c18:	4813      	ldr	r0, [pc, #76]	; (8009c68 <prvCheckForValidListAndQueue+0x68>)
 8009c1a:	f7fd fa71 	bl	8007100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <prvCheckForValidListAndQueue+0x6c>)
 8009c20:	4a10      	ldr	r2, [pc, #64]	; (8009c64 <prvCheckForValidListAndQueue+0x64>)
 8009c22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c24:	4b12      	ldr	r3, [pc, #72]	; (8009c70 <prvCheckForValidListAndQueue+0x70>)
 8009c26:	4a10      	ldr	r2, [pc, #64]	; (8009c68 <prvCheckForValidListAndQueue+0x68>)
 8009c28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	4b11      	ldr	r3, [pc, #68]	; (8009c74 <prvCheckForValidListAndQueue+0x74>)
 8009c30:	4a11      	ldr	r2, [pc, #68]	; (8009c78 <prvCheckForValidListAndQueue+0x78>)
 8009c32:	2110      	movs	r1, #16
 8009c34:	200a      	movs	r0, #10
 8009c36:	f7fd fdcf 	bl	80077d8 <xQueueGenericCreateStatic>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	4a08      	ldr	r2, [pc, #32]	; (8009c60 <prvCheckForValidListAndQueue+0x60>)
 8009c3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <prvCheckForValidListAndQueue+0x60>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d005      	beq.n	8009c54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c48:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <prvCheckForValidListAndQueue+0x60>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	490b      	ldr	r1, [pc, #44]	; (8009c7c <prvCheckForValidListAndQueue+0x7c>)
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe faa2 	bl	8008198 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c54:	f7fd fc66 	bl	8007524 <vPortExitCritical>
}
 8009c58:	bf00      	nop
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	24004c6c 	.word	0x24004c6c
 8009c64:	24004c3c 	.word	0x24004c3c
 8009c68:	24004c50 	.word	0x24004c50
 8009c6c:	24004c64 	.word	0x24004c64
 8009c70:	24004c68 	.word	0x24004c68
 8009c74:	24004d18 	.word	0x24004d18
 8009c78:	24004c78 	.word	0x24004c78
 8009c7c:	08009ef0 	.word	0x08009ef0

08009c80 <__libc_init_array>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	4d0d      	ldr	r5, [pc, #52]	; (8009cb8 <__libc_init_array+0x38>)
 8009c84:	4c0d      	ldr	r4, [pc, #52]	; (8009cbc <__libc_init_array+0x3c>)
 8009c86:	1b64      	subs	r4, r4, r5
 8009c88:	10a4      	asrs	r4, r4, #2
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	42a6      	cmp	r6, r4
 8009c8e:	d109      	bne.n	8009ca4 <__libc_init_array+0x24>
 8009c90:	4d0b      	ldr	r5, [pc, #44]	; (8009cc0 <__libc_init_array+0x40>)
 8009c92:	4c0c      	ldr	r4, [pc, #48]	; (8009cc4 <__libc_init_array+0x44>)
 8009c94:	f000 f8f2 	bl	8009e7c <_init>
 8009c98:	1b64      	subs	r4, r4, r5
 8009c9a:	10a4      	asrs	r4, r4, #2
 8009c9c:	2600      	movs	r6, #0
 8009c9e:	42a6      	cmp	r6, r4
 8009ca0:	d105      	bne.n	8009cae <__libc_init_array+0x2e>
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca8:	4798      	blx	r3
 8009caa:	3601      	adds	r6, #1
 8009cac:	e7ee      	b.n	8009c8c <__libc_init_array+0xc>
 8009cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb2:	4798      	blx	r3
 8009cb4:	3601      	adds	r6, #1
 8009cb6:	e7f2      	b.n	8009c9e <__libc_init_array+0x1e>
 8009cb8:	08009f78 	.word	0x08009f78
 8009cbc:	08009f78 	.word	0x08009f78
 8009cc0:	08009f78 	.word	0x08009f78
 8009cc4:	08009f7c 	.word	0x08009f7c

08009cc8 <__retarget_lock_acquire_recursive>:
 8009cc8:	4770      	bx	lr

08009cca <__retarget_lock_release_recursive>:
 8009cca:	4770      	bx	lr

08009ccc <memcpy>:
 8009ccc:	440a      	add	r2, r1
 8009cce:	4291      	cmp	r1, r2
 8009cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cd4:	d100      	bne.n	8009cd8 <memcpy+0xc>
 8009cd6:	4770      	bx	lr
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ce2:	4291      	cmp	r1, r2
 8009ce4:	d1f9      	bne.n	8009cda <memcpy+0xe>
 8009ce6:	bd10      	pop	{r4, pc}

08009ce8 <memset>:
 8009ce8:	4402      	add	r2, r0
 8009cea:	4603      	mov	r3, r0
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d100      	bne.n	8009cf2 <memset+0xa>
 8009cf0:	4770      	bx	lr
 8009cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cf6:	e7f9      	b.n	8009cec <memset+0x4>

08009cf8 <cleanup_glue>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	6809      	ldr	r1, [r1, #0]
 8009cfe:	4605      	mov	r5, r0
 8009d00:	b109      	cbz	r1, 8009d06 <cleanup_glue+0xe>
 8009d02:	f7ff fff9 	bl	8009cf8 <cleanup_glue>
 8009d06:	4621      	mov	r1, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d0e:	f000 b869 	b.w	8009de4 <_free_r>
	...

08009d14 <_reclaim_reent>:
 8009d14:	4b2c      	ldr	r3, [pc, #176]	; (8009dc8 <_reclaim_reent+0xb4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4283      	cmp	r3, r0
 8009d1a:	b570      	push	{r4, r5, r6, lr}
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	d051      	beq.n	8009dc4 <_reclaim_reent+0xb0>
 8009d20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009d22:	b143      	cbz	r3, 8009d36 <_reclaim_reent+0x22>
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d14a      	bne.n	8009dc0 <_reclaim_reent+0xac>
 8009d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d2c:	6819      	ldr	r1, [r3, #0]
 8009d2e:	b111      	cbz	r1, 8009d36 <_reclaim_reent+0x22>
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 f857 	bl	8009de4 <_free_r>
 8009d36:	6961      	ldr	r1, [r4, #20]
 8009d38:	b111      	cbz	r1, 8009d40 <_reclaim_reent+0x2c>
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 f852 	bl	8009de4 <_free_r>
 8009d40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009d42:	b111      	cbz	r1, 8009d4a <_reclaim_reent+0x36>
 8009d44:	4620      	mov	r0, r4
 8009d46:	f000 f84d 	bl	8009de4 <_free_r>
 8009d4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009d4c:	b111      	cbz	r1, 8009d54 <_reclaim_reent+0x40>
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 f848 	bl	8009de4 <_free_r>
 8009d54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009d56:	b111      	cbz	r1, 8009d5e <_reclaim_reent+0x4a>
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 f843 	bl	8009de4 <_free_r>
 8009d5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d60:	b111      	cbz	r1, 8009d68 <_reclaim_reent+0x54>
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 f83e 	bl	8009de4 <_free_r>
 8009d68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d6a:	b111      	cbz	r1, 8009d72 <_reclaim_reent+0x5e>
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 f839 	bl	8009de4 <_free_r>
 8009d72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009d74:	b111      	cbz	r1, 8009d7c <_reclaim_reent+0x68>
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 f834 	bl	8009de4 <_free_r>
 8009d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d7e:	b111      	cbz	r1, 8009d86 <_reclaim_reent+0x72>
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 f82f 	bl	8009de4 <_free_r>
 8009d86:	69a3      	ldr	r3, [r4, #24]
 8009d88:	b1e3      	cbz	r3, 8009dc4 <_reclaim_reent+0xb0>
 8009d8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4798      	blx	r3
 8009d90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d92:	b1b9      	cbz	r1, 8009dc4 <_reclaim_reent+0xb0>
 8009d94:	4620      	mov	r0, r4
 8009d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d9a:	f7ff bfad 	b.w	8009cf8 <cleanup_glue>
 8009d9e:	5949      	ldr	r1, [r1, r5]
 8009da0:	b941      	cbnz	r1, 8009db4 <_reclaim_reent+0xa0>
 8009da2:	3504      	adds	r5, #4
 8009da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da6:	2d80      	cmp	r5, #128	; 0x80
 8009da8:	68d9      	ldr	r1, [r3, #12]
 8009daa:	d1f8      	bne.n	8009d9e <_reclaim_reent+0x8a>
 8009dac:	4620      	mov	r0, r4
 8009dae:	f000 f819 	bl	8009de4 <_free_r>
 8009db2:	e7ba      	b.n	8009d2a <_reclaim_reent+0x16>
 8009db4:	680e      	ldr	r6, [r1, #0]
 8009db6:	4620      	mov	r0, r4
 8009db8:	f000 f814 	bl	8009de4 <_free_r>
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	e7ef      	b.n	8009da0 <_reclaim_reent+0x8c>
 8009dc0:	2500      	movs	r5, #0
 8009dc2:	e7ef      	b.n	8009da4 <_reclaim_reent+0x90>
 8009dc4:	bd70      	pop	{r4, r5, r6, pc}
 8009dc6:	bf00      	nop
 8009dc8:	24000020 	.word	0x24000020

08009dcc <__malloc_lock>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	; (8009dd4 <__malloc_lock+0x8>)
 8009dce:	f7ff bf7b 	b.w	8009cc8 <__retarget_lock_acquire_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	24004d68 	.word	0x24004d68

08009dd8 <__malloc_unlock>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	; (8009de0 <__malloc_unlock+0x8>)
 8009dda:	f7ff bf76 	b.w	8009cca <__retarget_lock_release_recursive>
 8009dde:	bf00      	nop
 8009de0:	24004d68 	.word	0x24004d68

08009de4 <_free_r>:
 8009de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009de6:	2900      	cmp	r1, #0
 8009de8:	d044      	beq.n	8009e74 <_free_r+0x90>
 8009dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dee:	9001      	str	r0, [sp, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f1a1 0404 	sub.w	r4, r1, #4
 8009df6:	bfb8      	it	lt
 8009df8:	18e4      	addlt	r4, r4, r3
 8009dfa:	f7ff ffe7 	bl	8009dcc <__malloc_lock>
 8009dfe:	4a1e      	ldr	r2, [pc, #120]	; (8009e78 <_free_r+0x94>)
 8009e00:	9801      	ldr	r0, [sp, #4]
 8009e02:	6813      	ldr	r3, [r2, #0]
 8009e04:	b933      	cbnz	r3, 8009e14 <_free_r+0x30>
 8009e06:	6063      	str	r3, [r4, #4]
 8009e08:	6014      	str	r4, [r2, #0]
 8009e0a:	b003      	add	sp, #12
 8009e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e10:	f7ff bfe2 	b.w	8009dd8 <__malloc_unlock>
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d908      	bls.n	8009e2a <_free_r+0x46>
 8009e18:	6825      	ldr	r5, [r4, #0]
 8009e1a:	1961      	adds	r1, r4, r5
 8009e1c:	428b      	cmp	r3, r1
 8009e1e:	bf01      	itttt	eq
 8009e20:	6819      	ldreq	r1, [r3, #0]
 8009e22:	685b      	ldreq	r3, [r3, #4]
 8009e24:	1949      	addeq	r1, r1, r5
 8009e26:	6021      	streq	r1, [r4, #0]
 8009e28:	e7ed      	b.n	8009e06 <_free_r+0x22>
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	b10b      	cbz	r3, 8009e34 <_free_r+0x50>
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	d9fa      	bls.n	8009e2a <_free_r+0x46>
 8009e34:	6811      	ldr	r1, [r2, #0]
 8009e36:	1855      	adds	r5, r2, r1
 8009e38:	42a5      	cmp	r5, r4
 8009e3a:	d10b      	bne.n	8009e54 <_free_r+0x70>
 8009e3c:	6824      	ldr	r4, [r4, #0]
 8009e3e:	4421      	add	r1, r4
 8009e40:	1854      	adds	r4, r2, r1
 8009e42:	42a3      	cmp	r3, r4
 8009e44:	6011      	str	r1, [r2, #0]
 8009e46:	d1e0      	bne.n	8009e0a <_free_r+0x26>
 8009e48:	681c      	ldr	r4, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	6053      	str	r3, [r2, #4]
 8009e4e:	4421      	add	r1, r4
 8009e50:	6011      	str	r1, [r2, #0]
 8009e52:	e7da      	b.n	8009e0a <_free_r+0x26>
 8009e54:	d902      	bls.n	8009e5c <_free_r+0x78>
 8009e56:	230c      	movs	r3, #12
 8009e58:	6003      	str	r3, [r0, #0]
 8009e5a:	e7d6      	b.n	8009e0a <_free_r+0x26>
 8009e5c:	6825      	ldr	r5, [r4, #0]
 8009e5e:	1961      	adds	r1, r4, r5
 8009e60:	428b      	cmp	r3, r1
 8009e62:	bf04      	itt	eq
 8009e64:	6819      	ldreq	r1, [r3, #0]
 8009e66:	685b      	ldreq	r3, [r3, #4]
 8009e68:	6063      	str	r3, [r4, #4]
 8009e6a:	bf04      	itt	eq
 8009e6c:	1949      	addeq	r1, r1, r5
 8009e6e:	6021      	streq	r1, [r4, #0]
 8009e70:	6054      	str	r4, [r2, #4]
 8009e72:	e7ca      	b.n	8009e0a <_free_r+0x26>
 8009e74:	b003      	add	sp, #12
 8009e76:	bd30      	pop	{r4, r5, pc}
 8009e78:	24004d6c 	.word	0x24004d6c

08009e7c <_init>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	bf00      	nop
 8009e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e82:	bc08      	pop	{r3}
 8009e84:	469e      	mov	lr, r3
 8009e86:	4770      	bx	lr

08009e88 <_fini>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	bf00      	nop
 8009e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8e:	bc08      	pop	{r3}
 8009e90:	469e      	mov	lr, r3
 8009e92:	4770      	bx	lr
